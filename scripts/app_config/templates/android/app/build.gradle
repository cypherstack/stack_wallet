plugins {
    id "com.android.application"
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace "com.place.holder"
    compileSdk flutter.compileSdkVersion
//    ndkVersion flutter.ndkVersion
    ndkVersion = "26.1.10909125"

    packagingOptions {
        pickFirst 'lib/x86/libc++_shared.so'
        pickFirst 'lib/x86_64/libc++_shared.so'
        pickFirst 'lib/armeabi-v7a/libc++_shared.so'
        pickFirst 'lib/arm64-v8a/libc++_shared.so'
    }

    defaultConfig {
        applicationId "com.place.holder"
        minSdk flutter.minSdkVersion
        targetSdk flutter.targetSdkVersion
        versionCode flutter.versionCode
        versionName flutter.versionName

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_17
            targetCompatibility JavaVersion.VERSION_17
            coreLibraryDesugaringEnabled true
        }

        dependencies {
            coreLibraryDesugaring("com.android.tools:desugar_jdk_libs:2.0.4")
        }

        ndk {
            abiFilters "x86_64","armeabi-v7a", "arm64-v8a"
        }

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared", '-DBUILD_TESTING=OFF', "-DANDROID_TOOLCHAIN=clang -v"
                cppFlags "-frtti -fexceptions -v -DANDROID -std=c++17"
//                cppFlags "-std=c++11"
                version "3.10.2"
            }
        }
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            ndk {
                debugSymbolLevel 'FULL'
            }

            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
        debug {
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    'proguard-rules.pro'
        }
    }

    // not required. Just info
    tasks.whenTaskAdded { task ->
        if (task.name == 'assembleDebug') {
            task.doFirst {
                println "The compileSdkVersion is $flutter.compileSdkVersion"
                println "The targetSdkVersion is $flutter.targetSdkVersion"
            }
        }
    }
}

flutter {
    source '../..'
}