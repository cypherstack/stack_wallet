/*
 * This file is part of Stack Wallet.
 *
 * Copyright (c) 2025 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2025-05-06
 *
 */

import 'dart:async';

import 'package:drift/drift.dart';
import 'package:drift_flutter/drift_flutter.dart';
import 'package:path/path.dart' as path;

import '../../utilities/stack_file_system.dart';

part 'database.g.dart';

abstract final class Drift {
  static bool _didInit = false;

  static final Map<String, WalletDatabase> _map = {};

  static WalletDatabase get(String walletId) {
    if (!_didInit) {
      driftRuntimeOptions.dontWarnAboutMultipleDatabases = true;
      _didInit = true;
    }

    return _map[walletId] ??= WalletDatabase._(walletId);
  }
}

class SparkNames extends Table {
  TextColumn get name =>
      text().customConstraint("UNIQUE NOT NULL COLLATE NOCASE")();
  TextColumn get address => text()();
  IntColumn get validUntil => integer()();
  TextColumn get additionalInfo => text().nullable()();

  @override
  Set<Column> get primaryKey => {name};
}

@DriftDatabase(tables: [SparkNames])
final class WalletDatabase extends _$WalletDatabase {
  WalletDatabase._(String walletId, [QueryExecutor? executor])
    : super(executor ?? _openConnection(walletId));

  @override
  int get schemaVersion => 1;

  static QueryExecutor _openConnection(String walletId) {
    return driftDatabase(
      name: walletId,
      native: DriftNativeOptions(
        shareAcrossIsolates: true,
        databasePath: () async {
          final dir = await StackFileSystem.applicationDriftDirectory();
          return path.join(dir.path, "wallets", walletId, "$walletId.db");
        },
      ),
    );
  }

  Future<void> upsertSparkNames(
    List<
      ({String name, String address, int validUntil, String? additionalInfo})
    >
    names,
  ) async {
    await transaction(() async {
      for (final name in names) {
        await into(sparkNames).insertOnConflictUpdate(
          SparkNamesCompanion(
            name: Value(name.name),
            address: Value(name.address),
            validUntil: Value(name.validUntil),
            additionalInfo: Value(name.additionalInfo),
          ),
        );
      }
    });
  }
}
