/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:lottie/lottie.dart';

import '../../../themes/coin_image_provider.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/assets.dart';
import '../../../utilities/text_styles.dart';
import '../../../utilities/util.dart';
import '../../../wallets/crypto_currency/crypto_currency.dart';
import '../../../widgets/desktop/desktop_dialog.dart';
import '../../../widgets/stack_dialog.dart';

class SendingTransactionDialog extends ConsumerStatefulWidget {
  const SendingTransactionDialog({
    super.key,
    required this.coin,
    required this.controller,
  });

  final CryptoCurrency coin;
  final ProgressAndSuccessController controller;

  @override
  ConsumerState<SendingTransactionDialog> createState() =>
      _RestoringDialogState();
}

class _RestoringDialogState extends ConsumerState<SendingTransactionDialog> {
  late ProgressAndSuccessController? _progressAndSuccessController;

  @override
  void initState() {
    _progressAndSuccessController = widget.controller;

    super.initState();
  }

  @override
  void dispose() {
    _progressAndSuccessController = null;

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final assetPath = ref.watch(
      coinImageSecondaryProvider(
        widget.coin,
      ),
    );

    if (Util.isDesktop) {
      return DesktopDialog(
        maxHeight: assetPath.endsWith(".gif") ? double.infinity : null,
        child: Padding(
          padding: const EdgeInsets.all(40),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              Text(
                "Sending transaction",
                style: STextStyles.desktopH3(context),
              ),
              const SizedBox(
                height: 40,
              ),
              assetPath.endsWith(".gif")
                  ? Flexible(
                      child: Image.file(
                        File(assetPath),
                      ),
                    )
                  : ProgressAndSuccess(
                      controller: _progressAndSuccessController!,
                    ),
            ],
          ),
        ),
      );
    } else {
      return WillPopScope(
        onWillPop: () async {
          return false;
        },
        child: assetPath.endsWith(".gif")
            ? StackDialogBase(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  mainAxisSize: MainAxisSize.min,
                  children: [
                    Image.file(
                      File(assetPath),
                    ),
                    Text(
                      "Sending transaction",
                      textAlign: TextAlign.center,
                      style: STextStyles.pageTitleH2(context),
                    ),
                    const SizedBox(
                      height: 32,
                    ),
                  ],
                ),
              )
            : StackDialog(
                title: "Sending transaction",
                icon: ProgressAndSuccess(
                  controller: _progressAndSuccessController!,
                ),
              ),
      );
    }
  }
}

class ProgressAndSuccessController {
  VoidCallback? triggerSuccess;
}

class ProgressAndSuccess extends StatefulWidget {
  const ProgressAndSuccess({
    super.key,
    this.height = 24,
    this.width = 24,
    required this.controller,
  });

  final double height;
  final double width;
  final ProgressAndSuccessController controller;

  @override
  State<ProgressAndSuccess> createState() => _ProgressAndSuccessState();
}

class _ProgressAndSuccessState extends State<ProgressAndSuccess>
    with TickerProviderStateMixin {
  late final AnimationController controller1;
  late final AnimationController controller2;

  CrossFadeState _crossFadeState = CrossFadeState.showFirst;

  bool _triggered = false;

  @override
  void initState() {
    controller1 = AnimationController(vsync: this);
    controller2 = AnimationController(vsync: this);

    controller1.addListener(() => setState(() {}));
    controller2.addListener(() => setState(() {}));

    controller1.addStatusListener((status) {
      if (status == AnimationStatus.completed && _triggered) {
        controller2.forward();
        setState(() {
          _crossFadeState = CrossFadeState.showSecond;
        });
      }
    });

    widget.controller.triggerSuccess = () {
      controller1.forward();
      _triggered = true;
    };

    super.initState();
  }

  @override
  void dispose() {
    controller1.dispose();
    controller2.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AnimatedCrossFade(
      crossFadeState: _crossFadeState,
      firstChild: Lottie.asset(
        Assets.lottie.iconSend,
        controller: controller1,
        width: widget.width,
        delegates: LottieDelegates(
          values: [
            ValueDelegate.color(
              const ["**"],
              value:
                  Theme.of(context).extension<StackColors>()!.accentColorDark,
            ),
            ValueDelegate.strokeColor(
              const ["**"],
              value:
                  Theme.of(context).extension<StackColors>()!.accentColorDark,
            ),
          ],
        ),
        height: widget.height,
        onLoaded: (composition) {
          final start = composition.markers[0].start;
          final end = composition.markers[1].start;

          setState(() {
            controller1.duration = composition.duration;
          });
          controller1.repeat(
            min: start,
            max: end,
            period: composition.duration * (end - start),
          );
        },
      ),
      secondChild: Lottie.asset(
        Assets.lottie.loaderAndCheckmark,
        controller: controller2,
        width: widget.width,
        height: widget.height,
        onLoaded: (composition) {
          setState(() {
            controller2.duration = composition.duration *
                (composition.markers.last.end - composition.markers[1].start);
            controller2.value = composition.markers[1].start;
          });
        },
      ),
      duration: const Duration(microseconds: 1),
    );
  }
}
