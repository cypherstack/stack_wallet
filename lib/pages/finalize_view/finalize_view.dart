/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../notifications/show_flush_bar.dart';
import '../../providers/global/barcode_scanner_provider.dart';
import '../../providers/global/wallets_provider.dart';
import '../../themes/stack_colors.dart';
import '../../utilities/barcode_scanner_interface.dart';
import '../../utilities/clipboard_interface.dart';
import '../../utilities/constants.dart';
import '../../utilities/logger.dart';
import '../../utilities/show_loading.dart';
import '../../utilities/text_styles.dart';
import '../../utilities/util.dart';
import '../../wallets/wallet/impl/mimblewimblecoin_wallet.dart';
import '../../widgets/background.dart';
import '../../widgets/conditional_parent.dart';
import '../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../widgets/desktop/primary_button.dart';
import '../../widgets/icon_widgets/clipboard_icon.dart';
import '../../widgets/icon_widgets/qrcode_icon.dart';
import '../../widgets/icon_widgets/x_icon.dart';
import '../../widgets/stack_dialog.dart';
import '../../widgets/stack_text_field.dart';
import '../../widgets/textfield_icon_button.dart';

class FinalizeView extends ConsumerStatefulWidget {
  const FinalizeView({
    super.key,
    required this.walletId,
    this.clipboard = const ClipboardWrapper(),
  });

  static const String routeName = "/finalizeView";

  final String walletId;
  final ClipboardInterface clipboard;

  @override
  ConsumerState<FinalizeView> createState() => _FinalizeViewState();
}

class _FinalizeViewState extends ConsumerState<FinalizeView> {
  late final TextEditingController _slateController;
  late final FocusNode _slateFocusNode;

  bool _slateToggleFlag = false;

  Future<void> _pasteSlatepack() async {
    final ClipboardData? data = await widget.clipboard.getData(
      Clipboard.kTextPlain,
    );
    if (data?.text != null && data!.text!.isNotEmpty) {
      _slateController.text = data.text!;
      setState(() {
        _slateToggleFlag = _slateController.text.isNotEmpty;
      });
    }
  }

  Future<void> _scanQr() async {
    try {
      if (!Util.isDesktop && _slateFocusNode.hasFocus) {
        _slateFocusNode.unfocus();
        await Future<void>.delayed(const Duration(milliseconds: 75));
      }

      if (mounted) {
        final qrResult = await ref.read(pBarcodeScanner).scan(context: context);
        if (qrResult.rawContent.isNotEmpty && qrResult.rawContent != "null") {
          _slateController.text = qrResult.rawContent;
          setState(() {
            _slateToggleFlag = _slateController.text.isNotEmpty;
          });
        }
      }
    } on PlatformException catch (e, s) {
      if (mounted) {
        try {
          await checkCamPermDeniedMobileAndOpenAppSettings(
            context,
            logging: Logging.instance,
          );
        } catch (e, s) {
          Logging.instance.e(
            "Failed to check cam permissions",
            error: e,
            stackTrace: s,
          );
        }
      } else {
        Logging.instance.e(
          "Failed to get camera permissions while trying to scan qr code in SendView: ",
          error: e,
          stackTrace: s,
        );
      }
    }
  }

  Future<void> _finalize() async {
    // add delay for showloading exception catching hack fix
    await Future<void>.delayed(const Duration(seconds: 1));

    final wallet =
        ref.read(pWallets).getWallet(widget.walletId) as MimblewimblecoinWallet;

    final decoded = await wallet.decodeSlatepack(_slateController.text);
    if (!decoded.success) {
      throw Exception(decoded.error ?? "Failed to decode slatepack");
    }

    final analysis = await wallet.analyzeSlatepack(_slateController.text);
    if (analysis.status != "S2") {
      throw Exception("Invalid slatepack type: ${analysis.status}");
    }

    final result = await wallet.finalizeSlatepack(_slateController.text);

    if (!result.success) {
      throw Exception(
        result.error ?? "Finalize failed without providing an error???",
      );
    }
  }

  Future<void> _finalizePressed() async {
    if (!Util.isDesktop && _slateFocusNode.hasFocus) {
      _slateFocusNode.unfocus();
      await Future<void>.delayed(const Duration(milliseconds: 75));
    }
    if (mounted) {
      Exception? ex;
      await showLoading(
        whileFuture: _finalize(),
        context: context,
        message: "Finalizing slatepack...",
        rootNavigator: Util.isDesktop,
        onException: (e) => ex = e,
      );

      if (mounted) {
        if (ex != null) {
          await showDialog<void>(
            context: context,
            builder:
                (context) => StackOkDialog(
                  desktopPopRootNavigator: Util.isDesktop,
                  title: "Slatepack finalize error",
                  message:
                      ex?.toString() ?? "Unexpected result without exception",
                  maxWidth: Util.isDesktop ? 400 : null,
                ),
          );
        } else {
          unawaited(
            showFloatingFlushBar(
              type: FlushBarType.success,
              message: "Transaction finalized and broadcast successfully!",
              context: context,
            ),
          );
        }
      }
    }
  }

  @override
  void initState() {
    super.initState();
    _slateController = TextEditingController();
    _slateFocusNode = FocusNode();
  }

  @override
  void dispose() {
    _slateController.dispose();
    _slateFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");

    return ConditionalParent(
      condition: !Util.isDesktop,
      builder:
          (child) => Background(
            child: Scaffold(
              backgroundColor:
                  Theme.of(context).extension<StackColors>()!.background,
              appBar: AppBar(
                leading: AppBarBackButton(
                  onPressed: () {
                    Navigator.of(context).pop();
                  },
                ),
                title: Text(
                  "Finalize slatepack",
                  style: STextStyles.navBarTitle(context),
                ),
              ),
              body: SafeArea(
                child: LayoutBuilder(
                  builder: (context, constraints) {
                    return SingleChildScrollView(
                      child: ConstrainedBox(
                        constraints: BoxConstraints(
                          minHeight: constraints.maxHeight,
                        ),
                        child: IntrinsicHeight(
                          child: Padding(
                            padding: EdgeInsets.symmetric(
                              horizontal: Constants.size.standardPadding,
                            ),
                            child: child,
                          ),
                        ),
                      ),
                    );
                  },
                ),
              ),
            ),
          ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: [
          ClipRRect(
            borderRadius: BorderRadius.circular(
              Constants.size.circularBorderRadius,
            ),
            child: TextField(
              minLines: 1,
              maxLines: 5,
              key: const Key("finalizeSlatepackFieldKey"),
              controller: _slateController,
              readOnly: false,
              autocorrect: false,
              enableSuggestions: false,
              toolbarOptions: const ToolbarOptions(
                copy: false,
                cut: false,
                paste: true,
                selectAll: false,
              ),
              onChanged: (newValue) {
                setState(() {
                  _slateToggleFlag = newValue.isNotEmpty;
                });
              },
              focusNode: _slateFocusNode,
              style: STextStyles.field(context),
              decoration: standardInputDecoration(
                "Enter Final Slatepack Message",
                _slateFocusNode,
                context,
                desktopMed: true,
              ).copyWith(
                contentPadding: const EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 12, // Adjust vertical padding for better alignment
                ),
                suffixIcon: Padding(
                  padding:
                      _slateController.text.isEmpty
                          ? const EdgeInsets.only(right: 8)
                          : const EdgeInsets.only(right: 0),
                  child: UnconstrainedBox(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceAround,
                      children: [
                        _slateToggleFlag
                            ? TextFieldIconButton(
                              key: const Key(
                                "slateFinalizeClearFieldButtonKey",
                              ),
                              onTap: () {
                                _slateController.text = "";
                                setState(() {
                                  _slateToggleFlag = false;
                                });
                              },
                              child: const XIcon(),
                            )
                            : TextFieldIconButton(
                              key: const Key(
                                "slateFinalizePasteFieldButtonKey",
                              ),
                              onTap: _pasteSlatepack,
                              child:
                                  _slateController.text.isEmpty
                                      ? const ClipboardIcon()
                                      : const XIcon(),
                            ),
                        if (_slateController.text.isEmpty)
                          TextFieldIconButton(
                            semanticsLabel:
                                "Scan QR Button. Opens Camera For Scanning QR Code.",
                            key: const Key("sendViewScanQrButtonKey"),
                            onTap: _scanQr,
                            child: const QrCodeIcon(),
                          ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
          Util.isDesktop ? const SizedBox(height: 24) : const Spacer(),
          PrimaryButton(
            label: "Finalize Slatepack",
            enabled: _slateToggleFlag,
            onPressed: _slateToggleFlag ? _finalizePressed : null,
          ),

          if (!Util.isDesktop) SizedBox(height: Constants.size.standardPadding),
        ],
      ),
    );
  }
}
