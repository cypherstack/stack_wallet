/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';
import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../../providers/providers.dart';
import '../../../themes/coin_icon_provider.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/amount/amount.dart';
import '../../../utilities/constants.dart';
import '../../../utilities/show_loading.dart';
import '../../../utilities/text_styles.dart';
import '../../../utilities/util.dart';
import '../../../wallets/crypto_currency/crypto_currency.dart';
import '../../../wallets/wallet/intermediate/lib_monero_wallet.dart';
import '../../../widgets/dialogs/tor_warning_dialog.dart';
import '../../../widgets/rounded_white_container.dart';
import '../../wallet_view/wallet_view.dart';
import '../wallets_overview.dart';

class WalletListItem extends ConsumerWidget {
  const WalletListItem({
    super.key,
    required this.coin,
    required this.walletCount,
  });

  final CryptoCurrency coin;
  final int walletCount;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    // debugPrint("BUILD: $runtimeType");
    final walletCountString =
        walletCount == 1 ? "$walletCount wallet" : "$walletCount wallets";
    final currency = ref
        .watch(prefsChangeNotifierProvider.select((value) => value.currency));

    return RoundedWhiteContainer(
      padding: const EdgeInsets.all(0),
      child: MaterialButton(
        // splashColor: Theme.of(context).extension<StackColors>()!.highlight,
        key: Key("walletListItemButtonKey_${coin.identifier}"),
        padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 13),
        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
        shape: RoundedRectangleBorder(
          borderRadius:
              BorderRadius.circular(Constants.size.circularBorderRadius),
        ),
        onPressed: () async {
          // Check if Tor is enabled...
          if (ref.read(prefsChangeNotifierProvider).useTor) {
            // ... and if the coin supports Tor.
            if (!coin.torSupport) {
              // If not, show a Tor warning dialog.
              final shouldContinue = await showDialog<bool>(
                    context: context,
                    builder: (_) => TorWarningDialog(
                      coin: coin,
                    ),
                  ) ??
                  false;
              if (!shouldContinue) {
                return;
              }
            }
          }

          if (walletCount == 1 && coin is! Ethereum) {
            final wallet = ref
                .read(pWallets)
                .wallets
                .firstWhere((e) => e.info.coin == coin);
            final Future<void> loadFuture;
            if (wallet is LibMoneroWallet) {
              loadFuture =
                  wallet.init().then((value) async => await (wallet).open());
            } else {
              loadFuture = wallet.init();
            }
            await showLoading(
              whileFuture: loadFuture,
              context: context,
              message: 'Opening ${wallet.info.name}',
              rootNavigator: Util.isDesktop,
            );
            if (context.mounted) {
              unawaited(
                Navigator.of(context).pushNamed(
                  WalletView.routeName,
                  arguments: wallet.walletId,
                ),
              );
            }
          } else {
            unawaited(
              Navigator.of(context).pushNamed(
                WalletsOverview.routeName,
                arguments: coin,
              ),
            );
          }
        },
        child: Row(
          children: [
            SvgPicture.file(
              File(
                ref.watch(coinIconProvider(coin)),
              ),
              width: 28,
              height: 28,
            ),
            const SizedBox(
              width: 10,
            ),
            Expanded(
              child: Consumer(
                builder: (_, ref, __) {
                  final tuple = ref.watch(
                    priceAnd24hChangeNotifierProvider
                        .select((value) => value.getPrice(coin)),
                  );
                  final calls =
                      ref.watch(prefsChangeNotifierProvider).externalCalls;

                  final priceString =
                      tuple.item1.toAmount(fractionDigits: 2).fiatString(
                            locale: ref.watch(
                              localeServiceChangeNotifierProvider
                                  .select((value) => value.locale),
                            ),
                          );

                  final double percentChange = tuple.item2;

                  var percentChangedColor =
                      Theme.of(context).extension<StackColors>()!.textDark;
                  if (percentChange > 0) {
                    percentChangedColor = Theme.of(context)
                        .extension<StackColors>()!
                        .accentColorGreen;
                  } else if (percentChange < 0) {
                    percentChangedColor = Theme.of(context)
                        .extension<StackColors>()!
                        .accentColorRed;
                  }

                  return Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Row(
                        children: [
                          Text(
                            coin.prettyName,
                            style: STextStyles.titleBold12(context),
                          ),
                          const Spacer(),
                          if (calls)
                            Text(
                              "$priceString $currency/${coin.ticker}",
                              style: STextStyles.itemSubtitle(context),
                            ),
                        ],
                      ),
                      const SizedBox(
                        height: 1,
                      ),
                      Row(
                        children: [
                          Text(
                            walletCountString,
                            style: STextStyles.itemSubtitle(context),
                          ),
                          const Spacer(),
                          if (calls)
                            Text(
                              "${percentChange.toStringAsFixed(2)}%",
                              style: STextStyles.itemSubtitle(context).copyWith(
                                color: percentChangedColor,
                              ),
                            ),
                        ],
                      ),
                    ],
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}
