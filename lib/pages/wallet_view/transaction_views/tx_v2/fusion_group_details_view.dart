/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../models/isar/models/blockchain_data/v2/transaction_v2.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/constants.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../utilities/util.dart';
import '../../../../wallets/crypto_currency/crypto_currency.dart';
import '../../../../widgets/background.dart';
import '../../../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../../../widgets/desktop/desktop_dialog_close_button.dart';
import '../../../../widgets/rounded_white_container.dart';
import 'transaction_v2_list_item.dart';

class FusionGroupDetailsView extends ConsumerStatefulWidget {
  const FusionGroupDetailsView({
    super.key,
    required this.transactions,
    required this.walletId,
    required this.coin,
  });

  static const String routeName = "/fusionGroupDetailsView";

  final List<TransactionV2> transactions;
  final String walletId;
  final CryptoCurrency coin;

  @override
  ConsumerState<FusionGroupDetailsView> createState() =>
      _FusionGroupDetailsViewState();
}

class _FusionGroupDetailsViewState
    extends ConsumerState<FusionGroupDetailsView> {
  late final bool isDesktop;
  late final String walletId;

  BorderRadius get _borderRadiusFirst {
    return BorderRadius.only(
      topLeft: Radius.circular(Constants.size.circularBorderRadius),
      topRight: Radius.circular(Constants.size.circularBorderRadius),
    );
  }

  BorderRadius get _borderRadiusLast {
    return BorderRadius.only(
      bottomLeft: Radius.circular(Constants.size.circularBorderRadius),
      bottomRight: Radius.circular(Constants.size.circularBorderRadius),
    );
  }

  @override
  void initState() {
    isDesktop = Util.isDesktop;
    walletId = widget.walletId;

    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    if (isDesktop) {
      return Material(
        color: Colors.transparent,
        child: Padding(
          padding: const EdgeInsets.only(left: 32),
          child: Column(
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    "Fusion transactions",
                    style: STextStyles.desktopH3(context),
                  ),
                  const DesktopDialogCloseButton(),
                ],
              ),
              Flexible(
                child: Padding(
                  padding: const EdgeInsets.only(right: 32, bottom: 32),
                  child: RoundedWhiteContainer(
                    borderColor:
                        isDesktop
                            ? Theme.of(
                              context,
                            ).extension<StackColors>()!.backgroundAppBar
                            : null,
                    padding: const EdgeInsets.all(0),
                    child: ListView.separated(
                      shrinkWrap: true,
                      itemBuilder: (context, index) {
                        BorderRadius? radius;
                        if (widget.transactions.length == 1) {
                          radius = BorderRadius.circular(
                            Constants.size.circularBorderRadius,
                          );
                        } else if (index == widget.transactions.length - 1) {
                          radius = _borderRadiusLast;
                        } else if (index == 0) {
                          radius = _borderRadiusFirst;
                        }
                        final tx = widget.transactions[index];
                        return TxListItem(
                          tx: tx,
                          coin: widget.coin,
                          radius: radius,
                        );
                      },
                      separatorBuilder: (context, index) {
                        return Container(
                          width: double.infinity,
                          height: 1.2,
                          color:
                              Theme.of(
                                context,
                              ).extension<StackColors>()!.background,
                        );
                      },
                      itemCount: widget.transactions.length,
                    ),
                  ),
                ),
              ),
            ],
          ),
        ),
      );
    } else {
      return Background(
        child: Scaffold(
          backgroundColor:
              Theme.of(context).extension<StackColors>()!.background,
          appBar: AppBar(
            backgroundColor:
                Theme.of(context).extension<StackColors>()!.background,
            leading: AppBarBackButton(
              onPressed: () async {
                Navigator.of(context).pop();
              },
            ),
            title: Text(
              "Fusion transactions",
              style: STextStyles.navBarTitle(context),
            ),
          ),
          body: SafeArea(
            child: Padding(
              padding: const EdgeInsets.all(16),
              child: ListView.builder(
                itemCount: widget.transactions.length,
                itemBuilder: (context, index) {
                  BorderRadius? radius;
                  if (widget.transactions.length == 1) {
                    radius = BorderRadius.circular(
                      Constants.size.circularBorderRadius,
                    );
                  } else if (index == widget.transactions.length - 1) {
                    radius = _borderRadiusLast;
                  } else if (index == 0) {
                    radius = _borderRadiusFirst;
                  }
                  final tx = widget.transactions[index];

                  return TxListItem(tx: tx, coin: widget.coin, radius: radius);
                },
              ),
            ),
          ),
        ),
      );
    }
  }
}
