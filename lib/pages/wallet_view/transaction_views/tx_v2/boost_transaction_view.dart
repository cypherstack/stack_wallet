/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../models/isar/models/blockchain_data/v2/transaction_v2.dart';
import '../../../../pages_desktop_specific/desktop_home_view.dart';
import '../../../../providers/providers.dart';
import '../../../../route_generator.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/amount/amount.dart';
import '../../../../utilities/amount/amount_formatter.dart';
import '../../../../utilities/show_loading.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../utilities/util.dart';
import '../../../../wallets/crypto_currency/coins/ethereum.dart';
import '../../../../wallets/isar/providers/wallet_info_provider.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/rbf_interface.dart';
import '../../../../widgets/background.dart';
import '../../../../widgets/conditional_parent.dart';
import '../../../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../../../widgets/desktop/desktop_dialog.dart';
import '../../../../widgets/desktop/primary_button.dart';
import '../../../../widgets/detail_item.dart';
import '../../../../widgets/fee_slider.dart';
import '../../../../widgets/rounded_white_container.dart';
import '../../../../widgets/stack_dialog.dart';
import '../../../send_view/confirm_transaction_view.dart';

class BoostTransactionView extends ConsumerStatefulWidget {
  const BoostTransactionView({super.key, required this.transaction});

  static const String routeName = "/boostTransaction";

  final TransactionV2 transaction;

  @override
  ConsumerState<BoostTransactionView> createState() =>
      _BoostTransactionViewState();
}

class _BoostTransactionViewState extends ConsumerState<BoostTransactionView> {
  late final bool isDesktop;
  late final String walletId;
  late final TransactionV2 _transaction;
  late final Amount fee;
  late final Amount amount;
  late final int rate;

  BigInt? customFee;

  int _newRate = 0;

  bool _previewTxnLock = false;
  Future<void> _previewTxn() async {
    if (_previewTxnLock) {
      return;
    }
    _previewTxnLock = true;
    try {
      if (_newRate <= rate) {
        await showDialog<void>(
          context: context,
          builder:
              (_) => const StackOkDialog(
                title: "Error",
                message: "New fee rate must be greater than the current rate.",
              ),
        );
        return;
      }

      final wallet = (ref.read(pWallets).getWallet(walletId) as RbfInterface);

      Exception? ex;
      // build new tx and show loading/tx generation
      final txData = await showLoading(
        whileFuture: wallet.prepareRbfSend(
          oldTransaction: _transaction,
          newRate: _newRate,
        ),
        context: context,
        message: "Preparing RBF Transaction...",
        onException: (e) => ex = e,
      );

      // on failure show error message
      if (txData == null && mounted) {
        await showDialog<void>(
          context: context,
          builder:
              (_) => StackOkDialog(
                title: "RBF send error",
                message: ex?.toString() ?? "Unknown error found",
                maxWidth: 600,
              ),
        );
        return;
      } else {
        // on success show confirm tx screen
        if (isDesktop && mounted) {
          unawaited(
            showDialog(
              context: context,
              builder:
                  (context) => DesktopDialog(
                    maxHeight: MediaQuery.of(context).size.height - 64,
                    maxWidth: 580,
                    child: ConfirmTransactionView(
                      txData: txData!,
                      walletId: walletId,
                      onSuccess: () {},
                      // isPaynymTransaction: isPaynymSend, TODO ?
                      routeOnSuccessName: DesktopHomeView.routeName,
                    ),
                  ),
            ),
          );
        } else if (mounted) {
          unawaited(
            Navigator.of(context).push(
              RouteGenerator.getRoute(
                shouldUseMaterialRoute: RouteGenerator.useMaterialPageRoute,
                builder:
                    (_) => ConfirmTransactionView(
                      txData: txData!,
                      walletId: walletId,
                      // isPaynymTransaction: isPaynymSend, TODO ?
                      onSuccess: () {},
                    ),
                settings: const RouteSettings(
                  name: ConfirmTransactionView.routeName,
                ),
              ),
            ),
          );
        }
      }
    } finally {
      _previewTxnLock = false;
    }
  }

  @override
  void initState() {
    isDesktop = Util.isDesktop;
    _transaction = widget.transaction;
    walletId = _transaction.walletId;
    fee = _transaction.getFee(
      fractionDigits: ref.read(pWalletCoin(walletId)).fractionDigits,
    );
    amount = _transaction.getAmountSentFromThisWallet(
      fractionDigits: ref.read(pWalletCoin(walletId)).fractionDigits,
      subtractFee: ref.read(pWalletCoin(walletId)) is! Ethereum,
    );
    rate = (fee.raw ~/ BigInt.from(_transaction.vSize!)).toInt();
    _newRate = rate + 1;

    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final coin = ref.watch(pWalletCoin(walletId));
    final String feeString = ref.watch(pAmountFormatter(coin)).format(fee);
    final String amountString = ref
        .watch(pAmountFormatter(coin))
        .format(amount);
    final String feeRateString = "$rate sats/vByte";

    return ConditionalParent(
      condition: !isDesktop,
      builder:
          (child) => Background(
            child: Scaffold(
              backgroundColor:
                  Theme.of(context).extension<StackColors>()!.background,
              appBar: AppBar(
                backgroundColor:
                    Theme.of(context).extension<StackColors>()!.background,
                leading: AppBarBackButton(
                  onPressed: () async {
                    Navigator.of(context).pop();
                  },
                ),
                title: Text(
                  "Boost transaction",
                  style: STextStyles.navBarTitle(context),
                ),
              ),
              body: child,
            ),
          ),
      child: Padding(
        padding:
            isDesktop
                ? const EdgeInsets.only(left: 32, right: 32, bottom: 32)
                : const EdgeInsets.all(12),
        child: ConditionalParent(
          condition: isDesktop,
          builder: (child) {
            return Column(
              children: [
                RoundedWhiteContainer(
                  borderColor:
                      isDesktop
                          ? Theme.of(
                            context,
                          ).extension<StackColors>()!.backgroundAppBar
                          : null,
                  padding: const EdgeInsets.all(0),
                  child: child,
                ),
                const SizedBox(height: 32),
                PrimaryButton(
                  buttonHeight: ButtonHeight.l,
                  label: "Preview send",
                  onPressed: _previewTxn,
                ),
              ],
            );
          },
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              ConditionalParent(
                condition: isDesktop,
                builder:
                    (child) => RoundedWhiteContainer(
                      padding: EdgeInsets.zero,
                      child: child,
                    ),
                child: Column(
                  children: [
                    DetailItem(
                      title: "Send amount",
                      detail: amountString,
                      horizontal: true,
                    ),
                    const _Divider(),
                    DetailItem(
                      title: "Current fee",
                      detail: feeString,
                      horizontal: true,
                    ),
                    const _Divider(),
                    DetailItem(
                      title: "Current rate",
                      detail: feeRateString,
                      horizontal: true,
                    ),
                    const _Divider(),
                    Padding(
                      padding: const EdgeInsets.all(16),
                      child: FeeSlider(
                        overrideLabel: "Select a higher rate",
                        onSatVByteChanged: (value) => _newRate = value,
                        coin: coin,
                        min: rate.toDouble() + 1,
                        max: rate * 5.0,
                        pow: 1,
                      ),
                    ),
                  ],
                ),
              ),
              if (!isDesktop) const Spacer(),
              if (!isDesktop) const SizedBox(height: 16),
              if (!isDesktop)
                PrimaryButton(label: "Preview send", onPressed: _previewTxn),
            ],
          ),
        ),
      ),
    );
  }
}

class _Divider extends StatelessWidget {
  const _Divider({super.key});

  @override
  Widget build(BuildContext context) {
    if (Util.isDesktop) {
      return Container(
        height: 1,
        color: Theme.of(context).extension<StackColors>()!.backgroundAppBar,
      );
    } else {
      return const SizedBox(height: 12);
    }
  }
}
