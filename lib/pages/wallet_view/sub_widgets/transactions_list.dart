/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:isar_community/isar.dart';
import 'package:tuple/tuple.dart';

import '../../../models/isar/models/isar_models.dart';
import '../../../providers/db/main_db_provider.dart';
import '../../../providers/global/trades_service_provider.dart';
import '../../../providers/global/wallets_provider.dart';
import '../../../route_generator.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/constants.dart';
import '../../../utilities/text_styles.dart';
import '../../../utilities/util.dart';
import '../../../wallets/crypto_currency/crypto_currency.dart';
import '../../../wallets/isar/providers/wallet_info_provider.dart';
import '../../../widgets/desktop/desktop_dialog.dart';
import '../../../widgets/desktop/desktop_dialog_close_button.dart';
import '../../../widgets/loading_indicator.dart';
import '../../../widgets/trade_card.dart';
import '../../../widgets/transaction_card.dart';
import '../../exchange_view/trade_details_view.dart';
import '../wallet_view.dart';
import 'no_transactions_found.dart';

class TransactionsList extends ConsumerStatefulWidget {
  const TransactionsList({super.key, required this.walletId});

  final String walletId;

  @override
  ConsumerState<TransactionsList> createState() => _TransactionsListState();
}

class _TransactionsListState extends ConsumerState<TransactionsList> {
  //
  bool _hasLoaded = false;
  List<Transaction> _transactions2 = [];

  late final StreamSubscription<List<Transaction>> _subscription;
  late final QueryBuilder<Transaction, Transaction, QAfterSortBy> _query;

  BorderRadius get _borderRadiusFirst {
    return BorderRadius.only(
      topLeft: Radius.circular(Constants.size.circularBorderRadius),
      topRight: Radius.circular(Constants.size.circularBorderRadius),
    );
  }

  BorderRadius get _borderRadiusLast {
    return BorderRadius.only(
      bottomLeft: Radius.circular(Constants.size.circularBorderRadius),
      bottomRight: Radius.circular(Constants.size.circularBorderRadius),
    );
  }

  Widget itemBuilder(
    BuildContext context,
    Transaction tx,
    BorderRadius? radius,
    CryptoCurrency coin,
    int chainHeight,
  ) {
    final matchingTrades = ref
        .read(tradesServiceProvider)
        .trades
        .where((e) => e.payInTxid == tx.txid || e.payOutTxid == tx.txid);

    if (tx.type == TransactionType.outgoing && matchingTrades.isNotEmpty) {
      final trade = matchingTrades.first;
      return Container(
        decoration: BoxDecoration(
          color: Theme.of(context).extension<StackColors>()!.popupBG,
          borderRadius: radius,
        ),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            TransactionCard(
              // this may mess with combined firo transactions
              key: UniqueKey(), //
              transaction: tx,
              walletId: widget.walletId,
            ),
            TradeCard(
              // this may mess with combined firo transactions
              key: Key(
                tx.txid +
                    tx.type.name +
                    tx.address.value.toString() +
                    trade.uuid,
              ), //
              trade: trade,
              onTap: () async {
                final walletName = ref.read(pWalletName(widget.walletId));

                if (Util.isDesktop) {
                  await showDialog<void>(
                    context: context,
                    builder:
                        (context) => Navigator(
                          initialRoute: TradeDetailsView.routeName,
                          onGenerateRoute: RouteGenerator.generateRoute,
                          onGenerateInitialRoutes: (_, __) {
                            return [
                              FadePageRoute(
                                DesktopDialog(
                                  maxHeight: null,
                                  maxWidth: 580,
                                  child: Column(
                                    mainAxisSize: MainAxisSize.min,
                                    children: [
                                      Padding(
                                        padding: const EdgeInsets.only(
                                          left: 32,
                                          bottom: 16,
                                        ),
                                        child: Row(
                                          mainAxisAlignment:
                                              MainAxisAlignment.spaceBetween,
                                          children: [
                                            Text(
                                              "Trade details",
                                              style: STextStyles.desktopH3(
                                                context,
                                              ),
                                            ),
                                            DesktopDialogCloseButton(
                                              onPressedOverride:
                                                  Navigator.of(
                                                    context,
                                                    rootNavigator: true,
                                                  ).pop,
                                            ),
                                          ],
                                        ),
                                      ),
                                      Flexible(
                                        child: TradeDetailsView(
                                          tradeId: trade.tradeId,
                                          transactionIfSentFromStack: tx,
                                          walletName: walletName,
                                          walletId: widget.walletId,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                                const RouteSettings(
                                  name: TradeDetailsView.routeName,
                                ),
                              ),
                            ];
                          },
                        ),
                  );
                } else {
                  unawaited(
                    Navigator.of(context).pushNamed(
                      TradeDetailsView.routeName,
                      arguments: Tuple4(
                        trade.tradeId,
                        tx,
                        widget.walletId,
                        walletName,
                      ),
                    ),
                  );
                }
              },
            ),
          ],
        ),
      );
    } else {
      return Container(
        decoration: BoxDecoration(
          color: Theme.of(context).extension<StackColors>()!.popupBG,
          borderRadius: radius,
        ),
        child: TransactionCard(
          // this may mess with combined firo transactions
          key: UniqueKey(),
          transaction: tx,
          walletId: widget.walletId,
        ),
      );
    }
  }

  @override
  void initState() {
    _query =
        ref
            .read(mainDBProvider)
            .isar
            .transactions
            .where()
            .walletIdEqualTo(widget.walletId)
            .sortByTimestampDesc();

    _subscription = _query.watch().listen((event) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        setState(() {
          _transactions2 = event;
        });
      });
    });

    super.initState();
  }

  @override
  void dispose() {
    _subscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final walletInfo = ref.watch(pWallets).getWallet(widget.walletId).info;
    final height = walletInfo.cachedChainHeight;
    final coin = walletInfo.coin;

    return FutureBuilder(
      future: _query.findAll(),
      builder: (fbContext, AsyncSnapshot<List<Transaction>> snapshot) {
        if (snapshot.connectionState == ConnectionState.done &&
            snapshot.hasData) {
          _transactions2 = snapshot.data!;
          _hasLoaded = true;
        }
        if (!_hasLoaded) {
          return const Column(
            children: [
              Spacer(),
              Center(child: LoadingIndicator(height: 50, width: 50)),
              Spacer(flex: 4),
            ],
          );
        }
        if (_transactions2.isEmpty) {
          return const NoTransActionsFound();
        } else {
          _transactions2.sort((a, b) {
            final compare = b.timestamp.compareTo(a.timestamp);
            if (compare == 0) {
              return b.id.compareTo(a.id);
            }
            return compare;
          });
          return RefreshIndicator(
            onRefresh: () async {
              await ref.read(pWallets).getWallet(widget.walletId).refresh();
            },
            child:
                Util.isDesktop
                    ? ListView.separated(
                      shrinkWrap: true,
                      itemBuilder: (context, index) {
                        BorderRadius? radius;
                        if (_transactions2.length == 1) {
                          radius = BorderRadius.circular(
                            Constants.size.circularBorderRadius,
                          );
                        } else if (index == _transactions2.length - 1) {
                          radius = _borderRadiusLast;
                        } else if (index == 0) {
                          radius = _borderRadiusFirst;
                        }
                        final tx = _transactions2[index];
                        return itemBuilder(context, tx, radius, coin, height);
                      },
                      separatorBuilder: (context, index) {
                        return Container(
                          width: double.infinity,
                          height: 2,
                          color:
                              Theme.of(
                                context,
                              ).extension<StackColors>()!.background,
                        );
                      },
                      itemCount: _transactions2.length,
                    )
                    : ListView.builder(
                      itemCount: _transactions2.length,
                      itemBuilder: (context, index) {
                        BorderRadius? radius;
                        bool shouldWrap = false;
                        if (_transactions2.length == 1) {
                          radius = BorderRadius.circular(
                            Constants.size.circularBorderRadius,
                          );
                        } else if (index == _transactions2.length - 1) {
                          radius = _borderRadiusLast;
                          shouldWrap = true;
                        } else if (index == 0) {
                          radius = _borderRadiusFirst;
                        }
                        final tx = _transactions2[index];
                        if (shouldWrap) {
                          return Column(
                            children: [
                              itemBuilder(context, tx, radius, coin, height),
                              const SizedBox(
                                height: WalletView.navBarHeight + 14,
                              ),
                            ],
                          );
                        } else {
                          return itemBuilder(context, tx, radius, coin, height);
                        }
                      },
                    ),
          );
        }
      },
    );
  }
}
