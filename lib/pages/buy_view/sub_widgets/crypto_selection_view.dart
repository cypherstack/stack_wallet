/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../../app_config.dart';
import '../../../models/buy/response_objects/crypto.dart';
import '../../../themes/coin_icon_provider.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/assets.dart';
import '../../../utilities/constants.dart';
import '../../../utilities/logger.dart';
import '../../../utilities/text_styles.dart';
import '../../../utilities/util.dart';
import '../../../widgets/background.dart';
import '../../../widgets/conditional_parent.dart';
import '../../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../../widgets/icon_widgets/x_icon.dart';
import '../../../widgets/rounded_white_container.dart';
import '../../../widgets/stack_text_field.dart';
import '../../../widgets/textfield_icon_button.dart';

class CryptoSelectionView extends ConsumerStatefulWidget {
  const CryptoSelectionView({
    super.key,
    required this.coins,
  });

  final List<Crypto> coins;

  @override
  ConsumerState<CryptoSelectionView> createState() =>
      _CryptoSelectionViewState();
}

class _CryptoSelectionViewState extends ConsumerState<CryptoSelectionView> {
  late TextEditingController _searchController;
  final _searchFocusNode = FocusNode();

  late final List<Crypto> coins;
  late List<Crypto> _coins;

  void filter(String text) {
    setState(() {
      _coins = [
        ...coins.where(
          (e) =>
              e.name.toLowerCase().contains(text.toLowerCase()) ||
              e.ticker.toLowerCase().contains(text.toLowerCase()),
        ),
      ];
    });
  }

  @override
  void initState() {
    _searchController = TextEditingController();

    coins = [...widget.coins];
    coins.sort(
      (a, b) => a.ticker.toLowerCase().compareTo(b.ticker.toLowerCase()),
    );
    for (final coin in AppConfig.coins.reversed) {
      final index = coins.indexWhere(
        (element) => element.ticker.toLowerCase() == coin.ticker.toLowerCase(),
      );
      if (index > 0) {
        final currency = coins.removeAt(index);
        coins.insert(0, currency);
      }
    }

    _coins = [...coins];

    super.initState();
  }

  @override
  void dispose() {
    _searchController.dispose();
    _searchFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final isDesktop = Util.isDesktop;
    return ConditionalParent(
      condition: !isDesktop,
      builder: (child) {
        return Background(
          child: Scaffold(
            backgroundColor:
                Theme.of(context).extension<StackColors>()!.background,
            appBar: AppBar(
              leading: AppBarBackButton(
                onPressed: () async {
                  if (FocusScope.of(context).hasFocus) {
                    FocusScope.of(context).unfocus();
                    await Future<void>.delayed(
                      const Duration(milliseconds: 50),
                    );
                  }
                  if (mounted) {
                    Navigator.of(context).pop();
                  }
                },
              ),
              title: Text(
                "Choose a coin to buy",
                style: STextStyles.pageTitleH2(context),
              ),
            ),
            body: Padding(
              padding: const EdgeInsets.symmetric(
                horizontal: 16,
              ),
              child: child,
            ),
          ),
        );
      },
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        mainAxisSize: isDesktop ? MainAxisSize.min : MainAxisSize.max,
        children: [
          if (!isDesktop)
            const SizedBox(
              height: 16,
            ),
          ClipRRect(
            borderRadius: BorderRadius.circular(
              Constants.size.circularBorderRadius,
            ),
            child: TextField(
              autofocus: isDesktop,
              autocorrect: !isDesktop,
              enableSuggestions: !isDesktop,
              controller: _searchController,
              focusNode: _searchFocusNode,
              onChanged: filter,
              style: STextStyles.field(context),
              decoration: standardInputDecoration(
                "Search",
                _searchFocusNode,
                context,
                desktopMed: isDesktop,
              ).copyWith(
                prefixIcon: Padding(
                  padding: const EdgeInsets.symmetric(
                    horizontal: 10,
                    vertical: 16,
                  ),
                  child: SvgPicture.asset(
                    Assets.svg.search,
                    width: 16,
                    height: 16,
                  ),
                ),
                suffixIcon: _searchController.text.isNotEmpty
                    ? Padding(
                        padding: const EdgeInsets.only(right: 0),
                        child: UnconstrainedBox(
                          child: Row(
                            children: [
                              TextFieldIconButton(
                                child: const XIcon(),
                                onTap: () async {
                                  setState(() {
                                    _searchController.text = "";
                                  });
                                  filter("");
                                },
                              ),
                            ],
                          ),
                        ),
                      )
                    : null,
              ),
            ),
          ),
          const SizedBox(
            height: 10,
          ),
          Text(
            "All coins",
            style: STextStyles.smallMed12(context),
          ),
          const SizedBox(
            height: 12,
          ),
          Flexible(
            child: RoundedWhiteContainer(
              padding: const EdgeInsets.all(0),
              child: ListView.builder(
                shrinkWrap: true,
                primary: isDesktop ? false : null,
                itemCount: _coins.length,
                itemBuilder: (builderContext, index) {
                  return Padding(
                    padding: const EdgeInsets.symmetric(vertical: 4),
                    child: GestureDetector(
                      onTap: () {
                        Navigator.of(context).pop(_coins[index]);
                      },
                      child: RoundedWhiteContainer(
                        child: Row(
                          children: [
                            SizedBox(
                              width: 24,
                              height: 24,
                              child: CoinIconForTicker(
                                size: 20,
                                ticker: _coins[index].ticker,
                              ),
                            ),
                            const SizedBox(
                              width: 10,
                            ),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    _coins[index].name,
                                    style: STextStyles.largeMedium14(context),
                                  ),
                                  const SizedBox(
                                    height: 2,
                                  ),
                                  Text(
                                    _coins[index].ticker.toUpperCase(),
                                    style: STextStyles.smallMed12(context)
                                        .copyWith(
                                      color: Theme.of(context)
                                          .extension<StackColors>()!
                                          .textSubtitle1,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  );
                },
              ),
            ),
          ),
        ],
      ),
    );
  }
}

// make a stateless widget that takes in string and double (won't ever be null)
// class getIconForTicker extends ConsumerWidget{
//   const getIconForTicker({
//     Key? key,
//     this.ticker,
//
//   }) : super(key: key);
//   @override
//   Widget build(BuildContext context, WidgetRef ref) {
//     // TODO: implement build
//     throw UnimplementedError();
//   }
//
// }
/// caller must ensure [Coin] for ticker exists
class CoinIconForTicker extends ConsumerWidget {
  const CoinIconForTicker({
    super.key,
    required this.ticker,
    required this.size,
  });

  final String ticker;
  final double size;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    try {
      final coin = AppConfig.getCryptoCurrencyForTicker(ticker)!;
      return SvgPicture.file(
        File(
          ref.watch(coinIconProvider(coin)),
        ),
        width: size,
        height: size,
      );
    } catch (e, s) {
      Logging.instance.f("", error: e, stackTrace: s);
      rethrow;
    }
  }
}

// Widget? getIconForTicker(
//   String ticker, {
//   double size = 20,
// }) {
//   String? iconAsset = /*isStackCoin(ticker)
//       ?*/
//       Assets.svg.iconFor(coin: SupportedAppConfig.getCryptoCurrencyForTicker(ticker));
//   // : Assets.svg.buyIconFor(ticker);
//   return (iconAsset != null)
//       ? SvgPicture.asset(iconAsset, height: size, width: size)
//       : null;
// }
