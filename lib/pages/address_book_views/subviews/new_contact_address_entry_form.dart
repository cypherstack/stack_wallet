/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:io';

import 'package:dropdown_button2/dropdown_button2.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../../app_config.dart';
import '../../../providers/providers.dart';
// import 'package:stackwallet/providers/global/should_show_lockscreen_on_resume_state_provider.dart';
import '../../../providers/ui/address_book_providers/address_entry_data_provider.dart';
import '../../../themes/coin_icon_provider.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/address_utils.dart';
import '../../../utilities/assets.dart';
import '../../../utilities/barcode_scanner_interface.dart';
import '../../../utilities/clipboard_interface.dart';
import '../../../utilities/constants.dart';
import '../../../utilities/logger.dart';
import '../../../utilities/text_styles.dart';
import '../../../utilities/util.dart';
import '../../../wallets/crypto_currency/crypto_currency.dart';
import '../../../widgets/icon_widgets/clipboard_icon.dart';
import '../../../widgets/icon_widgets/qrcode_icon.dart';
import '../../../widgets/icon_widgets/x_icon.dart';
import '../../../widgets/stack_text_field.dart';
import '../../../widgets/textfield_icon_button.dart';
import 'coin_select_sheet.dart';

class NewContactAddressEntryForm extends ConsumerStatefulWidget {
  const NewContactAddressEntryForm({
    super.key,
    required this.id,
    required this.barcodeScanner,
    required this.clipboard,
  });

  final int id;

  final BarcodeScannerInterface barcodeScanner;
  final ClipboardInterface clipboard;

  @override
  ConsumerState<NewContactAddressEntryForm> createState() =>
      _NewContactAddressEntryFormState();
}

class _NewContactAddressEntryFormState
    extends ConsumerState<NewContactAddressEntryForm> {
  late final TextEditingController addressLabelController;
  late final TextEditingController addressController;

  late final FocusNode addressLabelFocusNode;
  late final FocusNode addressFocusNode;

  List<CryptoCurrency> coins = [];

  void _onQrTapped() async {
    try {
      // ref
      //     .read(shouldShowLockscreenOnResumeStateProvider
      //         .state)
      //     .state = false;
      final qrResult = await widget.barcodeScanner.scan();

      // Future<void>.delayed(
      //   const Duration(seconds: 2),
      //   () => ref
      //       .read(
      //           shouldShowLockscreenOnResumeStateProvider
      //               .state)
      //       .state = true,
      // );

      final paymentData = AddressUtils.parsePaymentUri(
        qrResult.rawContent,
        logging: Logging.instance,
      );

      if (paymentData != null) {
        addressController.text = paymentData.address;
        ref.read(addressEntryDataProvider(widget.id)).address =
            addressController.text.isEmpty ? null : addressController.text;

        addressLabelController.text =
            paymentData.label ?? addressLabelController.text;
        ref.read(addressEntryDataProvider(widget.id)).addressLabel =
            addressLabelController.text.isEmpty
                ? null
                : addressLabelController.text;

        // now check for non standard encoded basic address
      } else if (ref.read(addressEntryDataProvider(widget.id)).coin != null) {
        if (ref.read(addressEntryDataProvider(widget.id)).coin!.validateAddress(
              qrResult.rawContent,
            )) {
          addressController.text = qrResult.rawContent;
          ref.read(addressEntryDataProvider(widget.id)).address =
              qrResult.rawContent;
        }
      }
    } on PlatformException catch (e, s) {
      // ref
      //     .read(shouldShowLockscreenOnResumeStateProvider
      //         .state)
      //     .state = true;
      Logging.instance.w("Failed to get camera permissions to scan address qr code: ", error: e, stackTrace: s);
    }
  }

  @override
  void initState() {
    addressLabelController = TextEditingController()
      ..text = ref.read(addressEntryDataProvider(widget.id)).addressLabel ?? "";
    addressController = TextEditingController()
      ..text = ref.read(addressEntryDataProvider(widget.id)).address ?? "";
    addressLabelFocusNode = FocusNode();
    addressFocusNode = FocusNode();
    coins = [...AppConfig.coins];

    if (AppConfig.isSingleCoinApp) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (mounted) {
          ref.read(addressEntryDataProvider(widget.id)).coin = coins.first;
        }
      });
    }
    super.initState();
  }

  @override
  void dispose() {
    addressLabelController.dispose();
    addressController.dispose();
    addressLabelFocusNode.dispose();
    addressFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final isDesktop = Util.isDesktop;
    if (isDesktop) {
      coins = [...AppConfig.coins];
      coins.removeWhere(
        (e) => e is Firo && e.network.isTestNet,
      );

      final showTestNet =
          ref.read(prefsChangeNotifierProvider).showTestNetCoins;
      if (showTestNet) {
        coins = coins.toList();
      } else {
        coins = coins
            .where((e) => e.network != CryptoCurrencyNetwork.test)
            .toList();
      }
    }

    return Column(
      children: [
        if (isDesktop && !AppConfig.isSingleCoinApp)
          DropdownButtonHideUnderline(
            child: DropdownButton2<CryptoCurrency>(
              hint: Text(
                "Select cryptocurrency",
                style: STextStyles.fieldLabel(context),
              ),
              dropdownStyleData: DropdownStyleData(
                offset: const Offset(0, -10),
                elevation: 0,
                decoration: BoxDecoration(
                  color: Theme.of(context)
                      .extension<StackColors>()!
                      .textFieldDefaultBG,
                  borderRadius: BorderRadius.circular(
                    Constants.size.circularBorderRadius,
                  ),
                ),
              ),
              menuItemStyleData: const MenuItemStyleData(
                padding: EdgeInsets.symmetric(
                  horizontal: 16,
                  vertical: 4,
                ),
              ),
              isExpanded: true,
              value: ref.watch(
                addressEntryDataProvider(widget.id)
                    .select((value) => value.coin),
              ),
              onChanged: (value) {
                if (value is CryptoCurrency) {
                  ref.read(addressEntryDataProvider(widget.id)).coin = value;
                }
              },
              iconStyleData: IconStyleData(
                icon: SvgPicture.asset(
                  Assets.svg.chevronDown,
                  width: 10,
                  height: 5,
                  color: Theme.of(context).extension<StackColors>()!.textDark3,
                ),
              ),
              items: [
                ...coins.map(
                  (coin) => DropdownMenuItem<CryptoCurrency>(
                    value: coin,
                    child: Padding(
                      padding: const EdgeInsets.symmetric(vertical: 4),
                      child: Row(
                        children: [
                          SvgPicture.file(
                            File(
                              ref.watch(coinIconProvider(coin)),
                            ),
                            height: 24,
                            width: 24,
                          ),
                          const SizedBox(
                            width: 12,
                          ),
                          Text(
                            coin.prettyName,
                            style:
                                STextStyles.desktopTextExtraExtraSmall(context)
                                    .copyWith(
                              color: Theme.of(context)
                                  .extension<StackColors>()!
                                  .textDark,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        if (!isDesktop && !AppConfig.isSingleCoinApp)
          TextField(
            autocorrect: Util.isDesktop ? false : true,
            enableSuggestions: Util.isDesktop ? false : true,
            readOnly: true,
            style: STextStyles.field(context),
            decoration: InputDecoration(
              hintText: "Select cryptocurrency",
              hintStyle: STextStyles.fieldLabel(context),
              prefixIcon: Center(
                child: Padding(
                  padding: const EdgeInsets.symmetric(horizontal: 12),
                  child: RawMaterialButton(
                    splashColor:
                        Theme.of(context).extension<StackColors>()!.highlight,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(
                        Constants.size.circularBorderRadius,
                      ),
                    ),
                    onPressed: () {
                      showModalBottomSheet<dynamic>(
                        backgroundColor: Colors.transparent,
                        context: context,
                        builder: (_) => const CoinSelectSheet(),
                      ).then((value) {
                        if (value is CryptoCurrency) {
                          ref.read(addressEntryDataProvider(widget.id)).coin =
                              value;
                        }
                      });
                    },
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        ref.watch(
                                  addressEntryDataProvider(widget.id)
                                      .select((value) => value.coin),
                                ) ==
                                null
                            ? Text(
                                "Select cryptocurrency",
                                style: STextStyles.fieldLabel(context),
                              )
                            : Row(
                                children: [
                                  SvgPicture.file(
                                    File(
                                      ref.watch(
                                        coinIconProvider(
                                          ref.watch(
                                            addressEntryDataProvider(widget.id)
                                                .select(
                                              (value) => value.coin,
                                            ),
                                          )!,
                                        ),
                                      ),
                                    ),
                                    height: 20,
                                    width: 20,
                                  ),
                                  const SizedBox(
                                    width: 12,
                                  ),
                                  Text(
                                    ref
                                        .watch(
                                          addressEntryDataProvider(widget.id)
                                              .select((value) => value.coin),
                                        )!
                                        .prettyName,
                                    style: STextStyles.itemSubtitle12(context),
                                  ),
                                ],
                              ),
                        if (!isDesktop)
                          SvgPicture.asset(
                            Assets.svg.chevronDown,
                            width: 8,
                            height: 4,
                            color: Theme.of(context)
                                .extension<StackColors>()!
                                .textSubtitle2,
                          ),
                      ],
                    ),
                  ),
                ),
              ),
            ),
          ),
        if (!AppConfig.isSingleCoinApp)
          const SizedBox(
            height: 8,
          ),
        ClipRRect(
          borderRadius: BorderRadius.circular(
            Constants.size.circularBorderRadius,
          ),
          child: TextField(
            autocorrect: Util.isDesktop ? false : true,
            enableSuggestions: Util.isDesktop ? false : true,
            focusNode: addressLabelFocusNode,
            controller: addressLabelController,
            style: STextStyles.field(context),
            decoration: standardInputDecoration(
              "Enter address label",
              addressLabelFocusNode,
              context,
            ).copyWith(
              labelStyle: isDesktop ? STextStyles.fieldLabel(context) : null,
              suffixIcon: addressLabelController.text.isNotEmpty
                  ? Padding(
                      padding: const EdgeInsets.only(right: 0),
                      child: UnconstrainedBox(
                        child: Row(
                          children: [
                            TextFieldIconButton(
                              child: const XIcon(),
                              onTap: () async {
                                setState(() {
                                  addressLabelController.text = "";
                                });
                              },
                            ),
                          ],
                        ),
                      ),
                    )
                  : null,
            ),
            onChanged: (newValue) {
              ref.read(addressEntryDataProvider(widget.id)).addressLabel =
                  newValue;
              setState(() {});
            },
          ),
        ),
        const SizedBox(
          height: 8,
        ),
        ClipRRect(
          borderRadius: BorderRadius.circular(
            Constants.size.circularBorderRadius,
          ),
          child: TextField(
            enableSuggestions: Util.isDesktop ? false : true,
            focusNode: addressFocusNode,
            controller: addressController,
            style: STextStyles.field(context),
            decoration: standardInputDecoration(
              "Paste address",
              addressFocusNode,
              context,
            ).copyWith(
              labelStyle: isDesktop ? STextStyles.fieldLabel(context) : null,
              suffixIcon: UnconstrainedBox(
                child: Row(
                  children: [
                    if (ref.watch(
                          addressEntryDataProvider(widget.id)
                              .select((value) => value.address),
                        ) !=
                        null)
                      TextFieldIconButton(
                        key: const Key("addAddressBookClearAddressButtonKey"),
                        onTap: () async {
                          addressController.text = "";
                          ref
                              .read(addressEntryDataProvider(widget.id))
                              .address = null;
                        },
                        child: const XIcon(),
                      ),
                    if (ref.watch(
                          addressEntryDataProvider(widget.id)
                              .select((value) => value.address),
                        ) ==
                        null)
                      TextFieldIconButton(
                        key: const Key("addAddressPasteAddressButtonKey"),
                        onTap: () async {
                          final ClipboardData? data = await widget.clipboard
                              .getData(Clipboard.kTextPlain);

                          if (data?.text != null && data!.text!.isNotEmpty) {
                            String content = data.text!.trim();
                            if (content.contains("\n")) {
                              content =
                                  content.substring(0, content.indexOf("\n"));
                            }
                            addressController.text = content;
                            ref
                                .read(addressEntryDataProvider(widget.id))
                                .address = content.isEmpty ? null : content;
                          }
                        },
                        child: const ClipboardIcon(),
                      ),
                    if (!Util.isDesktop &&
                        ref.watch(
                              addressEntryDataProvider(widget.id)
                                  .select((value) => value.address),
                            ) ==
                            null)
                      TextFieldIconButton(
                        key: const Key("addAddressBookEntryScanQrButtonKey"),
                        onTap: _onQrTapped,
                        child: const QrCodeIcon(),
                      ),
                    const SizedBox(
                      width: 8,
                    ),
                  ],
                ),
              ),
            ),
            key: const Key("addAddressBookEntryViewAddressField"),
            readOnly: false,
            autocorrect: false,
            // inputFormatters: <TextInputFormatter>[
            //   FilteringTextInputFormatter.allow(RegExp("[a-zA-Z0-9]{34}")),
            // ],
            toolbarOptions: const ToolbarOptions(
              copy: false,
              cut: false,
              paste: true,
              selectAll: false,
            ),
            onChanged: (newValue) {
              ref.read(addressEntryDataProvider(widget.id)).address = newValue;
            },
          ),
        ),
        if (!ref.watch(
              addressEntryDataProvider(widget.id)
                  .select((value) => value.isValidAddress),
            ) &&
            addressController.text.isNotEmpty)
          Row(
            children: [
              const SizedBox(
                width: 12,
              ),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const SizedBox(
                    height: 4,
                  ),
                  Text(
                    "Invalid address",
                    textAlign: TextAlign.left,
                    style: STextStyles.label(context).copyWith(
                      color:
                          Theme.of(context).extension<StackColors>()!.textError,
                    ),
                  ),
                ],
              ),
            ],
          ),
      ],
    );
  }
}
