/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';
import 'package:isar/isar.dart';

import '../../../../models/add_wallet_list_entity/add_wallet_list_entity.dart';
import '../../../../models/add_wallet_list_entity/sub_classes/eth_token_entity.dart';
import '../../../../models/isar/exchange_cache/currency.dart';
import '../../../../providers/providers.dart';
import '../../../../services/exchange/change_now/change_now_exchange.dart';
import '../../../../services/exchange/exchange_data_loading_service.dart';
import '../../../../themes/coin_icon_provider.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/assets.dart';
import '../../../../utilities/constants.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../utilities/util.dart';

class CoinSelectItem extends ConsumerWidget {
  const CoinSelectItem({super.key, required this.entity});

  final AddWalletListEntity entity;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    debugPrint("BUILD: CoinSelectItem for ${entity.name}");
    final selectedEntity = ref.watch(addWalletSelectedEntityStateProvider);

    final isDesktop = Util.isDesktop;

    String? tokenImageUri;
    if (entity is EthTokenEntity) {
      final currency =
          ExchangeDataLoadingService.instance.isar.currencies
              .where()
              .exchangeNameEqualTo(ChangeNowExchange.exchangeName)
              .filter()
              .tokenContractEqualTo(
                (entity as EthTokenEntity).token.address,
                caseSensitive: false,
              )
              .and()
              .imageIsNotEmpty()
              .findFirstSync();
      tokenImageUri = currency?.image;
    }

    return Container(
      decoration: BoxDecoration(
        color:
            selectedEntity == entity
                ? Theme.of(context).extension<StackColors>()!.textFieldActiveBG
                : Theme.of(context).extension<StackColors>()!.popupBG,
        borderRadius: BorderRadius.circular(
          Constants.size.circularBorderRadius,
        ),
      ),
      child: MaterialButton(
        key: Key("coinSelectItemButtonKey_${entity.name}${entity.ticker}"),
        padding:
            isDesktop
                ? const EdgeInsets.only(left: 24)
                : const EdgeInsets.all(12),
        materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(
            Constants.size.circularBorderRadius,
          ),
        ),
        child: ConstrainedBox(
          constraints: BoxConstraints(minHeight: isDesktop ? 70 : 0),
          child: Row(
            children: [
              tokenImageUri != null
                  ? SvgPicture.network(tokenImageUri, width: 26, height: 26)
                  : SvgPicture.file(
                    File(ref.watch(coinIconProvider(entity.cryptoCurrency))),
                    width: 26,
                    height: 26,
                  ),
              SizedBox(width: isDesktop ? 12 : 10),
              Text(
                "${entity.name} (${entity.ticker})",
                style:
                    isDesktop
                        ? STextStyles.desktopTextMedium(context)
                        : STextStyles.subtitle600(
                          context,
                        ).copyWith(fontSize: 14),
              ),
              if (isDesktop && selectedEntity == entity) const Spacer(),
              if (isDesktop && selectedEntity == entity)
                Padding(
                  padding: const EdgeInsets.only(right: 18),
                  child: SizedBox(
                    width: 24,
                    height: 24,
                    child: SvgPicture.asset(
                      Assets.svg.check,
                      color:
                          Theme.of(
                            context,
                          ).extension<StackColors>()!.accentColorDark,
                    ),
                  ),
                ),
            ],
          ),
        ),
        onPressed: () {
          ref.read(addWalletSelectedEntityStateProvider.state).state = entity;
        },
      ),
    );
  }
}
