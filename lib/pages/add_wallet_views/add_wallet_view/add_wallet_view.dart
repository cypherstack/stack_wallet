/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';
import 'dart:math';

import 'package:barcode_scan2/barcode_scan2.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';
import 'package:isar/isar.dart';
import 'package:tuple/tuple.dart';

import '../../../app_config.dart';
import '../../../db/isar/main_db.dart';
import '../../../models/add_wallet_list_entity/add_wallet_list_entity.dart';
import '../../../models/add_wallet_list_entity/sub_classes/coin_entity.dart';
import '../../../models/add_wallet_list_entity/sub_classes/eth_token_entity.dart';
import '../../../models/isar/models/ethereum/eth_contract.dart';
import '../../../pages_desktop_specific/my_stack_view/exit_to_my_stack_button.dart';
import '../../../providers/global/secure_store_provider.dart';
import '../../../providers/providers.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/address_utils.dart';
import '../../../utilities/assets.dart';
import '../../../utilities/barcode_scanner_interface.dart';
import '../../../utilities/constants.dart';
import '../../../utilities/default_eth_tokens.dart';
import '../../../utilities/logger.dart';
import '../../../utilities/show_loading.dart';
import '../../../utilities/text_styles.dart';
import '../../../utilities/util.dart';
import '../../../wallets/crypto_currency/crypto_currency.dart';
import '../../../wallets/isar/models/wallet_info.dart';
import '../../../wallets/wallet/impl/monero_wallet.dart';
import '../../../wallets/wallet/wallet.dart';
import '../../../widgets/background.dart';
import '../../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../../widgets/custom_buttons/blue_text_button.dart';
import '../../../widgets/desktop/desktop_app_bar.dart';
import '../../../widgets/desktop/desktop_dialog.dart';
import '../../../widgets/desktop/desktop_scaffold.dart';
import '../../../widgets/desktop/primary_button.dart';
import '../../../widgets/expandable.dart';
import '../../../widgets/icon_widgets/x_icon.dart';
import '../../../widgets/rounded_white_container.dart';
import '../../../widgets/stack_text_field.dart';
import '../../../widgets/textfield_icon_button.dart';
import '../../wallet_view/wallet_view.dart';
import '../add_token_view/add_custom_token_view.dart';
import '../add_token_view/sub_widgets/add_custom_token_selector.dart';
import '../new_wallet_recovery_phrase_view/sub_widgets/mnemonic_table.dart';
import '../verify_recovery_phrase_view/verify_recovery_phrase_view.dart';
import 'sub_widgets/add_wallet_text.dart';
import 'sub_widgets/expanding_sub_list_item.dart';
import 'sub_widgets/next_button.dart';

class AddWalletView extends ConsumerStatefulWidget {
  const AddWalletView({super.key});

  static const routeName = "/addWallet";

  @override
  ConsumerState<AddWalletView> createState() => _AddWalletViewState();
}

class _AddWalletViewState extends ConsumerState<AddWalletView> {
  late final TextEditingController _searchFieldController;
  late final FocusNode _searchFocusNode;

  String _searchTerm = "";

  final _coinsTestnet = [...AppConfig.coins.where((e) => e.network.isTestNet)];
  final _coins = [
    ...AppConfig.coins.where((e) => e.network == CryptoCurrencyNetwork.main),
  ];
  final List<AddWalletListEntity> coinEntities = [];
  final List<AddWalletListEntity> coinTestnetEntities = [];
  final List<EthTokenEntity> tokenEntities = [];

  final bool isDesktop = Util.isDesktop;

  List<AddWalletListEntity> filter(
    String text,
    List<AddWalletListEntity> entities,
  ) {
    final _entities = [...entities];
    if (text.isNotEmpty) {
      final lowercaseTerm = text.toLowerCase();
      _entities.retainWhere(
        (e) =>
            e.ticker.toLowerCase().contains(lowercaseTerm) ||
            e.name.toLowerCase().contains(lowercaseTerm) ||
            e.cryptoCurrency.identifier.toLowerCase().contains(lowercaseTerm) ||
            (e is EthTokenEntity &&
                e.token.address.toLowerCase().contains(lowercaseTerm)),
      );
    }

    return _entities;
  }

  Future<void> _addToken() async {
    EthContract? contract;
    if (isDesktop) {
      contract = await showDialog(
        context: context,
        builder:
            (context) => const DesktopDialog(
              maxWidth: 580,
              maxHeight: 500,
              child: AddCustomTokenView(),
            ),
      );
    } else {
      contract = await Navigator.of(
        context,
      ).pushNamed(AddCustomTokenView.routeName);
    }

    if (contract != null) {
      await MainDB.instance.putEthContract(contract);
      unawaited(ref.read(priceAnd24hChangeNotifierProvider).updatePrice());
      if (mounted) {
        setState(() {
          if (tokenEntities
              .where((e) => e.token.address == contract!.address)
              .isEmpty) {
            tokenEntities.add(EthTokenEntity(contract!));
            tokenEntities.sort((a, b) => a.token.name.compareTo(b.token.name));
          }
        });
      }
    }
  }

  Tuple2<List<String>, String> randomize(
      List<String> mnemonic,
      int chosenIndex,
      int wordsToShow,
      ) {
    final List<String> remaining = [];
    final String chosenWord = mnemonic[chosenIndex];

    for (int i = 0; i < mnemonic.length; i++) {
      if (chosenWord != mnemonic[i]) {
        remaining.add(mnemonic[i]);
      }
    }

    final random = Random();

    final List<String> result = [];

    for (int i = 0; i < wordsToShow - 1; i++) {
      final randomIndex = random.nextInt(remaining.length);
      result.add(remaining.removeAt(randomIndex));
    }

    result.insert(random.nextInt(wordsToShow), chosenWord);

    if (kDebugMode) {
      print("Mnemonic game correct word: $chosenWord");
    }

    return Tuple2(result, chosenWord);
  }

  Future<void> scanPaperWalletQr() async {
    try {
      final qrResult = await const BarcodeScannerWrapper().scan();

      final results = AddressUtils.parseWalletUri(qrResult.rawContent, logging: Logging.instance);

      if (results != null) {
        if (results.coin == Monero(CryptoCurrencyNetwork.main) && results.txids != null) {
          // Mnemonic for the wallet to sweep into is shown and gets confirmed
          // Create the new wallet info
          final newWallet = await Wallet.create(
            walletInfo: WalletInfo.createNew(
              coin: results.coin,
              name: "${results.coin.prettyName} Gift Wallet ${results.address != null ? '(${results.address!.substring(results.address!.length - 4)})' : ''}",
            ),
            mainDB: ref.read(mainDBProvider),
            secureStorageInterface: ref.read(secureStoreProvider),
            nodeService: ref.read(nodeServiceChangeNotifierProvider),
            prefs: ref.read(prefsChangeNotifierProvider),
            mnemonic: null,
            mnemonicPassphrase: null,
            privateKey: null,
          );
          await (newWallet as MoneroWallet).init(wordCount: 16);
          final mnemonic = (await newWallet.getMnemonic()).split(" ");
          if (mounted) {
            final hasWroteDown = await showDialog<bool>(context: context, barrierDismissible: false, builder: (context) {
              return Dialog(
                insetPadding: const EdgeInsets.all(16), // This may seem too much, but its needed for the dialog to show the mnemonic table properly
                child: Container(
                  decoration: BoxDecoration(
                    color: Theme.of(context).extension<StackColors>()!.background,
                    borderRadius: BorderRadius.circular(Constants.size.circularBorderRadius),
                  ),
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                  width: double.infinity,
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    children: [
                      Text(
                        "Monero Gift Wallet Redeem",
                        style: STextStyles.titleBold12(context),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 16),
                      Text(
                        "You are about to redeem the gift into a wallet with the following mnemonic phrase. Please write down this words. You will be asked to verify the mnemonic phrase after you have written it down.",
                        style: isDesktop
                            ? STextStyles.desktopH2(context)
                            : STextStyles.label(context).copyWith(fontSize: 12),
                        textAlign: TextAlign.center,
                      ),
                      const SizedBox(height: 16),
                      MnemonicTable(words: mnemonic, isDesktop: isDesktop),
                      const SizedBox(height: 16),
                      PrimaryButton(
                        label: "I have written down the mnemonic",
                        onPressed: () {
                          Navigator.of(context).pop(true);
                        },
                      ),
                    ],
                  ),
                ),
              );
            }) ?? false;
            if (hasWroteDown) {
              // Verify if checked
              final chosenIndex = Random().nextInt(mnemonic.length);
              final words = randomize(mnemonic, chosenIndex, 3);
              if (mounted) {
                final hasVerified = await showDialog<bool>(context: context, builder: (context) {
                  return Dialog(
                    insetPadding: const EdgeInsets.all(16), // This may seem too much, but its needed for the dialog to show the mnemonic table properly
                    child: Container(
                      decoration: BoxDecoration(
                        color: Theme.of(context).extension<StackColors>()!.background,
                        borderRadius: BorderRadius.circular(Constants.size.circularBorderRadius),
                      ),
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 16),
                      child: Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          Text(
                            "Monero Gift Wallet Redeem",
                            style: STextStyles.titleBold12(context),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 16),
                          Text(
                            "Verify recovery phrase",
                            textAlign: TextAlign.center,
                            style:
                            isDesktop
                                ? STextStyles.desktopH2(context)
                                : STextStyles.label(context).copyWith(fontSize: 12),
                          ),
                          const SizedBox(height: 16),
                          Text(
                            isDesktop ? "Select word number" : "Tap word number ",
                            textAlign: TextAlign.center,
                            style:
                            isDesktop
                                ? STextStyles.desktopSubtitleH1(context)
                                : STextStyles.pageTitleH1(context),
                          ),
                          const SizedBox(height: 16),
                          Container(
                            decoration: BoxDecoration(
                              color:
                              Theme.of(
                                context,
                              ).extension<StackColors>()!.textFieldDefaultBG,
                              borderRadius: BorderRadius.circular(
                                Constants.size.circularBorderRadius,
                              ),
                            ),
                            child: Padding(
                              padding: const EdgeInsets.symmetric(
                                vertical: 8,
                                horizontal: 12,
                              ),
                              child: Text(
                                "${chosenIndex + 1}",
                                textAlign: TextAlign.center,
                                style: STextStyles.subtitle600(
                                  context,
                                ).copyWith(fontSize: 32, letterSpacing: 0.25),
                              ),
                            ),
                          ),
                          const SizedBox(height: 16),
                          Column(
                            children: [
                              for (int i = 0; i < words.item1.length; i++)
                                Padding(
                                  padding: EdgeInsets.symmetric(
                                    vertical: isDesktop ? 8 : 5,
                                  ),
                                  child: Row(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      if (isDesktop) ...[
                                        const SizedBox(width: 10),
                                      ],
                                      Container(
                                        decoration: BoxDecoration(
                                          color: Theme.of(context).extension<StackColors>()!.popupBG,
                                          borderRadius: BorderRadius.circular(
                                            Constants.size.circularBorderRadius,
                                          ),
                                        ),
                                        child: MaterialButton(
                                          splashColor: Theme.of(context).extension<StackColors>()!.highlight,
                                          padding: isDesktop
                                              ? const EdgeInsets.symmetric(
                                            vertical: 18,
                                            horizontal: 12,
                                          )
                                              : const EdgeInsets.all(12),
                                          materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                                          shape: RoundedRectangleBorder(
                                            borderRadius:
                                            BorderRadius.circular(Constants.size.circularBorderRadius),
                                          ),
                                          onPressed: () {
                                            final word = words.item1[i];
                                            final wordIndex = mnemonic.indexOf(word);
                                            if (wordIndex == chosenIndex) {
                                              Navigator.of(context).pop(true);
                                            } else {
                                              Navigator.of(context).pop(false);
                                            }
                                          },
                                          child: Row(
                                            mainAxisAlignment: MainAxisAlignment.center,
                                            children: [
                                              Text(
                                                words.item1[i],
                                                textAlign: TextAlign.center,
                                                style: isDesktop
                                                    ? STextStyles.desktopTextExtraSmall(context).copyWith(
                                                  color: Theme.of(context)
                                                      .extension<StackColors>()!
                                                      .textDark,
                                                )
                                                    : STextStyles.baseXS(context).copyWith(
                                                  color: Theme.of(context)
                                                      .extension<StackColors>()!
                                                      .textDark,
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      )
                                    ],
                                  ),
                                ),
                            ],
                          )
                        ],
                      ),
                    ),
                  );
                }) ?? false;
                if (hasVerified) {
                  if (mounted) {
                    final wallet = await showLoading(
                      whileFuture: (() async {
                        await newWallet.info.setMnemonicVerified(isar: ref
                            .read(mainDBProvider)
                            .isar);
                        ref.read(pWallets).addWallet(newWallet);
                        await newWallet.open();
                        await newWallet.generateNewReceivingAddress();
                        return results.coin.importPaperWallet(results, ref, newWallet: newWallet);
                      })(),
                      context: context,
                      message: "Importing paper wallet...",
                    );
                    if (wallet == null) {
                      if (mounted) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          SnackBar(
                            content: Text(
                              "Failed to import paper wallet for ${results.coin.prettyName}. Please try again.",
                            ),
                          ),
                        );
                      }
                      return;
                    }
                    if (mounted) {
                      Navigator.pop(context);
                      await Navigator.of(context).pushNamed(
                        WalletView.routeName,
                        arguments: wallet.walletId,
                      );
                    }
                  }
                } else {
                  if (mounted) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text(
                          "Mnemonic verification failed. Please try again.",
                        ),
                      ),
                    );
                  }
                }
              }
            }
          }
        } else {
          if (mounted) {
            final wallet = await showLoading(
              whileFuture: results.coin.importPaperWallet(results, ref),
              context: context,
              message: "Importing paper wallet...",
            );
            if (wallet == null) {
              if (mounted) {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text(
                      "Failed to import paper wallet for ${results.coin.prettyName}. Please try again.",
                    ),
                  ),
                );
              }
              return;
            }
            if (mounted) {
              Navigator.pop(context);
              await Navigator.of(context).pushNamed(
                WalletView.routeName,
                arguments: wallet.walletId,
              );
            }
          }
        }
      }
    } on PlatformException catch (e, s) {
      // likely failed to get camera permissions
      Logging.instance.e(
        "Restore wallet qr scan failed: $e",
        error: e,
        stackTrace: s,
      );
    }
  }

  @override
  void initState() {
    _searchFieldController = TextEditingController();
    _searchFocusNode = FocusNode();

    coinEntities.addAll(_coins.map((e) => CoinEntity(e)));

    if (ref.read(prefsChangeNotifierProvider).showTestNetCoins) {
      coinTestnetEntities.addAll(_coinsTestnet.map((e) => CoinEntity(e)));
    }

    if (AppConfig.coins.whereType<Ethereum>().isNotEmpty) {
      final contracts =
          MainDB.instance.getEthContracts().sortByName().findAllSync();

      if (contracts.isEmpty) {
        contracts.addAll(DefaultTokens.list);
        MainDB.instance
            .putEthContracts(contracts)
            .then(
              (value) =>
                  ref.read(priceAnd24hChangeNotifierProvider).updatePrice(),
            );
      }

      tokenEntities.addAll(contracts.map((e) => EthTokenEntity(e)));
    }

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        ref.refresh(addWalletSelectedEntityStateProvider);
        if (isDesktop) {
          _searchFocusNode.requestFocus();
        }
      }
    });

    super.initState();
  }

  @override
  void dispose() {
    _searchFieldController.dispose();
    _searchFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");

    if (isDesktop) {
      return DesktopScaffold(
        appBar: const DesktopAppBar(
          isCompactHeight: false,
          leading: AppBarBackButton(),
          trailing: ExitToMyStackButton(),
        ),
        body: Column(
          children: [
            const AddWalletText(isDesktop: true),
            const SizedBox(height: 16),
            Expanded(
              child: SizedBox(
                width: 480,
                child: RoundedWhiteContainer(
                  radiusMultiplier: 2,
                  padding: const EdgeInsets.only(
                    left: 16,
                    top: 16,
                    right: 16,
                    bottom: 0,
                  ),
                  child: Column(
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(4.0),
                        child: ClipRRect(
                          borderRadius: BorderRadius.circular(
                            Constants.size.circularBorderRadius,
                          ),
                          child: TextField(
                            autocorrect: Util.isDesktop ? false : true,
                            enableSuggestions: Util.isDesktop ? false : true,
                            controller: _searchFieldController,
                            focusNode: _searchFocusNode,
                            onChanged: (value) {
                              setState(() {
                                _searchTerm = value;
                              });
                            },
                            style: STextStyles.desktopTextMedium(
                              context,
                            ).copyWith(height: 2),
                            decoration: standardInputDecoration(
                              "Search",
                              _searchFocusNode,
                              context,
                            ).copyWith(
                              contentPadding: const EdgeInsets.symmetric(
                                vertical: 10,
                              ),
                              prefixIcon: Padding(
                                padding: const EdgeInsets.symmetric(
                                  horizontal: 16,
                                  // vertical: 20,
                                ),
                                child: SvgPicture.asset(
                                  Assets.svg.search,
                                  width: 24,
                                  height: 24,
                                  color:
                                      Theme.of(context)
                                          .extension<StackColors>()!
                                          .textFieldDefaultSearchIconLeft,
                                ),
                              ),
                              suffixIcon:
                                  _searchFieldController.text.isNotEmpty
                                      ? Padding(
                                        padding: const EdgeInsets.only(
                                          right: 10,
                                        ),
                                        child: UnconstrainedBox(
                                          child: Row(
                                            children: [
                                              TextFieldIconButton(
                                                child: const XIcon(
                                                  width: 24,
                                                  height: 24,
                                                ),
                                                onTap: () async {
                                                  setState(() {
                                                    _searchFieldController
                                                        .text = "";
                                                    _searchTerm = "";
                                                  });
                                                },
                                              ),
                                            ],
                                          ),
                                        ),
                                      )
                                      : null,
                            ),
                          ),
                        ),
                      ),
                      const SizedBox(height: 8),
                      Expanded(
                        child: SingleChildScrollView(
                          child: Column(
                            children: [
                              ExpandingSubListItem(
                                title: "Coins",
                                entities: filter(_searchTerm, coinEntities),
                                initialState: ExpandableState.expanded,
                                animationDurationMultiplier: 0.5,
                              ),
                              if (coinTestnetEntities.isNotEmpty)
                                ExpandingSubListItem(
                                  title: "Testnet",
                                  entities: filter(
                                    _searchTerm,
                                    coinTestnetEntities,
                                  ),
                                  initialState: ExpandableState.expanded,
                                  animationDurationMultiplier: 0.5,
                                ),
                              if (tokenEntities.isNotEmpty)
                                ExpandingSubListItem(
                                  title: "Tokens",
                                  entities: filter(_searchTerm, tokenEntities),
                                  initialState: ExpandableState.expanded,
                                  animationDurationMultiplier: 0.5,
                                  trailing: AddCustomTokenSelector(
                                    addFunction: _addToken,
                                  ),
                                ),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 20),
                    ],
                  ),
                ),
              ),
            ),
            const SizedBox(height: 16),
            const SizedBox(
              height: 70,
              width: 480,
              child: AddWalletNextButton(isDesktop: true),
            ),
            const SizedBox(height: 32),
          ],
        ),
      );
    } else {
      return Background(
        child: Scaffold(
          backgroundColor:
              Theme.of(context).extension<StackColors>()!.background,
          appBar: AppBar(
            leading: AppBarBackButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
            ),
            actions: [
              Padding(
                padding: const EdgeInsets.only(
                  top: 10,
                  bottom: 10,
                  right: 10,
                ),
                child: AspectRatio(
                  aspectRatio: 1,
                  child: AppBarIconButton(
                    semanticsLabel:
                    "Paper Wallet Import Button. Imports your paper wallet to Stack Wallet.",
                    key: const Key("restoreWalletImportPaperWalletButton"),
                    size: 36,
                    shadows: const [],
                    color: Theme.of(context)
                        .extension<StackColors>()!
                        .background,
                    icon: SvgPicture.asset(
                      Assets.svg.paperWallet,
                      width: 20,
                      height: 20,
                      color: Theme.of(context)
                          .extension<StackColors>()!
                          .accentColorDark,
                    ),
                    onPressed: scanPaperWalletQr,
                  ),
                ),
              ),
            ],
          ),
          body: SafeArea(
            child: Container(
              color: Theme.of(context).extension<StackColors>()!.background,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    const AddWalletText(isDesktop: false),
                    const SizedBox(height: 16),
                    ClipRRect(
                      borderRadius: BorderRadius.circular(
                        Constants.size.circularBorderRadius,
                      ),
                      child: Semantics(
                        label:
                            "Search Text Field. Inputs Text To Search In Wallets.",
                        excludeSemantics: true,
                        child: TextField(
                          autofocus: isDesktop,
                          autocorrect: !isDesktop,
                          enableSuggestions: !isDesktop,
                          controller: _searchFieldController,
                          focusNode: _searchFocusNode,
                          onChanged:
                              (value) => setState(() => _searchTerm = value),
                          style: STextStyles.field(context),
                          decoration: standardInputDecoration(
                            "Search",
                            _searchFocusNode,
                            context,
                            desktopMed: isDesktop,
                          ).copyWith(
                            prefixIcon: Padding(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 10,
                                vertical: 16,
                              ),
                              child: SvgPicture.asset(
                                Assets.svg.search,
                                width: 16,
                                height: 16,
                              ),
                            ),
                            suffixIcon:
                                _searchFieldController.text.isNotEmpty
                                    ? Padding(
                                      padding: const EdgeInsets.only(right: 0),
                                      child: UnconstrainedBox(
                                        child: Row(
                                          children: [
                                            TextFieldIconButton(
                                              child: const XIcon(),
                                              onTap: () async {
                                                setState(() {
                                                  _searchFieldController.text =
                                                      "";
                                                  _searchTerm = "";
                                                });
                                              },
                                            ),
                                          ],
                                        ),
                                      ),
                                    )
                                    : null,
                          ),
                        ),
                      ),
                    ),
                    const SizedBox(height: 10),
                    Expanded(
                      child: SingleChildScrollView(
                        child: Column(
                          children: [
                            ExpandingSubListItem(
                              title: "Coins",
                              entities: filter(_searchTerm, coinEntities),
                              initialState: ExpandableState.expanded,
                            ),
                            if (coinTestnetEntities.isNotEmpty)
                              ExpandingSubListItem(
                                title: "Testnet",
                                entities: filter(
                                  _searchTerm,
                                  coinTestnetEntities,
                                ),
                                initialState: ExpandableState.expanded,
                              ),
                            if (tokenEntities.isNotEmpty)
                              ExpandingSubListItem(
                                title: "Tokens",
                                entities: filter(_searchTerm, tokenEntities),
                                initialState: ExpandableState.expanded,
                              ),
                          ],
                        ),
                      ),
                    ),
                    const SizedBox(height: 16),
                    const AddWalletNextButton(isDesktop: false),
                  ],
                ),
              ),
            ),
          ),
        ),
      );
    }
  }
}
