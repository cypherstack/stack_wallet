/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2025 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2025-08-14
 *
 */

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../services/testing/testing_service.dart';
import '../../services/testing/testing_models.dart';
import '../../themes/stack_colors.dart';
import '../../utilities/text_styles.dart';
import '../../utilities/util.dart';
import '../../widgets/conditional_parent.dart';
import '../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../widgets/desktop/primary_button.dart';
import '../../widgets/desktop/secondary_button.dart';
import '../../widgets/desktop/desktop_scaffold.dart';
import '../../widgets/desktop/desktop_app_bar.dart';
import '../../widgets/background.dart';
import 'sub_widgets/test_suite_card.dart';

class TestingView extends ConsumerStatefulWidget {
  const TestingView({super.key});

  static const String routeName = "/testing";

  @override
  ConsumerState<TestingView> createState() => _TestingViewState();
}

class _TestingViewState extends ConsumerState<TestingView> {
  late final StreamSubscription<TestingSessionState>? _subscription;

  @override
  void initState() {
    super.initState();
    _subscription = null;
  }

  @override
  void dispose() {
    _subscription?.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");

    final testingState = ref.watch(testingServiceProvider);
    final testingService = ref.read(testingServiceProvider.notifier);
    final isDesktop = Util.isDesktop;

    return ConditionalParent(
      condition: isDesktop,
      builder: (child) => DesktopScaffold(
        background: Theme.of(context).extension<StackColors>()!.background,
        appBar: const DesktopAppBar(
          isCompactHeight: false,
          leading: AppBarBackButton(),
        ),
        body: SizedBox(
          width: 480,
          child: child,
        ),
      ),
      child: ConditionalParent(
        condition: !isDesktop,
        builder: (child) => Background(
          child: Scaffold(
            backgroundColor: Theme.of(context).extension<StackColors>()!.background,
            appBar: AppBar(
              leading: AppBarBackButton(
                onPressed: () async {
                  if (Navigator.of(context).canPop()) {
                    Navigator.of(context).pop();
                  }
                },
              ),
              title: Text(
                "Testing",
                style: STextStyles.navBarTitle(context),
              ),
            ),
            body: LayoutBuilder(
              builder: (context, constraints) {
                return SingleChildScrollView(
                  child: ConstrainedBox(
                    constraints: BoxConstraints(
                      minHeight: constraints.maxHeight,
                    ),
                    child: IntrinsicHeight(
                      child: child,
                    ),
                  ),
                );
              },
            ),
          ),
        ),
        child: Column(
          children: [
            ConditionalParent(
              condition: isDesktop,
              builder: (child) => Padding(
                padding: const EdgeInsets.only(
                  left: 32,
                  right: 32,
                  top: 16,
                ),
                child: child,
              ),
              child: ConditionalParent(
                condition: !isDesktop,
                builder: (child) => Padding(
                  padding: const EdgeInsets.only(
                    left: 16,
                    right: 16,
                    top: 16,
                  ),
                  child: child,
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    if (isDesktop)
                      Text(
                        "Testing",
                        style: STextStyles.desktopH3(context),
                      ),
                    if (isDesktop)
                      const SizedBox(
                        height: 24,
                      ),
                    
                    // Control buttons
                    Row(
                      children: [
                        Expanded(
                          child: ConditionalParent(
                            condition: isDesktop,
                            builder: (child) => SecondaryButton(
                              label: testingState.isRunning ? "Cancel" : "Start All Tests",
                              onPressed: testingState.isRunning
                                  ? () => testingService.cancelTesting()
                                  : () => testingService.runAllTests(),
                            ),
                            child: TextButton(
                              style: Theme.of(context)
                                  .extension<StackColors>()!
                                  .getPrimaryEnabledButtonStyle(context),
                              onPressed: testingState.isRunning
                                  ? () => testingService.cancelTesting()
                                  : () => testingService.runAllTests(),
                              child: Text(
                                testingState.isRunning ? "Cancel" : "Start All Tests",
                                style: STextStyles.button(context).copyWith(
                                  color: Theme.of(context)
                                      .extension<StackColors>()!
                                      .buttonTextPrimary,
                                ),
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 16),
                        Expanded(
                          child: ConditionalParent(
                            condition: isDesktop,
                            builder: (child) => PrimaryButton(
                              label: "Reset",
                              enabled: !testingState.isRunning,
                              onPressed: testingState.isRunning
                                  ? null
                                  : () => testingService.resetTestResults(),
                            ),
                            child: TextButton(
                              style: testingState.isRunning
                                  ? Theme.of(context)
                                      .extension<StackColors>()!
                                      .getPrimaryDisabledButtonStyle(context)
                                  : Theme.of(context)
                                      .extension<StackColors>()!
                                      .getSecondaryEnabledButtonStyle(context),
                              onPressed: testingState.isRunning
                                  ? null
                                  : () => testingService.resetTestResults(),
                              child: Text(
                                "Reset",
                                style: STextStyles.button(context).copyWith(
                                  color: testingState.isRunning
                                      ? Theme.of(context)
                                          .extension<StackColors>()!
                                          .buttonTextPrimaryDisabled
                                      : Theme.of(context)
                                          .extension<StackColors>()!
                                          .buttonTextSecondary,
                                ),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                    const SizedBox(height: 32),
                    
                    // Test suite cards
                    ...TestSuiteType.values.map((type) {
                      return Padding(
                        padding: const EdgeInsets.only(bottom: 8),
                        child: TestSuiteCard(
                          testSuiteType: type,
                          status: testingState.suiteStatuses[type] ?? TestSuiteStatus.waiting,
                          onTap: testingState.isRunning 
                              ? null 
                              : () => testingService.runTestSuite(type),
                        ),
                      );
                    }),
                  ],
                ),
              ),
            ),
            const Spacer(),
            ConditionalParent(
              condition: isDesktop,
              builder: (child) => const SizedBox(
                height: 64,
              ),
              child: const SizedBox(
                height: 32,
              ),
            ),
          ],
        ),
      ),
    );
  }
}