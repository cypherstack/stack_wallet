/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2025 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2025-08-14
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../services/testing/testing_models.dart';
import '../../../services/testing/testing_service.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/text_styles.dart';
import '../../../widgets/loading_indicator.dart';
import '../../../widgets/rounded_white_container.dart';

class TestSuiteCard extends ConsumerWidget {
  const TestSuiteCard({
    super.key,
    required this.testSuiteType,
    required this.status,
    this.onTap,
  });

  final TestSuiteType testSuiteType;
  final TestSuiteStatus status;
  final VoidCallback? onTap;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final testingService = ref.read(testingServiceProvider.notifier);
    final colors = Theme.of(context).extension<StackColors>()!;

    return GestureDetector(
      onTap: onTap,
      child: RoundedWhiteContainer(
        padding: const EdgeInsets.all(2),
        child: Stack(
          children: [
            Padding(
              padding: const EdgeInsets.all(10),
              child: Row(
                children: [
                  const SizedBox(
                    width: 32,
                    height: 32,
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Text(
                          testingService.getDisplayNameForTestSuite(testSuiteType),
                          style: STextStyles.titleBold12(context),
                        ),
                        const SizedBox(height: 2),
                        Text(
                          _getSubtitleForStatus(status),
                          style: STextStyles.label(context).copyWith(
                            color: _getColorForStatus(status, colors),
                          ),
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(width: 12),
                  const SizedBox(
                    width: 20,
                    height: 20,
                  ),
                ],
              ),
            ),
            Positioned.fill(
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  Padding(
                    padding: const EdgeInsets.only(right: 12),
                    child: _buildStatusIndicator(status, colors),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildStatusIndicator(TestSuiteStatus status, StackColors colors) {
    switch (status) {
      case TestSuiteStatus.waiting:
        return Icon(
          Icons.schedule,
          size: 20,
          color: colors.textSubtitle1,
        );
      case TestSuiteStatus.running:
        return SizedBox(
          width: 20,
          height: 20,
          child: LoadingIndicator(
            width: 20,
            height: 20,
          ),
        );
      case TestSuiteStatus.passed:
        return Icon(
          Icons.check_circle,
          size: 20,
          color: colors.accentColorGreen,
        );
      case TestSuiteStatus.failed:
        return Icon(
          Icons.error,
          size: 20,
          color: colors.accentColorRed,
        );
    }
  }

  String _getSubtitleForStatus(TestSuiteStatus status) {
    switch (status) {
      case TestSuiteStatus.waiting:
        return "Ready to test";
      case TestSuiteStatus.running:
        return "Running tests...";
      case TestSuiteStatus.passed:
        return "All tests passed";
      case TestSuiteStatus.failed:
        return "Tests failed";
    }
  }

  Color _getColorForStatus(TestSuiteStatus status, StackColors colors) {
    switch (status) {
      case TestSuiteStatus.waiting:
        return colors.textSubtitle1;
      case TestSuiteStatus.running:
        return colors.accentColorGreen;
      case TestSuiteStatus.passed:
        return colors.accentColorGreen;
      case TestSuiteStatus.failed:
        return colors.accentColorRed;
    }
  }
}