/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../models/keys/view_only_wallet_data.dart';
import '../../../../providers/db/main_db_provider.dart';
import '../../../../providers/providers.dart';
import '../../../../route_generator.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/constants.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../wallets/isar/models/wallet_info.dart';
import '../../../../wallets/isar/providers/wallet_info_provider.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/lelantus_interface.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/multi_address_interface.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/rbf_interface.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/spark_interface.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/view_only_option_interface.dart';
import '../../../../widgets/background.dart';
import '../../../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../../../widgets/custom_buttons/draggable_switch_button.dart';
import '../../../../widgets/rounded_white_container.dart';
import '../../../../widgets/stack_dialog.dart';
import '../../../pinpad_views/lock_screen_view.dart';
import 'delete_wallet_warning_view.dart';
import 'lelantus_settings_view.dart';
import 'rbf_settings_view.dart';
import 'rename_wallet_view.dart';
import 'spark_info.dart';

class WalletSettingsWalletSettingsView extends ConsumerStatefulWidget {
  const WalletSettingsWalletSettingsView({
    super.key,
    required this.walletId,
  });

  static const String routeName = "/walletSettingsWalletSettings";

  final String walletId;

  @override
  ConsumerState<WalletSettingsWalletSettingsView> createState() =>
      _WalletSettingsWalletSettingsViewState();
}

class _WalletSettingsWalletSettingsViewState
    extends ConsumerState<WalletSettingsWalletSettingsView> {
  late final DSBController _switchController;

  bool _switchReuseAddressToggledLock = false; // Mutex.
  Future<void> _switchReuseAddressToggled() async {
    if (_switchReuseAddressToggledLock) {
      return;
    }
    _switchReuseAddressToggledLock = true; // Lock mutex.

    try {
      if (_switchController.isOn?.call() != true) {
        final canContinue = await showDialog<bool?>(
          context: context,
          builder: (context) {
            return StackDialog(
              title: "Warning!",
              message:
                  "Reusing addresses reduces your privacy and security.  Are you sure you want to reuse addresses by default?",
              leftButton: TextButton(
                style: Theme.of(context)
                    .extension<StackColors>()!
                    .getSecondaryEnabledButtonStyle(context),
                child: Text(
                  "Cancel",
                  style: STextStyles.itemSubtitle12(context),
                ),
                onPressed: () {
                  Navigator.of(context).pop(false);
                },
              ),
              rightButton: TextButton(
                style: Theme.of(context)
                    .extension<StackColors>()!
                    .getPrimaryEnabledButtonStyle(context),
                child: Text(
                  "Continue",
                  style: STextStyles.button(context),
                ),
                onPressed: () {
                  Navigator.of(context).pop(true);
                },
              ),
            );
          },
        );

        if (canContinue == true) {
          await _updateAddressReuse(true);
        }
      } else {
        await _updateAddressReuse(false);
      }
    } finally {
      // ensure _switchReuseAddressToggledLock is set to false no matter what.
      _switchReuseAddressToggledLock = false;
    }
  }

  Future<void> _updateAddressReuse(bool shouldReuse) async {
    await ref.read(pWalletInfo(widget.walletId)).updateOtherData(
      newEntries: {
        WalletInfoKeys.reuseAddress: shouldReuse,
      },
      isar: ref.read(mainDBProvider).isar,
    );

    if (_switchController.isOn != null) {
      if (_switchController.isOn!.call() != shouldReuse) {
        _switchController.activate?.call();
      }
    }
  }

  @override
  void initState() {
    _switchController = DSBController();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    final wallet = ref.watch(pWallets).getWallet(widget.walletId);

    final isViewOnlyNoAddressGen = wallet is ViewOnlyOptionInterface &&
        wallet.isViewOnly &&
        wallet.viewOnlyType == ViewOnlyWalletType.addressOnly;

    return Background(
      child: Scaffold(
        backgroundColor: Theme.of(context).extension<StackColors>()!.background,
        appBar: AppBar(
          leading: AppBarBackButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
          ),
          title: Text(
            "Wallet settings",
            style: STextStyles.navBarTitle(context),
          ),
        ),
        body: Padding(
          padding: const EdgeInsets.only(
            top: 12,
            left: 16,
            right: 16,
          ),
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                RoundedWhiteContainer(
                  padding: const EdgeInsets.all(0),
                  child: RawMaterialButton(
                    // splashColor: Theme.of(context).extension<StackColors>()!.highlight,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(
                        Constants.size.circularBorderRadius,
                      ),
                    ),
                    materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                    onPressed: () {
                      Navigator.of(context).pushNamed(
                        RenameWalletView.routeName,
                        arguments: widget.walletId,
                      );
                    },
                    child: Padding(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12.0,
                        vertical: 20,
                      ),
                      child: Row(
                        children: [
                          Text(
                            "Rename wallet",
                            style: STextStyles.titleBold12(context),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                if (wallet is RbfInterface)
                  const SizedBox(
                    height: 8,
                  ),
                if (wallet is RbfInterface)
                  RoundedWhiteContainer(
                    padding: const EdgeInsets.all(0),
                    child: RawMaterialButton(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(
                          Constants.size.circularBorderRadius,
                        ),
                      ),
                      materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                      onPressed: () {
                        Navigator.of(context).pushNamed(
                          RbfSettingsView.routeName,
                          arguments: widget.walletId,
                        );
                      },
                      child: Padding(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12.0,
                          vertical: 20,
                        ),
                        child: Row(
                          children: [
                            Text(
                              "RBF settings",
                              style: STextStyles.titleBold12(context),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                if (wallet is MultiAddressInterface && !isViewOnlyNoAddressGen)
                  const SizedBox(
                    height: 8,
                  ),
                if (wallet is MultiAddressInterface && !isViewOnlyNoAddressGen)
                  RoundedWhiteContainer(
                    padding: const EdgeInsets.all(0),
                    child: RawMaterialButton(
                      // splashColor: Theme.of(context).extension<StackColors>()!.highlight,
                      materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(
                          Constants.size.circularBorderRadius,
                        ),
                      ),
                      onPressed: _switchReuseAddressToggled,
                      child: Padding(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12.0,
                          vertical: 20,
                        ),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              "Reuse receiving address",
                              style: STextStyles.titleBold12(context),
                              textAlign: TextAlign.left,
                            ),
                            SizedBox(
                              height: 20,
                              width: 40,
                              child: IgnorePointer(
                                child: DraggableSwitchButton(
                                  isOn: ref.watch(
                                        pWalletInfo(widget.walletId).select(
                                          (value) => value.otherData,
                                        ),
                                      )[WalletInfoKeys.reuseAddress] as bool? ??
                                      false,
                                  controller: _switchController,
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                if (wallet is LelantusInterface)
                  const SizedBox(
                    height: 8,
                  ),
                if (wallet is LelantusInterface)
                  RoundedWhiteContainer(
                    padding: const EdgeInsets.all(0),
                    child: RawMaterialButton(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(
                          Constants.size.circularBorderRadius,
                        ),
                      ),
                      materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                      onPressed: () {
                        Navigator.of(context).pushNamed(
                          LelantusSettingsView.routeName,
                          arguments: widget.walletId,
                        );
                      },
                      child: Padding(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12.0,
                          vertical: 20,
                        ),
                        child: Row(
                          children: [
                            Text(
                              "Lelantus settings",
                              style: STextStyles.titleBold12(context),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                if (wallet is SparkInterface)
                  const SizedBox(
                    height: 8,
                  ),
                if (wallet is SparkInterface)
                  RoundedWhiteContainer(
                    padding: const EdgeInsets.all(0),
                    child: RawMaterialButton(
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(
                          Constants.size.circularBorderRadius,
                        ),
                      ),
                      materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                      onPressed: () {
                        Navigator.of(context).pushNamed(
                          SparkInfoView.routeName,
                          arguments: widget.walletId,
                        );
                      },
                      child: Padding(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 12.0,
                          vertical: 20,
                        ),
                        child: Row(
                          children: [
                            Text(
                              "Spark info",
                              style: STextStyles.titleBold12(context),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),
                const SizedBox(
                  height: 8,
                ),
                RoundedWhiteContainer(
                  padding: const EdgeInsets.all(0),
                  child: RawMaterialButton(
                    // splashColor: Theme.of(context).extension<StackColors>()!.highlight,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(
                        Constants.size.circularBorderRadius,
                      ),
                    ),
                    materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                    padding: const EdgeInsets.all(0),
                    onPressed: () {
                      showDialog(
                        barrierDismissible: true,
                        context: context,
                        builder: (_) => StackDialog(
                          title:
                              "Do you want to delete ${ref.read(pWalletName(widget.walletId))}?",
                          leftButton: TextButton(
                            style: Theme.of(context)
                                .extension<StackColors>()!
                                .getSecondaryEnabledButtonStyle(context),
                            onPressed: () {
                              Navigator.pop(context);
                            },
                            child: Text(
                              "Cancel",
                              style: STextStyles.button(context).copyWith(
                                color: Theme.of(context)
                                    .extension<StackColors>()!
                                    .accentColorDark,
                              ),
                            ),
                          ),
                          rightButton: TextButton(
                            style: Theme.of(context)
                                .extension<StackColors>()!
                                .getPrimaryEnabledButtonStyle(context),
                            onPressed: () {
                              Navigator.pop(context);
                              Navigator.push(
                                context,
                                RouteGenerator.getRoute(
                                  shouldUseMaterialRoute:
                                      RouteGenerator.useMaterialPageRoute,
                                  builder: (_) => LockscreenView(
                                    routeOnSuccessArguments: widget.walletId,
                                    showBackButton: true,
                                    routeOnSuccess:
                                        DeleteWalletWarningView.routeName,
                                    biometricsCancelButtonString: "CANCEL",
                                    biometricsLocalizedReason:
                                        "Authenticate to delete wallet",
                                    biometricsAuthenticationTitle:
                                        "Delete wallet",
                                  ),
                                  settings: const RouteSettings(
                                    name: "/deleteWalletLockscreen",
                                  ),
                                ),
                              );
                            },
                            child: Text(
                              "Delete",
                              style: STextStyles.button(context),
                            ),
                          ),
                        ),
                      );
                    },
                    child: Padding(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 12.0,
                        vertical: 20,
                      ),
                      child: Row(
                        children: [
                          Text(
                            "Delete wallet",
                            style: STextStyles.titleBold12(context),
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}
