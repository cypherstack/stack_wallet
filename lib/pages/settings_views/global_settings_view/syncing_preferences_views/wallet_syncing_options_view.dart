/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../../../providers/providers.dart';
import '../../../../themes/coin_icon_provider.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../themes/theme_providers.dart';
import '../../../../utilities/amount/amount_formatter.dart';
import '../../../../utilities/constants.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../utilities/util.dart';
import '../../../../wallets/isar/providers/wallet_info_provider.dart';
import '../../../../widgets/background.dart';
import '../../../../widgets/conditional_parent.dart';
import '../../../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../../../widgets/custom_buttons/draggable_switch_button.dart';
import '../../../../widgets/rounded_white_container.dart';

class WalletSyncingOptionsView extends ConsumerWidget {
  const WalletSyncingOptionsView({super.key});

  static const String routeName = "/walletSyncingOptions";

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final walletInfos = ref.watch(pWallets).wallets.map((e) => e.info);

    final isDesktop = Util.isDesktop;
    return ConditionalParent(
      condition: !isDesktop,
      builder: (child) {
        return Background(
          child: Scaffold(
            backgroundColor:
                Theme.of(context).extension<StackColors>()!.background,
            appBar: AppBar(
              leading: AppBarBackButton(
                onPressed: () async {
                  Navigator.of(context).pop();
                },
              ),
              title: FittedBox(
                fit: BoxFit.scaleDown,
                child: Text(
                  "Sync only selected wallets at startup",
                  style: STextStyles.navBarTitle(context),
                ),
              ),
            ),
            body: SafeArea(
              child: Padding(
                padding: const EdgeInsets.only(left: 12, top: 12, right: 12),
                child: child,
              ),
            ),
          ),
        );
      },
      child: ConditionalParent(
        condition: isDesktop,
        builder: (child) {
          return Padding(
            padding: const EdgeInsets.symmetric(horizontal: 32),
            child: child,
          );
        },
        child: LayoutBuilder(
          builder: (context, constraints) {
            return SingleChildScrollView(
              child: ConstrainedBox(
                constraints: BoxConstraints(
                  minHeight: constraints.maxHeight - 24,
                ),
                child: IntrinsicHeight(
                  child: Padding(
                    padding: const EdgeInsets.all(4),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const SizedBox(height: 4),
                        Text(
                          "Choose the wallets to sync automatically at startup",
                          style: STextStyles.smallMed12(context),
                        ),
                        const SizedBox(height: 12),
                        RoundedWhiteContainer(
                          padding: const EdgeInsets.all(0),
                          borderColor:
                              !isDesktop
                                  ? Colors.transparent
                                  : Theme.of(
                                    context,
                                  ).extension<StackColors>()!.background,
                          child: Column(
                            children: [
                              ...walletInfos.map(
                                (info) => Padding(
                                  padding: const EdgeInsets.all(12),
                                  child: Row(
                                    key: Key(
                                      "syncingPrefsSelectedWalletIdGroupKey_${info.walletId}",
                                    ),
                                    children: [
                                      Container(
                                        decoration: BoxDecoration(
                                          color: ref
                                              .watch(pCoinColor(info.coin))
                                              .withOpacity(0.5),
                                          borderRadius: BorderRadius.circular(
                                            Constants.size.circularBorderRadius,
                                          ),
                                        ),
                                        child: Padding(
                                          padding: const EdgeInsets.all(4),
                                          child: SvgPicture.file(
                                            File(
                                              ref.watch(
                                                coinIconProvider(info.coin),
                                              ),
                                            ),
                                            width: 20,
                                            height: 20,
                                          ),
                                        ),
                                      ),
                                      const SizedBox(width: 12),
                                      Column(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        crossAxisAlignment:
                                            CrossAxisAlignment.start,
                                        children: [
                                          Text(
                                            info.name,
                                            style: STextStyles.titleBold12(
                                              context,
                                            ),
                                          ),
                                          const SizedBox(height: 2),
                                          Text(
                                            ref
                                                .watch(
                                                  pAmountFormatter(info.coin),
                                                )
                                                .format(
                                                  ref
                                                      .watch(
                                                        pWalletBalance(
                                                          info.walletId,
                                                        ),
                                                      )
                                                      .total,
                                                ),
                                            style: STextStyles.itemSubtitle(
                                              context,
                                            ),
                                          ),
                                        ],
                                      ),
                                      const Spacer(),
                                      SizedBox(
                                        height: 20,
                                        width: 40,
                                        child: DraggableSwitchButton(
                                          isOn: ref
                                              .watch(
                                                prefsChangeNotifierProvider.select(
                                                  (value) =>
                                                      value
                                                          .walletIdsSyncOnStartup,
                                                ),
                                              )
                                              .contains(info.walletId),
                                          onValueChanged: (value) {
                                            // final syncType = ref
                                            //     .read(prefsChangeNotifierProvider)
                                            //     .syncType;
                                            final ids =
                                                ref
                                                    .read(
                                                      prefsChangeNotifierProvider,
                                                    )
                                                    .walletIdsSyncOnStartup
                                                    .toList();
                                            if (value) {
                                              ids.add(info.walletId);
                                            } else {
                                              ids.remove(info.walletId);
                                            }

                                            // final wallet = ref
                                            //     .read(pWallets)
                                            //     .getWallet(info.walletId);
                                            //
                                            // switch (syncType) {
                                            //   case SyncingType.currentWalletOnly:
                                            //     if (info.walletId ==
                                            //         ref.read(
                                            //             currentWalletIdProvider)) {
                                            //       wallet.shouldAutoSync = value;
                                            //     }
                                            //     break;
                                            //   case SyncingType
                                            //         .selectedWalletsAtStartup:
                                            //   case SyncingType
                                            //         .allWalletsOnStartup:
                                            //     wallet.shouldAutoSync = value;
                                            //     break;
                                            // }

                                            ref
                                                .read(
                                                  prefsChangeNotifierProvider,
                                                )
                                                .walletIdsSyncOnStartup = ids;
                                          },
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ),
            );
          },
        ),
      ),
    );
  }
}
