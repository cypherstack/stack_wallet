/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:isar/isar.dart';

import '../../themes/stack_colors.dart';
import '../../utilities/text_styles.dart';
import '../../widgets/rounded_white_container.dart';
import '../utilities/util.dart';
import 'detail_item.dart';

class IsarCollectionWatcherList<T> extends StatefulWidget {
  const IsarCollectionWatcherList({
    super.key,
    required this.queryBuilder,
    required this.itemBuilder,
    required this.itemName,
  });

  final String itemName;
  final QueryBuilder<T, T, QQueryProperty> Function() queryBuilder;
  final List<(String title, String value, int flex)> Function(T?) itemBuilder;

  @override
  State<IsarCollectionWatcherList<T>> createState() =>
      _IsarCollectionWatcherListState();
}

class _IsarCollectionWatcherListState<T>
    extends State<IsarCollectionWatcherList<T>> {
  List<T> _items = [];

  Stream<List<T>>? sparkCoinsCollectionWatcher;

  late final StreamSubscription<List<T>> _streamSubscription;

  void _onSparkCoinsCollectionWatcherEvent(List<T> items) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        setState(() {
          _items = items;
        });
      }
    });
  }

  @override
  void initState() {
    super.initState();

    sparkCoinsCollectionWatcher =
        widget.queryBuilder().watch(fireImmediately: true);
    _streamSubscription = sparkCoinsCollectionWatcher!
        .listen((data) => _onSparkCoinsCollectionWatcherEvent(data));
  }

  @override
  void dispose() {
    _streamSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (Util.isDesktop) {
      return Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(4),
            child: RoundedWhiteContainer(
              child: Row(
                children: [
                  Text(
                    "Total ${widget.itemName}: ${_items.length}",
                    style: STextStyles.itemSubtitle(context),
                    textAlign: TextAlign.left,
                  ),
                ],
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(4),
            child: RoundedWhiteContainer(
              child: Row(
                children: [
                  ...widget.itemBuilder(null).map(
                        (e) => Expanded(
                          flex: e.$3,
                          child: Text(
                            e.$1,
                            style: STextStyles.itemSubtitle(context),
                            textAlign: TextAlign.left,
                          ),
                        ),
                      ),
                ],
              ),
            ),
          ),
          Expanded(
            child: ListView.separated(
              shrinkWrap: true,
              itemCount: _items.length,
              separatorBuilder: (_, __) => Container(
                height: 1,
                color: Theme.of(context)
                    .extension<StackColors>()!
                    .backgroundAppBar,
              ),
              itemBuilder: (_, index) => Padding(
                padding: const EdgeInsets.all(4),
                child: RoundedWhiteContainer(
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                    children: [
                      ...widget.itemBuilder(_items[index]).map(
                            (e) => Expanded(
                              flex: e.$3,
                              child: SelectableText(
                                e.$2,
                                style: STextStyles.itemSubtitle12(context),
                                textAlign: TextAlign.left,
                              ),
                            ),
                          ),
                    ],
                  ),
                ),
              ),
            ),
          ),
        ],
      );
    } else {
      return ListView.builder(
        itemCount: _items.length + 1,
        itemBuilder: (ctx, index) {
          return Padding(
            padding: const EdgeInsets.only(
              bottom: 16,
              left: 16,
              right: 16,
            ),
            child: RoundedWhiteContainer(
              child: index == 0
                  ? Row(
                      children: [
                        Text(
                          "Total ${widget.itemName}: ${_items.length}",
                          style: STextStyles.itemSubtitle(context),
                        ),
                      ],
                    )
                  : Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        ...widget.itemBuilder(_items[index - 1]).map(
                              (e) => DetailItem(
                                title: e.$1,
                                detail: e.$2,
                              ),
                            ),
                      ],
                    ),
            ),
          );
        },
      );
    }
  }
}
