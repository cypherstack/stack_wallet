/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';
import 'package:isar/isar.dart';

import '../../../models/isar/exchange_cache/currency.dart';
import '../../../services/exchange/change_now/change_now_exchange.dart';
import '../../../services/exchange/exchange_data_loading_service.dart';
import '../../../themes/coin_icon_provider.dart';
import '../../../themes/theme_providers.dart';
import '../../../utilities/constants.dart';
import '../../../wallets/crypto_currency/crypto_currency.dart';

class WalletInfoCoinIcon extends ConsumerStatefulWidget {
  const WalletInfoCoinIcon({
    super.key,
    required this.coin,
    this.size = 32,
    this.contractAddress,
  });

  final CryptoCurrency coin;
  final String? contractAddress;
  final double size;

  @override
  ConsumerState<WalletInfoCoinIcon> createState() => _WalletInfoCoinIconState();
}

class _WalletInfoCoinIconState extends ConsumerState<WalletInfoCoinIcon> {
  String? imageUrl;

  @override
  void initState() {
    super.initState();

    ExchangeDataLoadingService.instance.isar.then((isar) async {
      if (widget.contractAddress != null) {
        final currency =
            await isar.currencies
                .where()
                .exchangeNameEqualTo(ChangeNowExchange.exchangeName)
                .filter()
                .tokenContractEqualTo(
                  widget.contractAddress!,
                  caseSensitive: false,
                )
                .and()
                .imageIsNotEmpty()
                .findFirst();

        if (mounted) {
          WidgetsBinding.instance.addPostFrameCallback((_) {
            if (mounted) {
              setState(() {
                imageUrl = currency?.image;
              });
            }
          });
        }
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Container(
      width: widget.size,
      height: widget.size,
      decoration: BoxDecoration(
        color: ref.watch(pCoinColor(widget.coin)).withOpacity(0.4),
        borderRadius: BorderRadius.circular(
          Constants.size.circularBorderRadius,
        ),
      ),
      child: Padding(
        padding: EdgeInsets.all(widget.size / 5),
        child:
            imageUrl != null && imageUrl!.isNotEmpty
                ? SvgPicture.network(imageUrl!, width: 20, height: 20)
                : SvgPicture.file(
                  File(ref.watch(coinIconProvider(widget.coin))),
                  width: 20,
                  height: 20,
                ),
      ),
    );
  }
}
