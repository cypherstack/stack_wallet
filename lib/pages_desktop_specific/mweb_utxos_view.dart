/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2025-06-12
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../themes/stack_colors.dart';
import '../../utilities/assets.dart';
import '../../utilities/text_styles.dart';
import '../../utilities/util.dart';
import '../../widgets/background.dart';
import '../../widgets/conditional_parent.dart';
import '../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../widgets/desktop/desktop_app_bar.dart';
import '../../widgets/desktop/desktop_scaffold.dart';
import '../db/drift/database.dart';
import '../providers/providers.dart';
import '../widgets/detail_item.dart';
import '../widgets/rounded_white_container.dart';

class MwebUtxosView extends ConsumerWidget {
  const MwebUtxosView({super.key, required this.walletId});

  static const title = "MWEB outputs";
  static const String routeName = "/mwebUtxosView";

  final String walletId;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return ConditionalParent(
      condition: Util.isDesktop,
      builder: (child) {
        return DesktopScaffold(
          appBar: DesktopAppBar(
            background: Theme.of(context).extension<StackColors>()!.popupBG,
            leading: Expanded(
              child: Row(
                children: [
                  const SizedBox(width: 32),
                  AppBarIconButton(
                    size: 32,
                    color:
                        Theme.of(
                          context,
                        ).extension<StackColors>()!.textFieldDefaultBG,
                    shadows: const [],
                    icon: SvgPicture.asset(
                      Assets.svg.arrowLeft,
                      width: 18,
                      height: 18,
                      color:
                          Theme.of(
                            context,
                          ).extension<StackColors>()!.topNavIconPrimary,
                    ),
                    onPressed: Navigator.of(context).pop,
                  ),
                  const SizedBox(width: 12),
                  Text(title, style: STextStyles.desktopH3(context)),
                  const Spacer(),
                ],
              ),
            ),
            useSpacers: false,
            isCompactHeight: true,
          ),
          body: Padding(padding: const EdgeInsets.all(24), child: child),
        );
      },
      child: ConditionalParent(
        condition: !Util.isDesktop,
        builder: (child) {
          return Background(
            child: Scaffold(
              backgroundColor:
                  Theme.of(context).extension<StackColors>()!.background,
              appBar: AppBar(
                automaticallyImplyLeading: false,
                leading: AppBarBackButton(
                  onPressed: () => Navigator.of(context).pop(),
                ),
                title: Text(title, style: STextStyles.navBarTitle(context)),
              ),
              body: SafeArea(child: child),
            ),
          );
        },
        child: StreamViewList(
          itemName: title,
          stream:
              ref
                  .read(pDrift(walletId))
                  .select(ref.read(pDrift(walletId)).mwebUtxos)
                  .watch(),
          itemBuilder: (MwebUtxo? coin) {
            return [
              ("Output Id", coin?.outputId ?? "", 9),
              ("Address", coin?.address ?? "", 9),
              ("Value (sats)", coin?.value.toString() ?? "", 3),
              ("Height", coin?.height.toString() ?? "", 2),
              ("Block time", coin?.blockTime.toString() ?? "", 2),
              ("Blocked", coin?.blocked.toString() ?? "", 2),
              ("Used", coin?.used.toString() ?? "", 2),
            ];
          },
        ),
      ),
    );
  }
}

class StreamViewList<T> extends StatefulWidget {
  const StreamViewList({
    super.key,
    required this.stream,
    required this.itemBuilder,
    required this.itemName,
  });

  final Stream<List<T>> stream;
  final String itemName;
  final List<(String title, String value, int flex)> Function(T?) itemBuilder;

  @override
  State<StreamViewList<T>> createState() => _StreamViewListState();
}

class _StreamViewListState<T> extends State<StreamViewList<T>> {
  List<T> _items = [];

  late final StreamSubscription<List<T>> _streamSubscription;

  void _onMwebUtxossCollectionWatcherEvent(List<T> items) {
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        setState(() {
          _items = items;
        });
      }
    });
  }

  @override
  void initState() {
    super.initState();

    _streamSubscription = widget.stream.listen(
      (data) => _onMwebUtxossCollectionWatcherEvent(data),
    );
  }

  @override
  void dispose() {
    _streamSubscription.cancel();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    if (Util.isDesktop) {
      return Column(
        children: [
          Padding(
            padding: const EdgeInsets.all(4),
            child: RoundedWhiteContainer(
              child: Row(
                children: [
                  Text(
                    "Total ${widget.itemName}: ${_items.length}",
                    style: STextStyles.itemSubtitle(context),
                    textAlign: TextAlign.left,
                  ),
                ],
              ),
            ),
          ),
          Padding(
            padding: const EdgeInsets.all(4),
            child: RoundedWhiteContainer(
              child: Row(
                children: [
                  ...widget
                      .itemBuilder(null)
                      .map(
                        (e) => Expanded(
                          flex: e.$3,
                          child: Text(
                            e.$1,
                            style: STextStyles.itemSubtitle(context),
                            textAlign: TextAlign.left,
                          ),
                        ),
                      ),
                ],
              ),
            ),
          ),
          Expanded(
            child: ListView.separated(
              shrinkWrap: true,
              itemCount: _items.length,
              separatorBuilder:
                  (_, __) => Container(
                    height: 1,
                    color:
                        Theme.of(
                          context,
                        ).extension<StackColors>()!.backgroundAppBar,
                  ),
              itemBuilder:
                  (_, index) => Padding(
                    padding: const EdgeInsets.all(4),
                    child: RoundedWhiteContainer(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          ...widget
                              .itemBuilder(_items[index])
                              .map(
                                (e) => Expanded(
                                  flex: e.$3,
                                  child: SelectableText(
                                    e.$2,
                                    style: STextStyles.itemSubtitle12(context),
                                    textAlign: TextAlign.left,
                                  ),
                                ),
                              ),
                        ],
                      ),
                    ),
                  ),
            ),
          ),
        ],
      );
    } else {
      return ListView.builder(
        itemCount: _items.length + 1,
        itemBuilder: (ctx, index) {
          return Padding(
            padding: const EdgeInsets.only(bottom: 16, left: 16, right: 16),
            child: RoundedWhiteContainer(
              child:
                  index == 0
                      ? Row(
                        children: [
                          Text(
                            "Total ${widget.itemName}: ${_items.length}",
                            style: STextStyles.itemSubtitle(context),
                          ),
                        ],
                      )
                      : Column(
                        mainAxisSize: MainAxisSize.min,
                        children: [
                          ...widget
                              .itemBuilder(_items[index - 1])
                              .map(
                                (e) => DetailItem(title: e.$1, detail: e.$2),
                              ),
                        ],
                      ),
            ),
          );
        },
      );
    }
  }
}
