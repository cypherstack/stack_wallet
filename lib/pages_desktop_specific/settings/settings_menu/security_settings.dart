/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';
import 'package:zxcvbn/zxcvbn.dart';

import '../../../app_config.dart';
import '../../../notifications/show_flush_bar.dart';
import '../../../providers/desktop/storage_crypto_handler_provider.dart';
import '../../../providers/global/prefs_provider.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/assets.dart';
import '../../../utilities/constants.dart';
import '../../../utilities/show_loading.dart';
import '../../../utilities/text_styles.dart';
import '../../../widgets/desktop/primary_button.dart';
import '../../../widgets/progress_bar.dart';
import '../../../widgets/rounded_white_container.dart';
import '../../../widgets/stack_text_field.dart';
import 'advanced_settings/desktop_autolock_timeout_settings_dialog.dart';

class SecuritySettings extends ConsumerStatefulWidget {
  const SecuritySettings({super.key});

  static const String routeName = "/settingsMenuSecurity";

  @override
  ConsumerState<SecuritySettings> createState() => _SecuritySettings();
}

class _SecuritySettings extends ConsumerState<SecuritySettings> {
  late bool changePassword = false;

  late final TextEditingController passwordCurrentController;
  late final TextEditingController passwordController;
  late final TextEditingController passwordRepeatController;

  late final FocusNode passwordCurrentFocusNode;
  late final FocusNode passwordFocusNode;
  late final FocusNode passwordRepeatFocusNode;
  final zxcvbn = Zxcvbn();

  bool hidePassword = true;
  bool shouldShowPasswordHint = true;

  double passwordStrength = 0.0;

  bool get shouldEnableSave {
    return passwordCurrentController.text.isNotEmpty &&
        passwordController.text.isNotEmpty &&
        passwordRepeatController.text.isNotEmpty;
  }

  String passwordFeedback =
      "Add another word or two. Uncommon words are better. Use a few words, avoid common phrases. No need for symbols, digits, or uppercase letters.";

  bool _changePWLock = false;
  Future<(bool, FlushBarType, String)> _attemptChangePW() async {
    final String pw = passwordCurrentController.text;
    final String pwNew = passwordController.text;
    final String pwNewRepeat = passwordRepeatController.text;

    final verified = await ref
        .read(storageCryptoHandlerProvider)
        .verifyPassphrase(pw);

    if (verified) {
      if (pwNew != pwNewRepeat) {
        await Future<void>.delayed(const Duration(seconds: 1));

        return (false, FlushBarType.warning, "New passphrase does not match!");
      } else {
        final success = await ref
            .read(storageCryptoHandlerProvider)
            .changePassphrase(pw, pwNew);

        if (success) {
          await Future<void>.delayed(const Duration(seconds: 1));

          return (
            true,
            FlushBarType.success,
            "Passphrase successfully changed",
          );
        } else {
          await Future<void>.delayed(const Duration(seconds: 1));

          return (false, FlushBarType.warning, "Passphrase change failed");
        }
      }
    } else {
      await Future<void>.delayed(const Duration(seconds: 1));

      return (false, FlushBarType.warning, "Current passphrase is not valid!");
    }
  }

  @override
  void initState() {
    passwordCurrentController = TextEditingController();
    passwordController = TextEditingController();
    passwordRepeatController = TextEditingController();

    passwordCurrentFocusNode = FocusNode();
    passwordFocusNode = FocusNode();
    passwordRepeatFocusNode = FocusNode();

    super.initState();
  }

  @override
  void dispose() {
    passwordCurrentController.dispose();
    passwordController.dispose();
    passwordRepeatController.dispose();

    passwordCurrentFocusNode.dispose();
    passwordFocusNode.dispose();
    passwordRepeatFocusNode.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.only(right: 30),
          child: RoundedWhiteContainer(
            radiusMultiplier: 2,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: SvgPicture.asset(
                    Assets.svg.circleLock,
                    width: 48,
                    height: 48,
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(10),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        "Change Password",
                        style: STextStyles.desktopTextSmall(context),
                      ),
                      const SizedBox(height: 16),
                      Text(
                        "Protect your ${AppConfig.appName} with a strong password. ${AppConfig.appName} does not store "
                        "your password, and is therefore NOT able to restore it. Keep your password safe and secure.",
                        style: STextStyles.desktopTextExtraExtraSmall(context),
                      ),
                      const SizedBox(height: 20),
                      changePassword
                          ? SizedBox(
                            width: 512,
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                Text(
                                  "Current password",
                                  style: STextStyles.desktopTextExtraExtraSmall(
                                    context,
                                  ).copyWith(
                                    color:
                                        Theme.of(
                                          context,
                                        ).extension<StackColors>()!.textDark3,
                                  ),
                                  textAlign: TextAlign.left,
                                ),
                                const SizedBox(height: 10),
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(
                                    Constants.size.circularBorderRadius,
                                  ),
                                  child: TextField(
                                    key: const Key(
                                      "desktopSecurityRestoreFromFilePasswordFieldKey",
                                    ),
                                    focusNode: passwordCurrentFocusNode,
                                    controller: passwordCurrentController,
                                    style: STextStyles.field(context),
                                    obscureText: hidePassword,
                                    enableSuggestions: false,
                                    autocorrect: false,
                                    decoration: standardInputDecoration(
                                      "Enter current password",
                                      passwordCurrentFocusNode,
                                      context,
                                    ).copyWith(
                                      labelStyle: STextStyles.fieldLabel(
                                        context,
                                      ),
                                      suffixIcon: UnconstrainedBox(
                                        child: Row(
                                          children: [
                                            const SizedBox(width: 16),
                                            GestureDetector(
                                              key: const Key(
                                                "desktopSecurityRestoreFromFilePasswordFieldShowPasswordButtonKey",
                                              ),
                                              onTap: () async {
                                                setState(() {
                                                  hidePassword = !hidePassword;
                                                });
                                              },
                                              child: SvgPicture.asset(
                                                hidePassword
                                                    ? Assets.svg.eye
                                                    : Assets.svg.eyeSlash,
                                                color:
                                                    Theme.of(context)
                                                        .extension<
                                                          StackColors
                                                        >()!
                                                        .textDark3,
                                                width: 16,
                                                height: 16,
                                              ),
                                            ),
                                            const SizedBox(width: 12),
                                          ],
                                        ),
                                      ),
                                    ),
                                    onChanged: (newValue) {
                                      setState(() {});
                                    },
                                  ),
                                ),
                                const SizedBox(height: 16),
                                Text(
                                  "New password",
                                  style: STextStyles.desktopTextExtraExtraSmall(
                                    context,
                                  ).copyWith(
                                    color:
                                        Theme.of(
                                          context,
                                        ).extension<StackColors>()!.textDark3,
                                  ),
                                  textAlign: TextAlign.left,
                                ),
                                const SizedBox(height: 10),
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(
                                    Constants.size.circularBorderRadius,
                                  ),
                                  child: TextField(
                                    key: const Key(
                                      "desktopSecurityCreateNewPasswordFieldKey1",
                                    ),
                                    focusNode: passwordFocusNode,
                                    controller: passwordController,
                                    style: STextStyles.field(context),
                                    obscureText: hidePassword,
                                    enableSuggestions: false,
                                    autocorrect: false,
                                    decoration: standardInputDecoration(
                                      "Enter new password",
                                      passwordFocusNode,
                                      context,
                                    ).copyWith(
                                      labelStyle: STextStyles.fieldLabel(
                                        context,
                                      ),
                                      suffixIcon: UnconstrainedBox(
                                        child: Row(
                                          children: [
                                            const SizedBox(width: 16),
                                            GestureDetector(
                                              key: const Key(
                                                "desktopSecurityCreateNewPasswordButtonKey1",
                                              ),
                                              onTap: () async {
                                                setState(() {
                                                  hidePassword = !hidePassword;
                                                });
                                              },
                                              child: SvgPicture.asset(
                                                hidePassword
                                                    ? Assets.svg.eye
                                                    : Assets.svg.eyeSlash,
                                                color:
                                                    Theme.of(context)
                                                        .extension<
                                                          StackColors
                                                        >()!
                                                        .textDark3,
                                                width: 16,
                                                height: 16,
                                              ),
                                            ),
                                            const SizedBox(width: 12),
                                          ],
                                        ),
                                      ),
                                    ),
                                    onChanged: (newValue) {
                                      if (newValue.isEmpty) {
                                        setState(() {
                                          passwordFeedback = "";
                                        });
                                        return;
                                      }
                                      final result = zxcvbn.evaluate(newValue);
                                      String suggestionsAndTips = "";
                                      for (final sug
                                          in result.feedback.suggestions!
                                              .toSet()) {
                                        suggestionsAndTips += "$sug\n";
                                      }
                                      suggestionsAndTips +=
                                          result.feedback.warning!;
                                      String feedback =
                                          // "Password Strength: ${((result.score! / 4.0) * 100).toInt()}%\n"
                                          suggestionsAndTips;

                                      passwordStrength = result.score! / 4;

                                      // hack fix to format back string returned from zxcvbn
                                      if (feedback.contains("phrasesNo need")) {
                                        feedback = feedback.replaceFirst(
                                          "phrasesNo need",
                                          "phrases\nNo need",
                                        );
                                      }

                                      if (feedback.endsWith("\n")) {
                                        feedback = feedback.substring(
                                          0,
                                          feedback.length - 2,
                                        );
                                      }

                                      setState(() {
                                        passwordFeedback = feedback;
                                      });
                                    },
                                  ),
                                ),
                                if (passwordFocusNode.hasFocus ||
                                    passwordRepeatFocusNode.hasFocus ||
                                    passwordController.text.isNotEmpty)
                                  Padding(
                                    padding: EdgeInsets.only(
                                      left: 12,
                                      right: 12,
                                      top: passwordFeedback.isNotEmpty ? 4 : 0,
                                    ),
                                    child:
                                        passwordFeedback.isNotEmpty
                                            ? Text(
                                              passwordFeedback,
                                              style: STextStyles.infoSmall(
                                                context,
                                              ),
                                            )
                                            : null,
                                  ),
                                if (passwordFocusNode.hasFocus ||
                                    passwordRepeatFocusNode.hasFocus ||
                                    passwordController.text.isNotEmpty)
                                  Padding(
                                    padding: const EdgeInsets.only(
                                      left: 12,
                                      right: 12,
                                      top: 10,
                                    ),
                                    child: ProgressBar(
                                      key: const Key(
                                        "desktopSecurityCreateStackBackUpProgressBar",
                                      ),
                                      width: 450,
                                      height: 5,
                                      fillColor:
                                          passwordStrength < 0.51
                                              ? Theme.of(context)
                                                  .extension<StackColors>()!
                                                  .accentColorRed
                                              : passwordStrength < 1
                                              ? Theme.of(context)
                                                  .extension<StackColors>()!
                                                  .accentColorYellow
                                              : Theme.of(context)
                                                  .extension<StackColors>()!
                                                  .accentColorGreen,
                                      backgroundColor:
                                          Theme.of(context)
                                              .extension<StackColors>()!
                                              .buttonBackSecondary,
                                      percent:
                                          passwordStrength < 0.25
                                              ? 0.03
                                              : passwordStrength,
                                    ),
                                  ),
                                const SizedBox(height: 16),
                                Text(
                                  "Confirm new password",
                                  style: STextStyles.desktopTextExtraExtraSmall(
                                    context,
                                  ).copyWith(
                                    color:
                                        Theme.of(
                                          context,
                                        ).extension<StackColors>()!.textDark3,
                                  ),
                                  textAlign: TextAlign.left,
                                ),
                                const SizedBox(height: 10),
                                ClipRRect(
                                  borderRadius: BorderRadius.circular(
                                    Constants.size.circularBorderRadius,
                                  ),
                                  child: TextField(
                                    key: const Key(
                                      "desktopSecurityCreateNewPasswordFieldKey2",
                                    ),
                                    focusNode: passwordRepeatFocusNode,
                                    controller: passwordRepeatController,
                                    style: STextStyles.field(context),
                                    obscureText: hidePassword,
                                    enableSuggestions: false,
                                    autocorrect: false,
                                    decoration: standardInputDecoration(
                                      "Confirm new password",
                                      passwordRepeatFocusNode,
                                      context,
                                    ).copyWith(
                                      labelStyle: STextStyles.fieldLabel(
                                        context,
                                      ),
                                      suffixIcon: UnconstrainedBox(
                                        child: Row(
                                          children: [
                                            const SizedBox(width: 16),
                                            GestureDetector(
                                              key: const Key(
                                                "desktopSecurityCreateNewPasswordButtonKey2",
                                              ),
                                              onTap: () async {
                                                setState(() {
                                                  hidePassword = !hidePassword;
                                                });
                                              },
                                              child: SvgPicture.asset(
                                                hidePassword
                                                    ? Assets.svg.eye
                                                    : Assets.svg.eyeSlash,
                                                color:
                                                    Theme.of(context)
                                                        .extension<
                                                          StackColors
                                                        >()!
                                                        .textDark3,
                                                width: 16,
                                                height: 16,
                                              ),
                                            ),
                                            const SizedBox(width: 12),
                                          ],
                                        ),
                                      ),
                                    ),
                                    onChanged: (newValue) {
                                      setState(() {});
                                    },
                                  ),
                                ),
                                const SizedBox(height: 20),
                                PrimaryButton(
                                  width: 160,
                                  buttonHeight: ButtonHeight.l,
                                  enabled: shouldEnableSave,
                                  label: "Save changes",
                                  onPressed: () async {
                                    if (_changePWLock) {
                                      return;
                                    }
                                    _changePWLock = true;

                                    try {
                                      final (didChangePW, type, message) =
                                          (await showLoading(
                                            whileFuture: _attemptChangePW(),
                                            context: context,
                                            message: "Updating...",
                                            rootNavigator: true,
                                          ))!;

                                      if (mounted) {
                                        unawaited(
                                          showFloatingFlushBar(
                                            type: type,
                                            message: message,
                                            context: context,
                                          ),
                                        );
                                      }

                                      if (didChangePW == true) {
                                        setState(() {
                                          changePassword = false;
                                        });
                                      }
                                    } finally {
                                      _changePWLock = false;
                                    }
                                  },
                                ),
                              ],
                            ),
                          )
                          : PrimaryButton(
                            width: 210,
                            buttonHeight: ButtonHeight.m,
                            enabled: true,
                            label: "Set up new password",
                            onPressed: () {
                              setState(() {
                                changePassword = true;
                              });
                            },
                          ),

                      const Padding(
                        padding: EdgeInsets.all(10.0),
                        child: Divider(thickness: 0.5),
                      ),

                      Consumer(
                        builder: (_, ref, __) {
                          final autoLockInfo = ref.watch(
                            prefsChangeNotifierProvider.select(
                              (value) => value.autoLockInfo,
                            ),
                          );
                          return Padding(
                            padding: const EdgeInsets.all(10),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      "Auto lock timeout",
                                      style: STextStyles.desktopTextExtraSmall(
                                        context,
                                      ).copyWith(
                                        color:
                                            Theme.of(context)
                                                .extension<StackColors>()!
                                                .textDark,
                                      ),
                                      textAlign: TextAlign.left,
                                    ),
                                    Text(
                                      autoLockInfo.enabled
                                          ? "${autoLockInfo.minutes} minutes"
                                          : "Disabled",
                                      style:
                                          STextStyles.desktopTextExtraExtraSmall(
                                            context,
                                          ),
                                    ),
                                  ],
                                ),
                                PrimaryButton(
                                  buttonHeight: ButtonHeight.xs,
                                  label: "Edit",
                                  width: 101,
                                  onPressed: () async {
                                    await showDialog<dynamic>(
                                      context: context,
                                      useSafeArea: false,
                                      barrierDismissible: true,
                                      builder: (context) {
                                        return const DesktopAutolockTimeoutSettingsDialog();
                                      },
                                    );
                                  },
                                ),
                              ],
                            ),
                          );
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
}
