/*
 * This file is part of Stack Wallet.
 *
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:event_bus/event_bus.dart';
import 'package:flutter/gestures.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/flutter_svg.dart';

import '../../../../providers/global/prefs_provider.dart';
import '../../../../services/event_bus/events/global/tor_connection_status_changed_event.dart';
import '../../../../services/event_bus/global_event_bus.dart';
import '../../../../services/tor_service.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/assets.dart';
import '../../../../utilities/logger.dart';
import '../../../../utilities/stack_file_system.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../utilities/util.dart';
import '../../../../widgets/custom_buttons/draggable_switch_button.dart';
import '../../../../widgets/desktop/desktop_dialog.dart';
import '../../../../widgets/desktop/desktop_dialog_close_button.dart';
import '../../../../widgets/desktop/secondary_button.dart';
import '../../../../widgets/rounded_white_container.dart';

class TorSettings extends ConsumerStatefulWidget {
  const TorSettings({super.key});

  static const String routeName = "/torDesktopSettings";

  @override
  ConsumerState<TorSettings> createState() => _TorSettingsState();
}

class _TorSettingsState extends ConsumerState<TorSettings> {
  /// The global event bus.
  EventBus eventBus = GlobalEventBus.instance;

  /// Subscription to the TorConnectionStatusChangedEvent.
  late StreamSubscription<TorConnectionStatusChangedEvent>
      _torConnectionStatusSubscription;

  /// The current status of the Tor connection.
  late TorConnectionStatus _torConnectionStatus;

  /// Build the connect/disconnect button.
  Widget _buildConnectButton(TorConnectionStatus status) {
    switch (status) {
      case TorConnectionStatus.disconnected:
        return SecondaryButton(
          label: "Connect to Tor",
          width: 200,
          buttonHeight: ButtonHeight.m,
          onPressed: () async {
            try {
              // Init the Tor service if it hasn't already been.
              final torDir = await StackFileSystem.applicationTorDirectory();
              ref.read(pTorService).init(torDataDirPath: torDir.path);
              // Start the Tor service.
              await ref.read(pTorService).start();

              // Toggle the useTor preference on success.
              ref.read(prefsChangeNotifierProvider).useTor = true;
            } catch (e, s) {
              Logging.instance.e("Error starting tor: ", error: e, stackTrace: s);
              // TODO: show dialog with error message
            }
          },
        );
      case TorConnectionStatus.connecting:
        return AbsorbPointer(
          child: SecondaryButton(
            label: "Connecting to Tor",
            width: 200,
            buttonHeight: ButtonHeight.m,
            onPressed: () {},
          ),
        );
      case TorConnectionStatus.connected:
        return SecondaryButton(
          label: "Disconnect from Tor",
          width: 200,
          buttonHeight: ButtonHeight.m,
          onPressed: () async {
            // Stop the Tor service.
            try {
              await ref.read(pTorService).disable();

              // Toggle the useTor preference on success.
              ref.read(prefsChangeNotifierProvider).useTor = false;
            } catch (e, s) {
              Logging.instance.e("Error stopping tor: ", error: e, stackTrace: s);
            }
          },
        );
    }
  }

  @override
  void initState() {
    // Initialize the global event bus.
    eventBus = GlobalEventBus.instance;

    // Set the initial Tor connection status.
    _torConnectionStatus = ref.read(pTorService).status;

    // Subscribe to the TorConnectionStatusChangedEvent.
    _torConnectionStatusSubscription =
        eventBus.on<TorConnectionStatusChangedEvent>().listen(
      (event) async {
        // Rebuild the widget.
        setState(() {
          _torConnectionStatus = event.newStatus;
        });
      },
    );

    super.initState();
  }

  @override
  void dispose() {
    // Clean up the TorConnectionStatusChangedEvent subscription.
    _torConnectionStatusSubscription.cancel();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final isDesktop = Util.isDesktop;

    /// todo: redo the padding
    return Column(
      children: [
        Padding(
          padding: const EdgeInsets.only(
            right: 30,
          ),
          child: RoundedWhiteContainer(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: SvgPicture.asset(
                        Assets.svg.circleTor,
                        width: 48,
                        height: 48,
                      ),
                    ),
                    Padding(
                      padding: const EdgeInsets.all(8.0),
                      child: SvgPicture.asset(
                        _torConnectionStatus == TorConnectionStatus.connected
                            ? Assets.svg.connectedButton
                            : _torConnectionStatus ==
                                    TorConnectionStatus.connecting
                                ? Assets.svg.connectingButton
                                : Assets.svg.disconnectedButton,
                        width: 48,
                        height: 48,
                      ),
                    ),
                  ],
                ),
                Padding(
                  padding: const EdgeInsets.all(10),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        "Tor settings",
                        style: STextStyles.desktopTextSmall(context),
                      ),
                      RichText(
                        textAlign: TextAlign.start,
                        text: TextSpan(
                          children: [
                            TextSpan(
                              text:
                                  "\nConnect to the Tor Network with one click.",
                              style: STextStyles.desktopTextExtraExtraSmall(
                                context,
                              ),
                            ),
                            TextSpan(
                              text: "\tWhat is Tor?",
                              style: STextStyles.richLink(context).copyWith(
                                fontSize: 14,
                              ),
                              recognizer: TapGestureRecognizer()
                                ..onTap = () {
                                  showDialog<dynamic>(
                                    context: context,
                                    useSafeArea: false,
                                    barrierDismissible: true,
                                    builder: (context) {
                                      return DesktopDialog(
                                        maxWidth: 580,
                                        maxHeight: double.infinity,
                                        child: Padding(
                                          padding: const EdgeInsets.only(
                                            top: 10,
                                            left: 20,
                                            bottom: 20,
                                            right: 10,
                                          ),
                                          child: Column(
                                            children: [
                                              Row(
                                                mainAxisAlignment:
                                                    MainAxisAlignment
                                                        .spaceBetween,
                                                children: [
                                                  Text(
                                                    "What is Tor?",
                                                    style:
                                                        STextStyles.desktopH2(
                                                      context,
                                                    ),
                                                  ),
                                                  DesktopDialogCloseButton(
                                                    onPressedOverride: () =>
                                                        Navigator.of(context)
                                                            .pop(true),
                                                  ),
                                                ],
                                              ),
                                              const SizedBox(
                                                height: 16,
                                              ),
                                              Text(
                                                "Short for \"The Onion Router\", is an open-source software that enables internet communication"
                                                " to remain anonymous by routing internet traffic through a series of layered nodes,"
                                                " to obscure the origin and destination of data.",
                                                style: STextStyles
                                                    .desktopTextMedium(
                                                  context,
                                                ).copyWith(
                                                  color: Theme.of(context)
                                                      .extension<StackColors>()!
                                                      .textDark3,
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      );
                                    },
                                  );
                                },
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(
                  height: 10,
                ),
                Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: _buildConnectButton(_torConnectionStatus),
                ),
                const SizedBox(
                  height: 30,
                ),
                Padding(
                  padding: const EdgeInsets.all(10.0),
                  child: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            "Tor killswitch",
                            style:
                                STextStyles.desktopTextExtraExtraSmall(context)
                                    .copyWith(
                              color: Theme.of(context)
                                  .extension<StackColors>()!
                                  .textDark,
                            ),
                          ),
                          const SizedBox(
                            height: 8,
                          ),
                          RichText(
                            textAlign: TextAlign.start,
                            text: TextSpan(
                              text: "What is Tor killswitch?",
                              style: STextStyles.richLink(context).copyWith(
                                fontSize: 14,
                              ),
                              recognizer: TapGestureRecognizer()
                                ..onTap = () {
                                  showDialog<dynamic>(
                                    context: context,
                                    useSafeArea: false,
                                    barrierDismissible: true,
                                    builder: (context) {
                                      return DesktopDialog(
                                        maxWidth: 580,
                                        maxHeight: double.infinity,
                                        child: Padding(
                                          padding: const EdgeInsets.only(
                                            top: 10,
                                            left: 20,
                                            bottom: 20,
                                            right: 10,
                                          ),
                                          child: Column(
                                            children: [
                                              Row(
                                                mainAxisAlignment:
                                                    MainAxisAlignment
                                                        .spaceBetween,
                                                children: [
                                                  Text(
                                                    "What is Tor killswitch?",
                                                    style:
                                                        STextStyles.desktopH2(
                                                      context,
                                                    ),
                                                  ),
                                                  DesktopDialogCloseButton(
                                                    onPressedOverride: () =>
                                                        Navigator.of(context)
                                                            .pop(true),
                                                  ),
                                                ],
                                              ),
                                              const SizedBox(
                                                height: 16,
                                              ),
                                              Text(
                                                "A security feature that protects your information from accidental exposure by"
                                                " disconnecting your device from the Tor network if the"
                                                " connection is disrupted or compromised.",
                                                style: STextStyles
                                                    .desktopTextMedium(
                                                  context,
                                                ).copyWith(
                                                  color: Theme.of(context)
                                                      .extension<StackColors>()!
                                                      .textDark3,
                                                ),
                                              ),
                                            ],
                                          ),
                                        ),
                                      );
                                    },
                                  );
                                },
                            ),
                          ),
                        ],
                      ),
                      const Spacer(),
                      SizedBox(
                        height: 20,
                        width: 40,
                        child: DraggableSwitchButton(
                          isOn: ref.watch(
                            prefsChangeNotifierProvider
                                .select((value) => value.torKillSwitch),
                          ),
                          onValueChanged: (newValue) {
                            ref
                                .read(prefsChangeNotifierProvider)
                                .torKillSwitch = newValue;
                          },
                        ),
                      ),
                      const SizedBox(
                        height: 10,
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
}
