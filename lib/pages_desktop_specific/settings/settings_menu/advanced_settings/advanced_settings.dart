/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../../../app_config.dart';
import '../../../../pages/settings_views/global_settings_view/advanced_views/manage_coin_units/manage_coin_units_view.dart';
import '../../../../providers/global/prefs_provider.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/assets.dart';
import '../../../../utilities/constants.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../widgets/custom_buttons/draggable_switch_button.dart';
import '../../../../widgets/desktop/primary_button.dart';
import '../../../../widgets/rounded_white_container.dart';
import 'debug_info_dialog.dart';
import 'desktop_manage_block_explorers_dialog.dart';
import 'stack_privacy_dialog.dart';

class AdvancedSettings extends ConsumerStatefulWidget {
  const AdvancedSettings({super.key});

  static const String routeName = "/settingsMenuAdvanced";

  @override
  ConsumerState<AdvancedSettings> createState() => _AdvancedSettings();
}

class _AdvancedSettings extends ConsumerState<AdvancedSettings> {
  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");
    return SingleChildScrollView(
      child: Column(
        children: [
          Padding(
            padding: const EdgeInsets.only(
              right: 30,
            ),
            child: RoundedWhiteContainer(
              radiusMultiplier: 2,
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Padding(
                    padding: const EdgeInsets.all(8.0),
                    child: SvgPicture.asset(
                      Assets.svg.circleSliders,
                      width: 48,
                      height: 48,
                    ),
                  ),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.stretch,
                    children: [
                      Padding(
                        padding: const EdgeInsets.all(10),
                        child: RichText(
                          textAlign: TextAlign.start,
                          text: TextSpan(
                            children: [
                              TextSpan(
                                text: "Advanced",
                                style: STextStyles.desktopTextSmall(context),
                              ),
                              TextSpan(
                                text:
                                    "\n\nConfigure these settings only if you know what you are doing!",
                                style: STextStyles.desktopTextExtraExtraSmall(
                                  context,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ),
                      const Padding(
                        padding: EdgeInsets.all(10.0),
                        child: Divider(
                          thickness: 0.5,
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              "Toggle testnet coins",
                              style: STextStyles.desktopTextExtraSmall(context)
                                  .copyWith(
                                color: Theme.of(context)
                                    .extension<StackColors>()!
                                    .textDark,
                              ),
                              textAlign: TextAlign.left,
                            ),
                            SizedBox(
                              height: 20,
                              width: 40,
                              child: DraggableSwitchButton(
                                isOn: ref.watch(
                                  prefsChangeNotifierProvider.select(
                                    (value) => value.showTestNetCoins,
                                  ),
                                ),
                                onValueChanged: (newValue) {
                                  ref
                                      .read(prefsChangeNotifierProvider)
                                      .showTestNetCoins = newValue;
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                      const Padding(
                        padding: EdgeInsets.all(10.0),
                        child: Divider(
                          thickness: 0.5,
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(10),
                        child: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text(
                              "Enable coin control",
                              style: STextStyles.desktopTextExtraSmall(context)
                                  .copyWith(
                                color: Theme.of(context)
                                    .extension<StackColors>()!
                                    .textDark,
                              ),
                              textAlign: TextAlign.left,
                            ),
                            SizedBox(
                              height: 20,
                              width: 40,
                              child: DraggableSwitchButton(
                                isOn: ref.watch(
                                  prefsChangeNotifierProvider.select(
                                    (value) => value.enableCoinControl,
                                  ),
                                ),
                                onValueChanged: (newValue) {
                                  ref
                                      .read(prefsChangeNotifierProvider)
                                      .enableCoinControl = newValue;
                                },
                              ),
                            ),
                          ],
                        ),
                      ),
                      // showExchange pref.
                      if (Constants.enableExchange)
                        const Padding(
                          padding: EdgeInsets.all(10.0),
                          child: Divider(
                            thickness: 0.5,
                          ),
                        ),
                      if (Constants.enableExchange)
                        Padding(
                          padding: const EdgeInsets.all(10),
                          child: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceBetween,
                            children: [
                              Text(
                                "Enable exchange features",
                                style:
                                    STextStyles.desktopTextExtraSmall(context)
                                        .copyWith(
                                  color: Theme.of(context)
                                      .extension<StackColors>()!
                                      .textDark,
                                ),
                                textAlign: TextAlign.left,
                              ),
                              SizedBox(
                                height: 20,
                                width: 40,
                                child: DraggableSwitchButton(
                                  isOn: ref.watch(
                                    prefsChangeNotifierProvider.select(
                                      (value) => value.enableExchange,
                                    ),
                                  ),
                                  onValueChanged: (newValue) {
                                    ref
                                        .read(prefsChangeNotifierProvider)
                                        .enableExchange = newValue;
                                  },
                                ),
                              ),
                            ],
                          ),
                        ),
                      const Padding(
                        padding: EdgeInsets.all(10.0),
                        child: Divider(
                          thickness: 0.5,
                        ),
                      ),

                      /// TODO: Make a dialog popup
                      Consumer(
                        builder: (_, ref, __) {
                          final externalCalls = ref.watch(
                            prefsChangeNotifierProvider
                                .select((value) => value.externalCalls),
                          );
                          return Padding(
                            padding: const EdgeInsets.all(10),
                            child: Row(
                              mainAxisAlignment: MainAxisAlignment.spaceBetween,
                              children: [
                                Column(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    Text(
                                      "${AppConfig.prefix} Experience",
                                      style: STextStyles.desktopTextExtraSmall(
                                        context,
                                      ).copyWith(
                                        color: Theme.of(context)
                                            .extension<StackColors>()!
                                            .textDark,
                                      ),
                                      textAlign: TextAlign.left,
                                    ),
                                    Text(
                                      externalCalls
                                          ? "Easy crypto"
                                          : "Incognito",
                                      style: STextStyles
                                          .desktopTextExtraExtraSmall(
                                        context,
                                      ),
                                    ),
                                  ],
                                ),
                                PrimaryButton(
                                  label: "Change",
                                  buttonHeight: ButtonHeight.xs,
                                  width: 101,
                                  onPressed: () async {
                                    await showDialog<dynamic>(
                                      context: context,
                                      useSafeArea: false,
                                      barrierDismissible: true,
                                      builder: (context) {
                                        return const StackPrivacyDialog();
                                      },
                                    );
                                  },
                                ),
                              ],
                            ),
                          );
                        },
                      ),
                    ],
                  ),
                  const Padding(
                    padding: EdgeInsets.all(10.0),
                    child: Divider(
                      thickness: 0.5,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          "Block explorers",
                          style: STextStyles.desktopTextExtraSmall(context)
                              .copyWith(
                            color: Theme.of(context)
                                .extension<StackColors>()!
                                .textDark,
                          ),
                          textAlign: TextAlign.left,
                        ),
                        PrimaryButton(
                          buttonHeight: ButtonHeight.xs,
                          label: "Edit",
                          width: 101,
                          onPressed: () async {
                            await showDialog<dynamic>(
                              context: context,
                              useSafeArea: false,
                              barrierDismissible: true,
                              builder: (context) {
                                return const DesktopManageBlockExplorersDialog();
                              },
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                  const Padding(
                    padding: EdgeInsets.all(10.0),
                    child: Divider(
                      thickness: 0.5,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          "Units",
                          style: STextStyles.desktopTextExtraSmall(context)
                              .copyWith(
                            color: Theme.of(context)
                                .extension<StackColors>()!
                                .textDark,
                          ),
                          textAlign: TextAlign.left,
                        ),
                        PrimaryButton(
                          buttonHeight: ButtonHeight.xs,
                          label: "Edit",
                          width: 101,
                          onPressed: () async {
                            await showDialog<dynamic>(
                              context: context,
                              useSafeArea: false,
                              barrierDismissible: true,
                              builder: (context) {
                                return const ManageCoinUnitsView();
                              },
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                  const Padding(
                    padding: EdgeInsets.all(10.0),
                    child: Divider(
                      thickness: 0.5,
                    ),
                  ),
                  Padding(
                    padding: const EdgeInsets.all(10),
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          "Debug info",
                          style: STextStyles.desktopTextExtraSmall(context)
                              .copyWith(
                            color: Theme.of(context)
                                .extension<StackColors>()!
                                .textDark,
                          ),
                          textAlign: TextAlign.left,
                        ),
                        PrimaryButton(
                          buttonHeight: ButtonHeight.xs,
                          label: "Show logs",
                          width: 101,
                          onPressed: () async {
                            await showDialog<dynamic>(
                              context: context,
                              useSafeArea: false,
                              barrierDismissible: true,
                              builder: (context) {
                                return const DebugInfoDialog();
                              },
                            );
                          },
                        ),
                      ],
                    ),
                  ),
                  const SizedBox(
                    height: 10,
                  ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }
}
