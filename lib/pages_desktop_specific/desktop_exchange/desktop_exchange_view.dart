/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../pages/exchange_view/exchange_form.dart';
import '../../providers/exchange/exchange_form_state_provider.dart';
import '../../providers/global/prefs_provider.dart';
import '../../services/exchange/exchange_data_loading_service.dart';
import '../../themes/stack_colors.dart';
import '../../utilities/text_styles.dart';
import '../../widgets/conditional_parent.dart';
import '../../widgets/custom_buttons/blue_text_button.dart';
import '../../widgets/custom_loading_overlay.dart';
import '../../widgets/desktop/desktop_app_bar.dart';
import '../../widgets/desktop/desktop_scaffold.dart';
import '../../widgets/rounded_white_container.dart';
import 'desktop_all_trades_view.dart';
import 'subwidgets/desktop_trade_history.dart';

class DesktopExchangeView extends ConsumerStatefulWidget {
  const DesktopExchangeView({super.key});

  static const String routeName = "/desktopExchange";

  @override
  ConsumerState<DesktopExchangeView> createState() =>
      _DesktopExchangeViewState();
}

class _DesktopExchangeViewState extends ConsumerState<DesktopExchangeView> {
  bool _initialCachePopulationUnderway = false;

  @override
  void initState() {
    if (!ref.read(prefsChangeNotifierProvider).externalCalls) {
      if (ExchangeDataLoadingService.currentCacheVersion <
          ExchangeDataLoadingService.cacheVersion) {
        _initialCachePopulationUnderway = true;
        ExchangeDataLoadingService.instance.onLoadingComplete = () {
          WidgetsBinding.instance.addPostFrameCallback((timeStamp) async {
            await ExchangeDataLoadingService.instance.setCurrenciesIfEmpty(
              ref.read(efCurrencyPairProvider),
              ref.read(efRateTypeProvider),
            );
            setState(() {
              _initialCachePopulationUnderway = false;
            });
          });
        };
      }
      ExchangeDataLoadingService.instance.loadAll();
    } else if (ExchangeDataLoadingService.instance.isLoading &&
        ExchangeDataLoadingService.currentCacheVersion <
            ExchangeDataLoadingService.cacheVersion) {
      _initialCachePopulationUnderway = true;
      ExchangeDataLoadingService.instance.onLoadingComplete = () {
        WidgetsBinding.instance.addPostFrameCallback((timeStamp) async {
          await ExchangeDataLoadingService.instance.setCurrenciesIfEmpty(
            ref.read(efCurrencyPairProvider),
            ref.read(efRateTypeProvider),
          );
          setState(() {
            _initialCachePopulationUnderway = false;
          });
        });
      };
    }

    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return ConditionalParent(
      condition: _initialCachePopulationUnderway,
      builder: (child) {
        return Stack(
          children: [
            child,
            Material(
              color: Theme.of(
                context,
              ).extension<StackColors>()!.overlay.withOpacity(0.6),
              child: const CustomLoadingOverlay(
                message: "Updating exchange data",
                subMessage: "This could take a few minutes",
              ),
            ),
          ],
        );
      },
      child: DesktopScaffold(
        appBar: DesktopAppBar(
          isCompactHeight: true,
          leading: Padding(
            padding: const EdgeInsets.only(left: 24),
            child: Text("Swap", style: STextStyles.desktopH3(context)),
          ),
        ),
        body: Padding(
          padding: const EdgeInsets.only(left: 24, right: 24, bottom: 24),
          child: Column(
            children: [
              Row(
                children: [
                  Expanded(
                    child: Text(
                      "Exchange details",
                      style: STextStyles.desktopTextExtraExtraSmall(context),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Row(
                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
                      children: [
                        Text(
                          "Recent trades",
                          style: STextStyles.desktopTextExtraExtraSmall(
                            context,
                          ),
                        ),
                        CustomTextButton(
                          text: "See all",
                          onTap: () {
                            Navigator.of(
                              context,
                            ).pushNamed(DesktopAllTradesView.routeName);
                          },
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Expanded(
                child: Row(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Expanded(
                      child: ListView(
                        children: const [
                          RoundedWhiteContainer(
                            padding: EdgeInsets.all(24),
                            child: ExchangeForm(),
                          ),
                        ],
                      ),
                    ),
                    const SizedBox(width: 16),
                    const Expanded(
                      child: Row(
                        children: [Expanded(child: DesktopTradeHistory())],
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
