/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../providers/db/main_db_provider.dart';
import '../../themes/stack_colors.dart';
import '../../utilities/assets.dart';
import '../../utilities/text_styles.dart';
import '../../utilities/util.dart';
import '../../wallets/isar/models/spark_coin.dart';
import '../../widgets/background.dart';
import '../../widgets/conditional_parent.dart';
import '../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../widgets/desktop/desktop_app_bar.dart';
import '../../widgets/desktop/desktop_scaffold.dart';
import '../../widgets/isar_collection_watcher_list.dart';

class SparkCoinsView extends ConsumerWidget {
  const SparkCoinsView({
    super.key,
    required this.walletId,
  });

  static const title = "Spark coins";
  static const String routeName = "/sparkCoinsView";

  final String walletId;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return ConditionalParent(
      condition: Util.isDesktop,
      builder: (child) {
        return DesktopScaffold(
          appBar: DesktopAppBar(
            background: Theme.of(context).extension<StackColors>()!.popupBG,
            leading: Expanded(
              child: Row(
                children: [
                  const SizedBox(
                    width: 32,
                  ),
                  AppBarIconButton(
                    size: 32,
                    color: Theme.of(context)
                        .extension<StackColors>()!
                        .textFieldDefaultBG,
                    shadows: const [],
                    icon: SvgPicture.asset(
                      Assets.svg.arrowLeft,
                      width: 18,
                      height: 18,
                      color: Theme.of(context)
                          .extension<StackColors>()!
                          .topNavIconPrimary,
                    ),
                    onPressed: Navigator.of(context).pop,
                  ),
                  const SizedBox(
                    width: 12,
                  ),
                  Text(
                    title,
                    style: STextStyles.desktopH3(context),
                  ),
                  const Spacer(),
                ],
              ),
            ),
            useSpacers: false,
            isCompactHeight: true,
          ),
          body: Padding(
            padding: const EdgeInsets.all(24),
            child: child,
          ),
        );
      },
      child: ConditionalParent(
        condition: !Util.isDesktop,
        builder: (child) {
          return Background(
            child: Scaffold(
              backgroundColor:
                  Theme.of(context).extension<StackColors>()!.background,
              appBar: AppBar(
                automaticallyImplyLeading: false,
                leading: AppBarBackButton(
                  onPressed: () => Navigator.of(context).pop(),
                ),
                title: Text(
                  title,
                  style: STextStyles.navBarTitle(context),
                ),
              ),
              body: SafeArea(
                child: child,
              ),
            ),
          );
        },
        child: IsarCollectionWatcherList(
          itemName: title,
          queryBuilder: () => ref
              .read(mainDBProvider)
              .isar
              .sparkCoins
              .where()
              .walletIdEqualToAnyLTagHash(walletId)
              .sortByHeightDesc(),
          itemBuilder: (SparkCoin? coin) {
            return [
              ("TXID", coin?.txHash ?? "", 9),
              ("LTag Hash", coin?.lTagHash ?? "", 9),
              ("Address", coin?.address ?? "", 9),
              ("Memo", coin?.memo ?? "", 4),
              ("Value (sats)", coin?.value.toString() ?? "", 3),
              ("Height", coin?.height.toString() ?? "", 2),
              ("Group ID", coin?.groupId.toString() ?? "", 2),
              ("Type", coin?.type.name ?? "", 2),
              ("Used", coin?.isUsed.toString() ?? "", 2),
            ];
          },
        ),
      ),
    );
  }
}
