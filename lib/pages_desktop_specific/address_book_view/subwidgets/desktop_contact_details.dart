/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/flutter_svg.dart';
import 'package:isar_community/isar.dart';
import 'package:tuple/tuple.dart';

import '../../../models/isar/models/contact_entry.dart';
import '../../../models/isar/models/isar_models.dart';
import '../../../pages/address_book_views/subviews/add_new_contact_address_view.dart';
import '../../../providers/db/main_db_provider.dart';
import '../../../providers/global/address_book_service_provider.dart';
import '../../../providers/ui/address_book_providers/address_entry_data_provider.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/assets.dart';
import '../../../utilities/text_styles.dart';
import '../../../widgets/app_icon.dart';
import '../../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../../widgets/custom_buttons/blue_text_button.dart';
import '../../../widgets/desktop/desktop_dialog.dart';
import '../../../widgets/desktop/secondary_button.dart';
import '../../../widgets/loading_indicator.dart';
import '../../../widgets/rounded_white_container.dart';
import '../../../widgets/transaction_card.dart';
import 'desktop_address_card.dart';
import 'desktop_contact_options_menu_popup.dart';

class DesktopContactDetails extends ConsumerStatefulWidget {
  const DesktopContactDetails({super.key, required this.contactId});

  final String contactId;

  @override
  ConsumerState<DesktopContactDetails> createState() =>
      _DesktopContactDetailsState();
}

class _DesktopContactDetailsState extends ConsumerState<DesktopContactDetails> {
  List<Tuple2<String, Transaction>> _cachedTransactions = [];

  Future<List<Tuple2<String, Transaction>>>
  _filteredTransactionsByContact() async {
    final contact = ref
        .read(addressBookServiceProvider)
        .getContactById(widget.contactId);

    // TODO: optimise

    final transactions =
        await ref
            .read(mainDBProvider)
            .isar
            .transactions
            .where()
            .filter()
            .anyOf(
              contact.addresses.map((e) => e.address),
              (q, String e) => q.address((q) => q.valueEqualTo(e)),
            )
            .sortByTimestampDesc()
            .findAll();

    final List<Tuple2<String, Transaction>> result = [];

    for (final tx in transactions) {
      result.add(Tuple2(tx.walletId, tx));
    }

    // sort by date
    result.sort((a, b) => b.item2.timestamp - a.item2.timestamp);

    return result;
  }

  @override
  Widget build(BuildContext context) {
    // provider hack to prevent trying to update widget with deleted contact
    ContactEntry? _contact;
    try {
      _contact = ref.watch(
        addressBookServiceProvider.select(
          (value) => value.getContactById(widget.contactId),
        ),
      );
    } catch (_) {
      return Container();
    }

    final contact = _contact!;

    return Row(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Expanded(
          child: RoundedWhiteContainer(
            padding: const EdgeInsets.all(24),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Row(
                      children: [
                        Container(
                          width: 32,
                          height: 32,
                          decoration: BoxDecoration(
                            color:
                                contact.customId == "default"
                                    ? Colors.transparent
                                    : Theme.of(context)
                                        .extension<StackColors>()!
                                        .textFieldDefaultBG,
                            borderRadius: BorderRadius.circular(32),
                          ),
                          child:
                              contact.customId == "default"
                                  ? const Center(child: AppIcon(width: 32))
                                  : contact.emojiChar != null
                                  ? Center(child: Text(contact.emojiChar!))
                                  : Center(
                                    child: SvgPicture.asset(
                                      Assets.svg.user,
                                      width: 18,
                                    ),
                                  ),
                        ),
                        const SizedBox(width: 16),
                        Text(
                          contact.name,
                          style: STextStyles.desktopTextSmall(context),
                        ),
                      ],
                    ),
                    if (widget.contactId != "default")
                      SecondaryButton(
                        label: "Options",
                        width: 96,
                        buttonHeight: ButtonHeight.xxs,
                        onPressed: () async {
                          await showDialog<void>(
                            context: context,
                            barrierColor: Colors.transparent,
                            builder: (context) {
                              return DesktopContactOptionsMenuPopup(
                                contactId: contact.customId,
                              );
                            },
                          );
                        },
                      ),
                  ],
                ),
                const SizedBox(height: 24),
                Flexible(
                  child: ListView(
                    primary: false,
                    shrinkWrap: true,
                    // child: Column(
                    //   crossAxisAlignment: CrossAxisAlignment.start,
                    //   mainAxisSize: MainAxisSize.min,
                    children: [
                      Row(
                        mainAxisAlignment: MainAxisAlignment.spaceBetween,
                        children: [
                          Text(
                            "Addresses",
                            style: STextStyles.desktopTextExtraExtraSmall(
                              context,
                            ),
                          ),
                          CustomTextButton(
                            text: "Add new",
                            onTap: () async {
                              ref.refresh(
                                addressEntryDataProviderFamilyRefresher,
                              );

                              await showDialog<void>(
                                context: context,
                                builder:
                                    (context) => DesktopDialog(
                                      maxWidth: 580,
                                      maxHeight: 566,
                                      child: Column(
                                        children: [
                                          Row(
                                            children: [
                                              const SizedBox(width: 8),
                                              const AppBarBackButton(
                                                isCompact: true,
                                              ),
                                              Text(
                                                "Add new address",
                                                style: STextStyles.desktopH3(
                                                  context,
                                                ),
                                              ),
                                            ],
                                          ),
                                          Expanded(
                                            child: Padding(
                                              padding: const EdgeInsets.only(
                                                top: 20,
                                                left: 32,
                                                right: 32,
                                                bottom: 32,
                                              ),
                                              child: AddNewContactAddressView(
                                                contactId: widget.contactId,
                                              ),
                                            ),
                                          ),
                                        ],
                                      ),
                                    ),
                              );
                            },
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),
                      RoundedWhiteContainer(
                        padding: const EdgeInsets.all(0),
                        borderColor:
                            Theme.of(
                              context,
                            ).extension<StackColors>()!.background,
                        child: Column(
                          mainAxisSize: MainAxisSize.min,
                          children: [
                            for (
                              int i = 0;
                              i < contact.addressesSorted.length;
                              i++
                            )
                              Column(
                                mainAxisSize: MainAxisSize.min,
                                children: [
                                  if (i > 0)
                                    Container(
                                      color:
                                          Theme.of(context)
                                              .extension<StackColors>()!
                                              .background,
                                      height: 1,
                                    ),
                                  Padding(
                                    padding: const EdgeInsets.all(18),
                                    child: DesktopAddressCard(
                                      entry: contact.addressesSorted[i],
                                      contactId: contact.customId,
                                    ),
                                  ),
                                ],
                              ),
                          ],
                        ),
                      ),
                      Padding(
                        padding: const EdgeInsets.only(top: 20, bottom: 12),
                        child: Text(
                          "Transaction history",
                          style: STextStyles.desktopTextExtraExtraSmall(
                            context,
                          ),
                        ),
                      ),
                      FutureBuilder(
                        future: _filteredTransactionsByContact(),
                        builder: (
                          _,
                          AsyncSnapshot<List<Tuple2<String, Transaction>>>
                          snapshot,
                        ) {
                          if (snapshot.connectionState ==
                                  ConnectionState.done &&
                              snapshot.hasData) {
                            _cachedTransactions = snapshot.data!;

                            if (_cachedTransactions.isNotEmpty) {
                              return RoundedWhiteContainer(
                                padding: const EdgeInsets.all(0),
                                borderColor:
                                    Theme.of(
                                      context,
                                    ).extension<StackColors>()!.background,
                                child: Column(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    ..._cachedTransactions.map(
                                      (e) => TransactionCard(
                                        key: Key(
                                          "contactDetailsTransaction_${e.item1}_${e.item2.txid}_cardKey",
                                        ),
                                        transaction: e.item2,
                                        walletId: e.item1,
                                      ),
                                    ),
                                  ],
                                ),
                              );
                            } else {
                              return RoundedWhiteContainer(
                                child: Center(
                                  child: Text(
                                    "No transactions found",
                                    style: STextStyles.itemSubtitle(context),
                                  ),
                                ),
                              );
                            }
                          } else {
                            // TODO: proper loading animation
                            if (_cachedTransactions.isEmpty) {
                              return const LoadingIndicator();
                            } else {
                              return RoundedWhiteContainer(
                                padding: const EdgeInsets.all(0),
                                borderColor:
                                    Theme.of(
                                      context,
                                    ).extension<StackColors>()!.background,
                                child: Column(
                                  mainAxisSize: MainAxisSize.min,
                                  children: [
                                    ..._cachedTransactions.map(
                                      (e) => TransactionCard(
                                        key: Key(
                                          "contactDetailsTransaction_${e.item1}_${e.item2.txid}_cardKey",
                                        ),
                                        transaction: e.item2,
                                        walletId: e.item1,
                                      ),
                                    ),
                                  ],
                                ),
                              );
                            }
                          }
                        },
                      ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
      ],
    );
  }
}
