/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:io';

import 'package:decimal/decimal.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../../models/paynym/paynym_account_lite.dart';
import '../../../models/send_view_auto_fill_data.dart';
import '../../../providers/global/locale_provider.dart';
import '../../../providers/global/prefs_provider.dart';
import '../../../providers/global/price_provider.dart';
import '../../../themes/coin_icon_provider.dart';
import '../../../themes/stack_colors.dart';
import '../../../utilities/amount/amount.dart';
import '../../../utilities/amount/amount_formatter.dart';
import '../../../utilities/barcode_scanner_interface.dart';
import '../../../utilities/clipboard_interface.dart';
import '../../../utilities/text_styles.dart';
import '../../../wallets/isar/providers/wallet_info_provider.dart';
import '../../../widgets/desktop/desktop_dialog.dart';
import '../../../widgets/desktop/desktop_dialog_close_button.dart';
import '../../../widgets/rounded_white_container.dart';
import '../wallet_view/sub_widgets/desktop_send.dart';

class DesktopPaynymSendDialog extends ConsumerStatefulWidget {
  const DesktopPaynymSendDialog({
    super.key,
    required this.walletId,
    this.autoFillData,
    this.clipboard = const ClipboardWrapper(),
    this.barcodeScanner = const BarcodeScannerWrapper(),
    this.accountLite,
  });

  final String walletId;
  final SendViewAutoFillData? autoFillData;
  final ClipboardInterface clipboard;
  final BarcodeScannerInterface barcodeScanner;
  final PaynymAccountLite? accountLite;

  @override
  ConsumerState<DesktopPaynymSendDialog> createState() =>
      _DesktopPaynymSendDialogState();
}

class _DesktopPaynymSendDialogState
    extends ConsumerState<DesktopPaynymSendDialog> {
  @override
  Widget build(BuildContext context) {
    final String locale = ref.watch(
      localeServiceChangeNotifierProvider.select((value) => value.locale),
    );

    final coin = ref.watch(pWalletCoin(widget.walletId));

    Decimal? price;
    if (ref.watch(prefsChangeNotifierProvider.select((s) => s.externalCalls))) {
      price = ref.watch(
        priceAnd24hChangeNotifierProvider.select(
          (value) => value.getPrice(coin)?.value,
        ),
      );
    }

    return DesktopDialog(
      maxHeight: double.infinity,
      maxWidth: 580,
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceBetween,
            children: [
              Padding(
                padding: const EdgeInsets.only(left: 32),
                child: Text(
                  "Send ${coin.ticker}",
                  style: STextStyles.desktopH3(context),
                ),
              ),
              const DesktopDialogCloseButton(),
            ],
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 32),
            child: RoundedWhiteContainer(
              borderColor:
                  Theme.of(context).extension<StackColors>()!.background,
              // Theme.of(context).extension<StackColors>()!.textSubtitle4,
              child: Row(
                children: [
                  SvgPicture.file(
                    File(ref.watch(coinIconProvider(coin))),
                    width: 36,
                    height: 36,
                  ),
                  const SizedBox(width: 12),
                  Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        ref.watch(pWalletName(widget.walletId)),
                        style: STextStyles.titleBold12(context),
                        overflow: TextOverflow.ellipsis,
                        maxLines: 1,
                      ),
                      const SizedBox(height: 2),
                      Text(
                        "Available balance",
                        style: STextStyles.baseXS(context).copyWith(
                          color:
                              Theme.of(
                                context,
                              ).extension<StackColors>()!.textSubtitle1,
                        ),
                      ),
                    ],
                  ),
                  const Spacer(),
                  Container(
                    color: Colors.transparent,
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.end,
                      children: [
                        Text(
                          ref
                              .watch(pAmountFormatter(coin))
                              .format(
                                ref
                                    .watch(pWalletBalance(widget.walletId))
                                    .spendable,
                              ),
                          style: STextStyles.titleBold12(context),
                          textAlign: TextAlign.right,
                        ),
                        if (price != null) const SizedBox(height: 2),
                        if (price != null)
                          Text(
                            "${(ref.watch(pWalletBalance(widget.walletId)).spendable.decimal * price).toAmount(fractionDigits: 2).fiatString(locale: locale)} ${ref.watch(prefsChangeNotifierProvider.select((value) => value.currency))}",
                            style: STextStyles.baseXS(context).copyWith(
                              color:
                                  Theme.of(
                                    context,
                                  ).extension<StackColors>()!.textSubtitle1,
                            ),
                            textAlign: TextAlign.right,
                          ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ),
          const SizedBox(height: 20),
          Padding(
            padding: const EdgeInsets.only(left: 32, right: 32, bottom: 32),
            child: DesktopSend(
              walletId: widget.walletId,
              accountLite: widget.accountLite,
            ),
          ),
        ],
      ),
    );
  }
}
