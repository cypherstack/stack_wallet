/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:io';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../pages/wallets_view/wallets_overview.dart';
import '../../providers/providers.dart';
import '../../themes/coin_icon_provider.dart';
import '../../themes/stack_colors.dart';
import '../../utilities/amount/amount.dart';
import '../../utilities/show_loading.dart';
import '../../utilities/text_styles.dart';
import '../../utilities/util.dart';
import '../../wallets/crypto_currency/crypto_currency.dart';
import '../../wallets/isar/providers/all_wallets_info_provider.dart';
import '../../wallets/wallet/intermediate/lib_monero_wallet.dart';
import '../../widgets/breathing.dart';
import '../../widgets/conditional_parent.dart';
import '../../widgets/desktop/desktop_dialog.dart';
import '../../widgets/desktop/desktop_dialog_close_button.dart';
import '../../widgets/dialogs/tor_warning_dialog.dart';
import '../../widgets/rounded_white_container.dart';
import 'wallet_view/desktop_wallet_view.dart';

class WalletSummaryTable extends ConsumerStatefulWidget {
  const WalletSummaryTable({super.key});

  @override
  ConsumerState<WalletSummaryTable> createState() => _WalletTableState();
}

class _WalletTableState extends ConsumerState<WalletSummaryTable> {
  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");
    final walletsByCoin = ref.watch(pAllWalletsInfoByCoin);

    return ListView.separated(
      itemBuilder: (_, index) {
        final coin = walletsByCoin[index].coin;

        return ConditionalParent(
          condition: index + 1 == walletsByCoin.length,
          builder: (child) => Padding(
            padding: const EdgeInsets.only(
              bottom: 16,
            ),
            child: child,
          ),
          child: DesktopWalletSummaryRow(
            key: Key("DesktopWalletSummaryRow_key_${coin.identifier}"),
            coin: coin,
            walletCount: walletsByCoin[index].wallets.length,
          ),
        );
      },
      separatorBuilder: (_, __) => const SizedBox(
        height: 10,
      ),
      itemCount: walletsByCoin.length,
    );
  }
}

class DesktopWalletSummaryRow extends ConsumerStatefulWidget {
  const DesktopWalletSummaryRow({
    super.key,
    required this.coin,
    required this.walletCount,
  });

  final CryptoCurrency coin;
  final int walletCount;

  @override
  ConsumerState<DesktopWalletSummaryRow> createState() =>
      _DesktopWalletSummaryRowState();
}

class _DesktopWalletSummaryRowState
    extends ConsumerState<DesktopWalletSummaryRow> {
  Future<void> _checkTor() async {
    if (ref.read(prefsChangeNotifierProvider).useTor) {
      // ... and if the coin supports Tor.
      if (!widget.coin.torSupport) {
        // If not, show a Tor warning dialog.
        final shouldContinue = await showDialog<bool>(
              context: context,
              builder: (_) => TorWarningDialog(
                coin: widget.coin,
              ),
            ) ??
            false;
        if (!shouldContinue) {
          return;
        }
      }
    }
  }

  bool get goStraightIntoWallet =>
      Util.isDesktop && widget.walletCount == 1 && !widget.coin.hasTokenSupport;

  bool _buttonLock = false;
  Future<void> _onPressedSingleWalletDesktop() async {
    if (_buttonLock) return;
    _buttonLock = true;
    try {
      await _checkTor();

      if (mounted) {
        final wallet = ref.read(pWallets).wallets.firstWhere(
            (e) => e.cryptoCurrency.identifier == widget.coin.identifier);

        final Future<void> loadFuture;
        if (wallet is LibMoneroWallet) {
          loadFuture =
              wallet.init().then((value) async => await (wallet).open());
        } else {
          loadFuture = wallet.init();
        }
        await showLoading(
          whileFuture: loadFuture,
          context: context,
          message: 'Opening ${wallet.info.name}',
          rootNavigator: Util.isDesktop,
        );

        if (mounted) {
          await Navigator.of(context).pushNamed(
            DesktopWalletView.routeName,
            arguments: wallet.walletId,
          );
        }
      }
    } finally {
      _buttonLock = false;
    }
  }

  void _onPressed() async {
    if (_buttonLock) return;
    _buttonLock = true;
    try {
      // Check if Tor is enabled...
      await _checkTor();

      if (mounted) {
        await showDialog<void>(
          context: context,
          builder: (_) => DesktopDialog(
            maxHeight: 600,
            maxWidth: 700,
            child: Column(
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Padding(
                      padding: const EdgeInsets.only(left: 32),
                      child: Text(
                        "${widget.coin.prettyName} (${widget.coin.ticker}) wallets",
                        style: STextStyles.desktopH3(context),
                      ),
                    ),
                    const DesktopDialogCloseButton(),
                  ],
                ),
                Expanded(
                  child: Padding(
                    padding: const EdgeInsets.only(
                      left: 32,
                      right: 32,
                      bottom: 32,
                    ),
                    child: WalletsOverview(
                      coin: widget.coin,
                      navigatorState: Navigator.of(context),
                    ),
                  ),
                ),
              ],
            ),
          ),
        );
      }
    } finally {
      _buttonLock = false;
    }
  }

  @override
  Widget build(BuildContext context) {
    return Breathing(
      child: RoundedWhiteContainer(
        padding: const EdgeInsets.all(20),
        hoverColor: Colors.transparent,
        onPressed:
            goStraightIntoWallet ? _onPressedSingleWalletDesktop : _onPressed,
        child: Row(
          children: [
            Expanded(
              flex: 4,
              child: Row(
                children: [
                  SvgPicture.file(
                    File(
                      ref.watch(coinIconProvider(widget.coin)),
                    ),
                    width: 28,
                    height: 28,
                  ),
                  const SizedBox(
                    width: 10,
                  ),
                  Text(
                    widget.coin.prettyName,
                    style: STextStyles.desktopTextExtraSmall(context).copyWith(
                      color:
                          Theme.of(context).extension<StackColors>()!.textDark,
                    ),
                  ),
                ],
              ),
            ),
            Expanded(
              flex: 4,
              child: Text(
                widget.walletCount == 1
                    ? "${widget.walletCount} wallet"
                    : "${widget.walletCount} wallets",
                style: STextStyles.desktopTextExtraSmall(context).copyWith(
                  color:
                      Theme.of(context).extension<StackColors>()!.textSubtitle1,
                ),
              ),
            ),
            Expanded(
              flex: 6,
              child: TablePriceInfo(
                coin: widget.coin,
              ),
            ),
          ],
        ),
      ),
    );
  }
}

class TablePriceInfo extends ConsumerWidget {
  const TablePriceInfo({super.key, required this.coin});

  final CryptoCurrency coin;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final tuple = ref.watch(
      priceAnd24hChangeNotifierProvider.select(
        (value) => value.getPrice(coin),
      ),
    );

    final currency = ref.watch(
      prefsChangeNotifierProvider.select(
        (value) => value.currency,
      ),
    );

    final priceString = Amount.fromDecimal(
      tuple.item1,
      fractionDigits: 2,
    ).fiatString(
      locale: ref
          .watch(
            localeServiceChangeNotifierProvider.notifier,
          )
          .locale,
    );

    final double percentChange = tuple.item2;

    var percentChangedColor =
        Theme.of(context).extension<StackColors>()!.textDark;
    if (percentChange > 0) {
      percentChangedColor =
          Theme.of(context).extension<StackColors>()!.accentColorGreen;
    } else if (percentChange < 0) {
      percentChangedColor =
          Theme.of(context).extension<StackColors>()!.accentColorRed;
    }

    return Row(
      mainAxisAlignment: MainAxisAlignment.spaceBetween,
      children: [
        Text(
          "$priceString $currency/${coin.ticker}",
          style: STextStyles.desktopTextExtraSmall(context).copyWith(
            color: Theme.of(context).extension<StackColors>()!.textSubtitle1,
          ),
        ),
        Text(
          "${percentChange.toStringAsFixed(2)}%",
          style: STextStyles.desktopTextExtraSmall(context).copyWith(
            color: percentChangedColor,
          ),
        ),
      ],
    );
  }
}
