/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../notifications/show_flush_bar.dart';
import '../../../../providers/providers.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/clipboard_interface.dart';
import '../../../../utilities/constants.dart';
import '../../../../utilities/show_loading.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../utilities/util.dart';
import '../../../../wallets/wallet/impl/mimblewimblecoin_wallet.dart';
import '../../../../widgets/desktop/primary_button.dart';
import '../../../../widgets/icon_widgets/clipboard_icon.dart';
import '../../../../widgets/icon_widgets/x_icon.dart';
import '../../../../widgets/stack_dialog.dart';
import '../../../../widgets/stack_text_field.dart';
import '../../../../widgets/textfield_icon_button.dart';

class DesktopFinalize extends ConsumerStatefulWidget {
  const DesktopFinalize({
    super.key,
    required this.walletId,
    this.clipboard = const ClipboardWrapper(),
  });

  final String walletId;
  final ClipboardInterface clipboard;

  @override
  ConsumerState<DesktopFinalize> createState() => _DesktopFinalizeState();
}

class _DesktopFinalizeState extends ConsumerState<DesktopFinalize> {
  late TextEditingController _slateController;
  final _slateFocusNode = FocusNode();
  bool _slateToggleFlag = false;

  Future<void> _pasteSlatepack() async {
    final ClipboardData? data = await widget.clipboard.getData(
      Clipboard.kTextPlain,
    );
    if (data?.text != null && data!.text!.isNotEmpty) {
      _slateController.text = data.text!;
      setState(() {
        _slateToggleFlag = _slateController.text.isNotEmpty;
      });
    }
  }

  Future<void> _finalize() async {
    // add delay for showloading exception catching hack fix
    await Future<void>.delayed(const Duration(seconds: 1));

    final wallet =
        ref.read(pWallets).getWallet(widget.walletId) as MimblewimblecoinWallet;

    final decoded = await wallet.decodeSlatepack(_slateController.text);
    if (!decoded.success) {
      throw Exception(decoded.error ?? "Failed to decode slatepack");
    }

    final analysis = await wallet.analyzeSlatepack(_slateController.text);
    if (analysis.status != "S2") {
      throw Exception("Invalid slatepack type: ${analysis.status}");
    }

    final result = await wallet.finalizeSlatepack(_slateController.text);

    if (!result.success) {
      throw Exception(
        result.error ?? "Finalize failed without providing an error???",
      );
    }
  }

  Future<void> _finalizePressed() async {
    Exception? ex;
    await showLoading(
      whileFuture: _finalize(),
      context: context,
      message: "Finalizing slatepack...",
      rootNavigator: Util.isDesktop,
      onException: (e) => ex = e,
    );

    if (mounted) {
      if (ex != null) {
        await showDialog<void>(
          context: context,
          useRootNavigator: true,
          builder:
              (context) => StackOkDialog(
                desktopPopRootNavigator: true,
                title: "Slatepack finalize error",
                message:
                    ex?.toString() ?? "Unexpected result without exception",
                maxWidth: 400,
              ),
        );
      } else {
        unawaited(
          showFloatingFlushBar(
            type: FlushBarType.success,
            message: "Transaction finalized and broadcast successfully!",
            context: context,
          ),
        );
      }
    }
  }

  @override
  void initState() {
    _slateController = TextEditingController();
    super.initState();
  }

  @override
  void dispose() {
    _slateController.dispose();
    _slateFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");

    return Column(
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        const SizedBox(height: 4),
        const SizedBox(height: 20),
        Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              "Finalize Slatepack",
              style: STextStyles.desktopTextExtraSmall(context).copyWith(
                color:
                    Theme.of(
                      context,
                    ).extension<StackColors>()!.textFieldActiveSearchIconRight,
              ),
              textAlign: TextAlign.left,
            ),
            const SizedBox(height: 8),
            ClipRRect(
              borderRadius: BorderRadius.circular(
                Constants.size.circularBorderRadius,
              ),
              child: TextField(
                minLines: 1,
                maxLines: 5,
                key: const Key("finalizeSlatepackFieldKey"),
                controller: _slateController,
                readOnly: false,
                autocorrect: false,
                enableSuggestions: false,
                toolbarOptions: const ToolbarOptions(
                  copy: false,
                  cut: false,
                  paste: true,
                  selectAll: false,
                ),
                onChanged: (newValue) {
                  setState(() {
                    _slateToggleFlag = newValue.isNotEmpty;
                  });
                },
                focusNode: _slateFocusNode,
                style: STextStyles.desktopTextExtraSmall(context).copyWith(
                  color:
                      Theme.of(
                        context,
                      ).extension<StackColors>()!.textFieldActiveText,
                  height: 1.8,
                ),
                decoration: standardInputDecoration(
                  "Enter Final Slatepack Message",
                  _slateFocusNode,
                  context,
                  desktopMed: true,
                ).copyWith(
                  contentPadding: const EdgeInsets.symmetric(
                    horizontal: 16,
                    vertical:
                        12, // Adjust vertical padding for better alignment
                  ),
                  suffixIcon: Padding(
                    padding:
                        _slateController.text.isEmpty
                            ? const EdgeInsets.only(right: 8)
                            : const EdgeInsets.only(right: 0),
                    child: UnconstrainedBox(
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: [
                          _slateToggleFlag
                              ? TextFieldIconButton(
                                key: const Key(
                                  "slateFinalizeClearFieldButtonKey",
                                ),
                                onTap: () {
                                  _slateController.text = "";
                                  setState(() {
                                    _slateToggleFlag = false;
                                  });
                                },
                                child: const XIcon(),
                              )
                              : TextFieldIconButton(
                                key: const Key(
                                  "slateFinalizePasteFieldButtonKey",
                                ),
                                onTap: _pasteSlatepack,
                                child:
                                    _slateController.text.isEmpty
                                        ? const ClipboardIcon()
                                        : const XIcon(),
                              ),
                        ],
                      ),
                    ),
                  ),
                ),
              ),
            ),
          ],
        ),
        const SizedBox(height: 32),
        Padding(
          padding: const EdgeInsets.symmetric(horizontal: 8.0),
          child: PrimaryButton(
            buttonHeight: ButtonHeight.l,
            label: "Finalize Slatepack",
            enabled: true,
            onPressed: _finalizePressed,
          ),
        ),
      ],
    );
  }
}
