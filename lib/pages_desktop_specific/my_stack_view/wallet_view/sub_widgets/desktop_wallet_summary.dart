/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../models/balance.dart';
import '../../../../pages/wallet_view/sub_widgets/wallet_refresh_button.dart';
import '../../../../providers/providers.dart';
import '../../../../providers/wallet/public_private_balance_state_provider.dart';
import '../../../../providers/wallet/wallet_balance_toggle_state_provider.dart';
import '../../../../services/event_bus/events/global/wallet_sync_status_changed_event.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/amount/amount.dart';
import '../../../../utilities/amount/amount_formatter.dart';
import '../../../../utilities/enums/wallet_balance_toggle_state.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../wallets/crypto_currency/coins/firo.dart';
import '../../../../wallets/crypto_currency/crypto_currency.dart'
    show CryptoCurrency;
import '../../../../wallets/isar/providers/eth/current_token_wallet_provider.dart';
import '../../../../wallets/isar/providers/eth/token_balance_provider.dart';
import '../../../../wallets/isar/providers/wallet_info_provider.dart';
import 'desktop_balance_toggle_button.dart';

class DesktopWalletSummary extends ConsumerStatefulWidget {
  const DesktopWalletSummary({
    super.key,
    required this.walletId,
    required this.initialSyncStatus,
    this.isToken = false,
  });

  final String walletId;
  final WalletSyncStatus initialSyncStatus;
  final bool isToken;

  @override
  ConsumerState<DesktopWalletSummary> createState() =>
      _WDesktopWalletSummaryState();
}

class _WDesktopWalletSummaryState extends ConsumerState<DesktopWalletSummary> {
  late final String walletId;

  late final CryptoCurrency coin;
  late final bool isFiro;

  @override
  void initState() {
    super.initState();
    walletId = widget.walletId;
    coin = ref.read(pWalletCoin(widget.walletId));
    isFiro = coin is Firo;
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");

    final externalCalls = ref.watch(
      prefsChangeNotifierProvider.select((value) => value.externalCalls),
    );

    final locale = ref.watch(
      localeServiceChangeNotifierProvider.select((value) => value.locale),
    );

    final baseCurrency = ref.watch(
      prefsChangeNotifierProvider.select((value) => value.currency),
    );

    final tokenContract =
        widget.isToken
            ? ref.watch(
              pCurrentTokenWallet.select((value) => value!.tokenContract),
            )
            : null;

    final priceTuple =
        widget.isToken
            ? ref.watch(
              priceAnd24hChangeNotifierProvider.select(
                (value) => value.getTokenPrice(tokenContract!.address),
              ),
            )
            : ref.watch(
              priceAnd24hChangeNotifierProvider.select(
                (value) => value.getPrice(coin),
              ),
            );

    final _showAvailable =
        ref.watch(walletBalanceToggleStateProvider.state).state ==
        WalletBalanceToggleState.available;

    final Amount balanceToShow;
    if (isFiro) {
      switch (ref.watch(publicPrivateBalanceStateProvider.state).state) {
        case FiroType.spark:
          final balance = ref.watch(pWalletBalanceTertiary(walletId));
          balanceToShow = _showAvailable ? balance.spendable : balance.total;
          break;

        case FiroType.lelantus:
          final balance = ref.watch(pWalletBalanceSecondary(walletId));
          balanceToShow = _showAvailable ? balance.spendable : balance.total;
          break;

        case FiroType.public:
          final balance = ref.watch(pWalletBalance(walletId));
          balanceToShow = _showAvailable ? balance.spendable : balance.total;
          break;
      }
    } else {
      final Balance balance =
          widget.isToken
              ? ref.watch(
                pTokenBalance((
                  walletId: walletId,
                  contractAddress: tokenContract!.address,
                )),
              )
              : ref.watch(pWalletBalance(walletId));

      balanceToShow = _showAvailable ? balance.spendable : balance.total;
    }

    return Consumer(
      builder: (context, ref, __) {
        return Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                FittedBox(
                  fit: BoxFit.scaleDown,
                  child: SelectableText(
                    ref
                        .watch(pAmountFormatter(coin))
                        .format(balanceToShow, ethContract: tokenContract),
                    style: STextStyles.desktopH3(context),
                  ),
                ),
                if (externalCalls)
                  SelectableText(
                    "${Amount.fromDecimal(priceTuple.item1 * balanceToShow.decimal, fractionDigits: 2).fiatString(locale: locale)} $baseCurrency",
                    style: STextStyles.desktopTextExtraSmall(context).copyWith(
                      color:
                          Theme.of(
                            context,
                          ).extension<StackColors>()!.textSubtitle1,
                    ),
                  ),
                // if (coin is Firo)
                //   Row(
                //     children: [
                //       DesktopPrivateBalanceToggleButton(
                //         walletId: walletId,
                //       ),
                //       const SizedBox(
                //         width: 8,
                //       ),
                //       const DesktopBalanceToggleButton(),
                //     ],
                //   ),
              ],
            ),
            const SizedBox(width: 8),
            WalletRefreshButton(
              walletId: walletId,
              initialSyncStatus: widget.initialSyncStatus,
              tokenContractAddress:
                  widget.isToken
                      ? ref.watch(pCurrentTokenWallet)!.tokenContract.address
                      : null,
            ),

            const SizedBox(width: 8),
            const DesktopBalanceToggleButton(),
          ],
        );
      },
    );
  }
}
