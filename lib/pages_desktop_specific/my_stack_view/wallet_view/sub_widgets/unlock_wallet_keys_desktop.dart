/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';

import '../../../../models/keys/key_data_interface.dart';
import '../../../../notifications/show_flush_bar.dart';
import '../../../../providers/desktop/storage_crypto_handler_provider.dart';
import '../../../../providers/providers.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/assets.dart';
import '../../../../utilities/constants.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../wallets/wallet/impl/bitcoin_frost_wallet.dart';
import '../../../../wallets/wallet/intermediate/lib_monero_wallet.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/extended_keys_interface.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/mnemonic_interface.dart';
import '../../../../widgets/desktop/desktop_dialog.dart';
import '../../../../widgets/desktop/desktop_dialog_close_button.dart';
import '../../../../widgets/desktop/primary_button.dart';
import '../../../../widgets/desktop/secondary_button.dart';
import '../../../../widgets/loading_indicator.dart';
import '../../../../widgets/stack_text_field.dart';
import 'wallet_keys_desktop_popup.dart';

class UnlockWalletKeysDesktop extends ConsumerStatefulWidget {
  const UnlockWalletKeysDesktop({
    super.key,
    required this.walletId,
  });

  final String walletId;

  static const String routeName = "/desktopUnlockWalletKeys";

  @override
  ConsumerState<UnlockWalletKeysDesktop> createState() =>
      _UnlockWalletKeysDesktopState();
}

class _UnlockWalletKeysDesktopState
    extends ConsumerState<UnlockWalletKeysDesktop> {
  late final TextEditingController passwordController;

  late final FocusNode passwordFocusNode;

  bool continueEnabled = false;
  bool hidePassword = true;

  Future<void> enterPassphrase() async {
    unawaited(
      showDialog(
        context: context,
        builder: (context) => const Column(
          mainAxisAlignment: MainAxisAlignment.center,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            LoadingIndicator(
              width: 200,
              height: 200,
            ),
          ],
        ),
      ),
    );

    await Future<void>.delayed(const Duration(seconds: 1));

    final verified = await ref
        .read(storageCryptoHandlerProvider)
        .verifyPassphrase(passwordController.text);

    if (verified) {
      Navigator.of(context, rootNavigator: true).pop();

      final wallet = ref.read(pWallets).getWallet(widget.walletId);
      ({String keys, String config})? frostData;
      List<String>? words;

      // TODO: [prio=low] handle wallets that don't have a mnemonic
      // All wallets currently are mnemonic based
      if (wallet is! MnemonicInterface) {
        if (wallet is BitcoinFrostWallet) {
          frostData = (
            keys: (await wallet.getSerializedKeys())!,
            config: (await wallet.getMultisigConfig())!,
          );
        } else {
          throw Exception("FIXME ~= see todo in code");
        }
      } else {
        words = await wallet.getMnemonicAsWords();
      }

      KeyDataInterface? keyData;
      if (wallet is ExtendedKeysInterface) {
        keyData = await wallet.getXPrivs();
      } else if (wallet is LibMoneroWallet) {
        keyData = await wallet.getKeys();
      }

      if (mounted) {
        await Navigator.of(context).pushReplacementNamed(
          WalletKeysDesktopPopup.routeName,
          arguments: (
            mnemonic: words ?? [],
            walletId: widget.walletId,
            frostData: frostData,
            keyData: keyData,
          ),
        );
      }
    } else {
      Navigator.of(context, rootNavigator: true).pop();

      await Future<void>.delayed(const Duration(milliseconds: 300));

      unawaited(
        showFloatingFlushBar(
          type: FlushBarType.warning,
          message: "Invalid passphrase!",
          context: context,
        ),
      );
    }
  }

  @override
  void initState() {
    passwordController = TextEditingController();
    passwordFocusNode = FocusNode();
    super.initState();
  }

  @override
  void dispose() {
    passwordController.dispose();
    passwordFocusNode.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return DesktopDialog(
      maxWidth: 579,
      maxHeight: double.infinity,
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              DesktopDialogCloseButton(
                onPressedOverride: Navigator.of(
                  context,
                  rootNavigator: true,
                ).pop,
              ),
            ],
          ),
          const SizedBox(
            height: 12,
          ),
          SvgPicture.asset(
            Assets.svg.keys,
            width: 100,
            height: 58,
          ),
          const SizedBox(
            height: 55,
          ),
          Text(
            "Wallet keys",
            style: STextStyles.desktopH2(context),
          ),
          const SizedBox(
            height: 16,
          ),
          Text(
            "Enter your password",
            style: STextStyles.desktopTextMedium(context).copyWith(
              color: Theme.of(context).extension<StackColors>()!.textDark3,
            ),
          ),
          const SizedBox(
            height: 24,
          ),
          Padding(
            padding: const EdgeInsets.symmetric(
              horizontal: 32,
            ),
            child: ClipRRect(
              borderRadius: BorderRadius.circular(
                Constants.size.circularBorderRadius,
              ),
              child: TextField(
                key: const Key("enterPasswordUnlockWalletKeysDesktopFieldKey"),
                focusNode: passwordFocusNode,
                controller: passwordController,
                style: STextStyles.desktopTextMedium(context).copyWith(
                  height: 2,
                ),
                obscureText: hidePassword,
                enableSuggestions: false,
                autocorrect: false,
                autofocus: true,
                onSubmitted: (_) {
                  if (continueEnabled) {
                    enterPassphrase();
                  }
                },
                decoration: standardInputDecoration(
                  "Enter password",
                  passwordFocusNode,
                  context,
                ).copyWith(
                  suffixIcon: UnconstrainedBox(
                    child: SizedBox(
                      height: 70,
                      child: Row(
                        children: [
                          GestureDetector(
                            key: const Key(
                              "enterUnlockWalletKeysDesktopFieldShowPasswordButtonKey",
                            ),
                            onTap: () async {
                              setState(() {
                                hidePassword = !hidePassword;
                              });
                            },
                            child: Container(
                              decoration: BoxDecoration(
                                color: Colors.transparent,
                                borderRadius: BorderRadius.circular(1000),
                              ),
                              height: 32,
                              width: 32,
                              child: Center(
                                child: SvgPicture.asset(
                                  hidePassword
                                      ? Assets.svg.eye
                                      : Assets.svg.eyeSlash,
                                  color: Theme.of(context)
                                      .extension<StackColors>()!
                                      .textDark3,
                                  width: 24,
                                  height: 19,
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(
                            width: 10,
                          ),
                        ],
                      ),
                    ),
                  ),
                ),
                onChanged: (newValue) {
                  setState(() {
                    continueEnabled = newValue.isNotEmpty;
                  });
                },
              ),
            ),
          ),
          const SizedBox(
            height: 55,
          ),
          Padding(
            padding: const EdgeInsets.symmetric(
              horizontal: 32,
            ),
            child: Row(
              children: [
                Expanded(
                  child: SecondaryButton(
                    label: "Cancel",
                    onPressed: Navigator.of(
                      context,
                      rootNavigator: true,
                    ).pop,
                  ),
                ),
                const SizedBox(
                  width: 16,
                ),
                Expanded(
                  child: PrimaryButton(
                    label: "Continue",
                    enabled: continueEnabled,
                    onPressed: continueEnabled
                        ? () async {
                            unawaited(
                              showDialog(
                                context: context,
                                builder: (context) => const Column(
                                  mainAxisAlignment: MainAxisAlignment.center,
                                  crossAxisAlignment: CrossAxisAlignment.center,
                                  children: [
                                    LoadingIndicator(
                                      width: 200,
                                      height: 200,
                                    ),
                                  ],
                                ),
                              ),
                            );

                            await Future<void>.delayed(
                              const Duration(seconds: 1),
                            );

                            final verified = await ref
                                .read(storageCryptoHandlerProvider)
                                .verifyPassphrase(passwordController.text);

                            if (verified) {
                              Navigator.of(context, rootNavigator: true).pop();

                              ({String keys, String config})? frostData;
                              List<String>? words;

                              final wallet =
                                  ref.read(pWallets).getWallet(widget.walletId);

                              // TODO: [prio=low] handle wallets that don't have a mnemonic
                              // All wallets currently are mnemonic based
                              if (wallet is! MnemonicInterface) {
                                if (wallet is BitcoinFrostWallet) {
                                  frostData = (
                                    keys: (await wallet.getSerializedKeys())!,
                                    config: (await wallet.getMultisigConfig())!,
                                  );
                                } else {
                                  throw Exception("FIXME ~= see todo in code");
                                }
                              } else {
                                words = await wallet.getMnemonicAsWords();
                              }

                              KeyDataInterface? keyData;
                              if (wallet is ExtendedKeysInterface) {
                                keyData = await wallet.getXPrivs();
                              } else if (wallet is LibMoneroWallet) {
                                keyData = await wallet.getKeys();
                              }

                              if (context.mounted) {
                                await Navigator.of(context)
                                    .pushReplacementNamed(
                                  WalletKeysDesktopPopup.routeName,
                                  arguments: (
                                    mnemonic: words ?? [],
                                    walletId: widget.walletId,
                                    frostData: frostData,
                                    keyData: keyData,
                                  ),
                                );
                              }
                            } else {
                              Navigator.of(context, rootNavigator: true).pop();

                              await Future<void>.delayed(
                                const Duration(milliseconds: 300),
                              );

                              unawaited(
                                showFloatingFlushBar(
                                  type: FlushBarType.warning,
                                  message: "Invalid passphrase!",
                                  context: context,
                                ),
                              );
                            }
                          }
                        : null,
                  ),
                ),
              ],
            ),
          ),
          const SizedBox(
            height: 32,
          ),
        ],
      ),
    );
  }
}
