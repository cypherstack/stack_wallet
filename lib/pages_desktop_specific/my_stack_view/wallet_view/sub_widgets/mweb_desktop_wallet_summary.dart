/*
 * This file is part of Stack Wallet.
 *
 * Copyright (c) 2025 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2025-06-13
 *
 */

import 'package:decimal/decimal.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../pages/wallet_view/sub_widgets/wallet_refresh_button.dart';
import '../../../../providers/providers.dart';
import '../../../../providers/wallet/wallet_balance_toggle_state_provider.dart';
import '../../../../services/event_bus/events/global/wallet_sync_status_changed_event.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/amount/amount.dart';
import '../../../../utilities/amount/amount_formatter.dart';
import '../../../../utilities/enums/wallet_balance_toggle_state.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../wallets/crypto_currency/crypto_currency.dart';
import '../../../../wallets/isar/providers/wallet_info_provider.dart';
import 'desktop_balance_toggle_button.dart';

class MwebDesktopWalletSummary extends ConsumerStatefulWidget {
  const MwebDesktopWalletSummary({
    super.key,
    required this.walletId,
    required this.initialSyncStatus,
  });

  final String walletId;
  final WalletSyncStatus initialSyncStatus;

  @override
  ConsumerState<MwebDesktopWalletSummary> createState() =>
      _WMwebDesktopWalletSummaryState();
}

class _WMwebDesktopWalletSummaryState
    extends ConsumerState<MwebDesktopWalletSummary> {
  late final String walletId;

  late final CryptoCurrency coin;
  late final bool isMweb;

  @override
  void initState() {
    super.initState();
    walletId = widget.walletId;
    coin = ref.read(pWalletCoin(widget.walletId));
  }

  @override
  Widget build(BuildContext context) {
    debugPrint("BUILD: $runtimeType");

    Decimal? price;
    if (ref.watch(
      prefsChangeNotifierProvider.select((value) => value.externalCalls),
    )) {
      price =
          ref
              .watch(
                priceAnd24hChangeNotifierProvider.select(
                  (value) => value.getPrice(coin),
                ),
              )
              ?.value;
    }

    final _showAvailable =
        ref.watch(walletBalanceToggleStateProvider.state).state ==
        WalletBalanceToggleState.available;

    final balance0 = ref.watch(pWalletBalanceSecondary(walletId));
    final balanceToShowSpark =
        _showAvailable ? balance0.spendable : balance0.total;

    final balance2 = ref.watch(pWalletBalance(walletId));
    final balanceToShowPublic =
        _showAvailable ? balance2.spendable : balance2.total;

    return Consumer(
      builder: (context, ref, __) {
        return Row(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Table(
              columnWidths: {
                0: const IntrinsicColumnWidth(),
                1: const IntrinsicColumnWidth(),
                if (price != null) 2: const IntrinsicColumnWidth(),
              },
              children: [
                TableRow(
                  children: [
                    const _Prefix(isMweb: true),
                    _Balance(coin: coin, amount: balanceToShowSpark),
                    if (price != null)
                      _Price(
                        coin: coin,
                        amount: balanceToShowSpark,
                        price: price,
                      ),
                  ],
                ),

                TableRow(
                  children: [
                    const _Prefix(isMweb: false),
                    _Balance(coin: coin, amount: balanceToShowPublic),
                    if (price != null)
                      _Price(
                        coin: coin,
                        amount: balanceToShowPublic,
                        price: price,
                      ),
                  ],
                ),
              ],
            ),

            const SizedBox(width: 8),
            WalletRefreshButton(
              walletId: walletId,
              initialSyncStatus: widget.initialSyncStatus,
            ),
            const SizedBox(width: 8),
            const DesktopBalanceToggleButton(),
          ],
        );
      },
    );
  }
}

class _Prefix extends StatelessWidget {
  const _Prefix({super.key, required this.isMweb});

  final bool isMweb;

  @override
  Widget build(BuildContext context) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 8.0),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.end,
        children: [
          SelectableText(
            isMweb ? "Private" : "Public",
            style: STextStyles.w500_24(context),
          ),
        ],
      ),
    );
  }
}

class _Balance extends ConsumerWidget {
  const _Balance({super.key, required this.coin, required this.amount});

  final CryptoCurrency coin;
  final Amount amount;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return SelectableText(
      ref.watch(pAmountFormatter(coin)).format(amount, ethContract: null),
      style: STextStyles.desktopH3(context),
      textAlign: TextAlign.end,
    );
  }
}

class _Price extends ConsumerWidget {
  const _Price({
    super.key,
    required this.coin,
    required this.amount,
    required this.price,
  });

  final CryptoCurrency coin;
  final Amount amount;
  final Decimal price;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    return Padding(
      padding: const EdgeInsets.only(left: 16),
      child: SelectableText(
        "${Amount.fromDecimal(price * amount.decimal, fractionDigits: 2).fiatString(locale: ref.watch(localeServiceChangeNotifierProvider.select((value) => value.locale)))} "
        "${ref.watch(prefsChangeNotifierProvider.select((value) => value.currency))}",
        style: STextStyles.desktopTextExtraSmall(context).copyWith(
          color: Theme.of(context).extension<StackColors>()!.textSubtitle1,
        ),

        textAlign: TextAlign.end,
      ),
    );
  }
}
