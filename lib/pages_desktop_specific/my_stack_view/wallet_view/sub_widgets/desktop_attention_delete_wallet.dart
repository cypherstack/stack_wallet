/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:tuple/tuple.dart';

import '../../../../app_config.dart';
import '../../../../pages/settings_views/wallet_settings_view/wallet_settings_wallet_settings/delete_view_only_wallet_keys_view.dart';
import '../../../../providers/global/wallets_provider.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/mnemonic_interface.dart';
import '../../../../wallets/wallet/wallet_mixin_interfaces/view_only_option_interface.dart';
import '../../../../widgets/desktop/desktop_dialog.dart';
import '../../../../widgets/desktop/desktop_dialog_close_button.dart';
import '../../../../widgets/desktop/primary_button.dart';
import '../../../../widgets/desktop/secondary_button.dart';
import '../../../../widgets/rounded_container.dart';
import 'delete_wallet_keys_popup.dart';

class DesktopAttentionDeleteWallet extends ConsumerStatefulWidget {
  const DesktopAttentionDeleteWallet({
    super.key,
    required this.walletId,
  });

  final String walletId;

  static const String routeName = "/desktopAttentionDeleteWallet";

  @override
  ConsumerState<DesktopAttentionDeleteWallet> createState() =>
      _DesktopAttentionDeleteWallet();
}

class _DesktopAttentionDeleteWallet
    extends ConsumerState<DesktopAttentionDeleteWallet> {
  @override
  Widget build(BuildContext context) {
    return DesktopDialog(
      maxWidth: 610,
      maxHeight: 530,
      child: Column(
        children: [
          Row(
            mainAxisAlignment: MainAxisAlignment.end,
            children: [
              DesktopDialogCloseButton(
                onPressedOverride: () {
                  Navigator.of(
                    context,
                    rootNavigator: true,
                  ).pop();
                },
              ),
            ],
          ),
          Padding(
            padding: const EdgeInsets.symmetric(horizontal: 32, vertical: 26),
            child: Column(
              children: [
                Text(
                  "Attention!",
                  style: STextStyles.desktopH2(context),
                ),
                const SizedBox(
                  height: 16,
                ),
                RoundedContainer(
                  color: Theme.of(context)
                      .extension<StackColors>()!
                      .snackBarBackError,
                  child: Padding(
                    padding: const EdgeInsets.all(10.0),
                    child: Text(
                      "You are going to permanently delete your wallet.\n\nIf you delete your wallet, "
                      "the only way you can have access to your funds is by using your backup key."
                      "\n\n${AppConfig.appName} does not keep nor is able to restore your backup key or your wallet."
                      "\n\nPLEASE SAVE YOUR BACKUP KEY.",
                      style: STextStyles.desktopTextExtraExtraSmall(context)
                          .copyWith(
                        color: Theme.of(context)
                            .extension<StackColors>()!
                            .snackBarTextError,
                      ),
                    ),
                  ),
                ),
                const SizedBox(height: 30),
                Row(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    SecondaryButton(
                      width: 250,
                      buttonHeight: ButtonHeight.xl,
                      label: "Cancel",
                      onPressed: () {
                        Navigator.of(
                          context,
                          rootNavigator: true,
                        ).pop();
                      },
                    ),
                    const SizedBox(width: 16),
                    PrimaryButton(
                      width: 250,
                      buttonHeight: ButtonHeight.xl,
                      label: "View Backup Key",
                      onPressed: () async {
                        final wallet =
                            ref.read(pWallets).getWallet(widget.walletId);

                        if (wallet is ViewOnlyOptionInterface &&
                            wallet.isViewOnly) {
                          final data = await wallet.getViewOnlyWalletData();
                          if (context.mounted) {
                            await Navigator.of(context).push(
                              MaterialPageRoute<void>(
                                builder: (builder) => DesktopDialog(
                                  maxWidth: 614,
                                  maxHeight: double.infinity,
                                  child: Column(
                                    children: [
                                      Row(
                                        mainAxisAlignment:
                                            MainAxisAlignment.spaceBetween,
                                        children: [
                                          Padding(
                                            padding: const EdgeInsets.only(
                                              left: 32,
                                            ),
                                            child: Text(
                                              "Wallet keys",
                                              style: STextStyles.desktopH3(
                                                context,
                                              ),
                                            ),
                                          ),
                                          DesktopDialogCloseButton(
                                            onPressedOverride: () {
                                              Navigator.of(
                                                context,
                                                rootNavigator: true,
                                              ).pop();
                                            },
                                          ),
                                        ],
                                      ),
                                      Padding(
                                        padding: const EdgeInsets.all(32),
                                        child: DeleteViewOnlyWalletKeysView(
                                          walletId: widget.walletId,
                                          data: data,
                                        ),
                                      ),
                                    ],
                                  ),
                                ),
                              ),
                            );
                          }
                        } else

                        // TODO: [prio=med] handle other types wallet deletion
                        // All wallets currently are mnemonic based
                        if (wallet is MnemonicInterface) {
                          final words = await wallet.getMnemonicAsWords();

                          if (context.mounted) {
                            await Navigator.of(context).pushNamed(
                              DeleteWalletKeysPopup.routeName,
                              arguments: Tuple2(
                                widget.walletId,
                                words,
                              ),
                            );
                          }
                        }
                      },
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
