/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:stackwallet/pages_desktop_specific/my_stack_view/wallet_view/desktop_wallet_view.dart';
import 'package:stackwallet/providers/global/active_wallet_provider.dart';
import 'package:stackwallet/providers/global/wallets_provider.dart';
import 'package:stackwallet/themes/stack_colors.dart';
import 'package:stackwallet/utilities/constants.dart';
import 'package:stackwallet/utilities/enums/coin_enum.dart';
import 'package:stackwallet/utilities/show_loading.dart';
import 'package:stackwallet/utilities/util.dart';
import 'package:stackwallet/widgets/rounded_container.dart';
import 'package:stackwallet/widgets/wallet_info_row/wallet_info_row.dart';

class CoinWalletsTable extends ConsumerWidget {
  const CoinWalletsTable({
    super.key,
    required this.coin,
  });

  final Coin coin;

  @override
  Widget build(BuildContext context, WidgetRef ref) {
    final walletIds = ref
        .watch(pWallets)
        .wallets
        .where((e) => e.info.coin == coin)
        .map((e) => e.walletId)
        .toList();

    return Container(
      decoration: BoxDecoration(
        color: Theme.of(context).extension<StackColors>()!.popupBG,
        borderRadius: BorderRadius.circular(
          Constants.size.circularBorderRadius,
        ),
      ),
      child: Padding(
        padding: const EdgeInsets.symmetric(
          // horizontal: 20,
          // vertical: 16,
          horizontal: 6,
          vertical: 6,
        ),
        child: Column(
          children: [
            for (int i = 0; i < walletIds.length; i++)
              Column(
                key: Key("${coin.name}_$runtimeType${walletIds[i]}_key"),
                children: [
                  if (i != 0)
                    const SizedBox(
                      height: 8,
                    ),
                  Stack(
                    children: [
                      WalletInfoRow(
                        padding: const EdgeInsets.symmetric(
                          horizontal: 14,
                          vertical: 10,
                        ),
                        walletId: walletIds[i],
                      ),
                      Positioned.fill(
                        child: WalletRowHoverOverlay(
                          onPressed: () async {
                            ref.read(currentWalletIdProvider.state).state =
                                walletIds[i];

                            final wallet =
                                ref.read(pWallets).getWallet(walletIds[i]);
                            final Future<void> loadFuture;
                            loadFuture = wallet.init();
                            await showLoading(
                              whileFuture: loadFuture,
                              context: context,
                              message: 'Opening ${wallet.info.name}',
                              isDesktop: Util.isDesktop,
                            );

                            if (context.mounted) {
                              await Navigator.of(context).pushNamed(
                                DesktopWalletView.routeName,
                                arguments: walletIds[i],
                              );
                            }
                          },
                        ),
                      ),
                    ],
                  ),
                ],
              ),
          ],
        ),
      ),
    );
  }
}

class WalletRowHoverOverlay extends StatefulWidget {
  const WalletRowHoverOverlay({
    super.key,
    required this.onPressed,
  });

  final VoidCallback onPressed;

  @override
  State<WalletRowHoverOverlay> createState() => _WalletRowHoverOverlayState();
}

class _WalletRowHoverOverlayState extends State<WalletRowHoverOverlay> {
  late final VoidCallback onPressed;

  bool _hovering = false;

  @override
  void initState() {
    onPressed = widget.onPressed;
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return MouseRegion(
      cursor: SystemMouseCursors.click,
      onEnter: (_) {
        setState(() {
          _hovering = true;
        });
      },
      onExit: (_) {
        setState(() {
          _hovering = false;
        });
      },
      child: GestureDetector(
        onTap: onPressed,
        child: AnimatedOpacity(
          duration: const Duration(milliseconds: 100),
          opacity: _hovering ? 0.1 : 0,
          child: RoundedContainer(
            color:
                Theme.of(context).extension<StackColors>()!.buttonBackSecondary,
          ),
        ),
      ),
    );
  }
}
