/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';

import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/flutter_svg.dart';

import '../../../../providers/desktop/storage_crypto_handler_provider.dart';
import '../../../../themes/stack_colors.dart';
import '../../../../utilities/assets.dart';
import '../../../../utilities/constants.dart';
import '../../../../utilities/text_styles.dart';
import '../../../../widgets/desktop/primary_button.dart';
import '../../../../widgets/stack_text_field.dart';
import '../../app_config.dart';
import '../../notifications/show_flush_bar.dart';
import '../../utilities/show_loading.dart';
import '../../widgets/desktop/desktop_dialog.dart';

class DesktopUnlockAppDialog extends ConsumerStatefulWidget {
  const DesktopUnlockAppDialog({super.key});

  @override
  ConsumerState<DesktopUnlockAppDialog> createState() =>
      _DesktopUnlockAppDialogState();
}

class _DesktopUnlockAppDialogState
    extends ConsumerState<DesktopUnlockAppDialog> {
  late final TextEditingController passwordController;
  late final FocusNode passwordFocusNode;

  bool hidePassword = true;

  bool _confirmEnabled = false;
  bool _lock = false;

  Future<void> _confirmPressed() async {
    if (_lock) {
      return;
    }
    _lock = true;

    try {
      final passwordIsValid = await showLoading(
        whileFuture: ref
            .read(storageCryptoHandlerProvider)
            .verifyPassphrase(passwordController.text),
        context: context,
        message: "Verifying password...",
        delay: const Duration(seconds: 1),
      );

      if (mounted) {
        if (passwordIsValid == true) {
          Navigator.of(context, rootNavigator: true).pop();
        } else {
          unawaited(
            showFloatingFlushBar(
              type: FlushBarType.warning,
              message: "Invalid password!",
              context: context,
            ),
          );
        }
      }
    } finally {
      _lock = false;
    }
  }

  @override
  void initState() {
    passwordController = TextEditingController();
    passwordFocusNode = FocusNode();

    super.initState();
  }

  @override
  void dispose() {
    passwordController.dispose();
    passwordFocusNode.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return DesktopDialog(
      maxWidth: 579,
      maxHeight: double.infinity,
      child: Padding(
        padding: const EdgeInsets.all(32),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            SvgPicture.asset(Assets.svg.keys, width: 100),
            const SizedBox(height: 56),
            Text(
              "Unlock ${AppConfig.appName}",
              style: STextStyles.desktopH3(context),
            ),
            const SizedBox(height: 16),
            Text(
              "Enter your wallet password to unlock ${AppConfig.appName}",
              style: STextStyles.desktopTextMedium(context).copyWith(
                color: Theme.of(context).extension<StackColors>()!.textDark3,
              ),
            ),
            const SizedBox(height: 24),
            ClipRRect(
              borderRadius: BorderRadius.circular(
                Constants.size.circularBorderRadius,
              ),
              child: TextField(
                key: const Key("desktopUnlockAppPasswordFieldKey"),
                focusNode: passwordFocusNode,
                controller: passwordController,
                style: STextStyles.desktopTextMedium(
                  context,
                ).copyWith(height: 2),
                obscureText: hidePassword,
                enableSuggestions: false,
                autocorrect: false,
                autofocus: true,
                onSubmitted: (_) {
                  if (_confirmEnabled) {
                    _confirmPressed();
                  }
                },
                decoration: standardInputDecoration(
                  "Enter password",
                  passwordFocusNode,
                  context,
                ).copyWith(
                  suffixIcon: UnconstrainedBox(
                    child: SizedBox(
                      height: 70,
                      child: Row(
                        children: [
                          const SizedBox(width: 24),
                          GestureDetector(
                            key: const Key(
                              "desktopUnlockAppPasswordFieldShowPasswordButtonKey",
                            ),
                            onTap: () async {
                              setState(() {
                                hidePassword = !hidePassword;
                              });
                            },
                            child: SvgPicture.asset(
                              hidePassword
                                  ? Assets.svg.eye
                                  : Assets.svg.eyeSlash,
                              color:
                                  Theme.of(
                                    context,
                                  ).extension<StackColors>()!.textDark3,
                              width: 24,
                              height: 24,
                            ),
                          ),
                          const SizedBox(width: 12),
                        ],
                      ),
                    ),
                  ),
                ),
                onChanged: (newValue) {
                  setState(() {
                    _confirmEnabled = passwordController.text.isNotEmpty;
                  });
                },
              ),
            ),
            const SizedBox(height: 48),
            Row(
              children: [
                const Spacer(),
                const SizedBox(width: 16),
                Expanded(
                  child: PrimaryButton(
                    enabled: _confirmEnabled,
                    label: "Unlock",
                    buttonHeight: ButtonHeight.l,
                    onPressed: _confirmPressed,
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
