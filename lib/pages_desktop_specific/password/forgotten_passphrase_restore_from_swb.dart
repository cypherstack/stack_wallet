/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2023-05-26
 *
 */

import 'dart:async';
import 'dart:io';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter_svg/svg.dart';
import 'package:tuple/tuple.dart';

import '../../app_config.dart';
import '../../db/hive/db.dart';
import '../../notifications/show_flush_bar.dart';
import '../../pages/settings_views/global_settings_view/stack_backup_views/helpers/restore_create_backup.dart';
import '../../pages/settings_views/global_settings_view/stack_backup_views/helpers/swb_file_system.dart';
import '../../pages/settings_views/global_settings_view/stack_backup_views/sub_views/stack_restore_progress_view.dart';
import '../../providers/desktop/storage_crypto_handler_provider.dart';
import '../../providers/global/secure_store_provider.dart';
import '../../providers/global/wallets_provider.dart';
import '../../themes/stack_colors.dart';
import '../../utilities/assets.dart';
import '../../utilities/constants.dart';
import '../../utilities/flutter_secure_storage_interface.dart';
import '../../utilities/logger.dart';
import '../../utilities/text_styles.dart';
import '../../widgets/custom_buttons/app_bar_icon_button.dart';
import '../../widgets/desktop/desktop_app_bar.dart';
import '../../widgets/desktop/desktop_dialog.dart';
import '../../widgets/desktop/desktop_scaffold.dart';
import '../../widgets/desktop/primary_button.dart';
import '../../widgets/loading_indicator.dart';
import '../../widgets/stack_text_field.dart';
import 'create_password_view.dart';

class ForgottenPassphraseRestoreFromSWB extends ConsumerStatefulWidget {
  const ForgottenPassphraseRestoreFromSWB({super.key});

  static const String routeName = "/forgottenPassphraseRestoreFromSWB";

  @override
  ConsumerState<ForgottenPassphraseRestoreFromSWB> createState() =>
      _ForgottenPassphraseRestoreFromSWBState();
}

class _ForgottenPassphraseRestoreFromSWBState
    extends ConsumerState<ForgottenPassphraseRestoreFromSWB> {
  late final TextEditingController fileLocationController;
  late final TextEditingController passwordController;

  late final FocusNode passwordFocusNode;

  late final SWBFileSystem stackFileSystem;

  bool hidePassword = true;

  bool _enableButton = false;

  Future<void> restore() async {
    final String fileToRestore = fileLocationController.text;
    final String passphrase = passwordController.text;

    if (!(await File(fileToRestore).exists())) {
      await showFloatingFlushBar(
        type: FlushBarType.warning,
        message: "Backup file does not exist",
        context: context,
      );
      return;
    }

    bool shouldPop = false;
    unawaited(
      showDialog<dynamic>(
        barrierDismissible: false,
        context: context,
        builder: (_) => WillPopScope(
          onWillPop: () async {
            return shouldPop;
          },
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Material(
                color: Colors.transparent,
                child: Center(
                  child: Text(
                    "Decrypting ${AppConfig.prefix} backup file",
                    style: STextStyles.pageTitleH2(context).copyWith(
                      color:
                          Theme.of(context).extension<StackColors>()!.textWhite,
                    ),
                  ),
                ),
              ),
              const SizedBox(
                height: 64,
              ),
              const Center(
                child: LoadingIndicator(
                  width: 100,
                ),
              ),
            ],
          ),
        ),
      ),
    );

    final String? jsonString = await compute(
      SWB.decryptStackWalletWithPassphrase,
      Tuple2(fileToRestore, passphrase),
      debugLabel: "${AppConfig.appName} decryption compute",
    );

    if (mounted) {
      // pop LoadingIndicator
      shouldPop = true;
      Navigator.of(context).pop();

      passwordController.text = "";

      if (jsonString == null) {
        await showFloatingFlushBar(
          type: FlushBarType.warning,
          message: "Failed to decrypt backup file",
          context: context,
        );
        return;
      }

      ref.read(pWallets);

      await showDialog<void>(
        context: context,
        barrierDismissible: false,
        builder: (context) {
          return DesktopDialog(
            maxWidth: 580,
            maxHeight: MediaQuery.of(context).size.height - 64,
            child: Padding(
              padding: const EdgeInsets.all(32),
              child: Column(
                mainAxisSize: MainAxisSize.min,
                children: [
                  Row(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    children: [
                      Text(
                        "Restoring ${AppConfig.appName}",
                        style: STextStyles.desktopH3(context),
                      ),
                    ],
                  ),
                  const SizedBox(
                    height: 44,
                  ),
                  Flexible(
                    child: StackRestoreProgressView(
                      jsonString: jsonString,
                      shouldPushToHome: true,
                    ),
                  ),
                ],
              ),
            ),
          );
        },
      );
      // await Navigator.of(context).push(
      //   RouteGenerator.getRoute(
      //     builder: (_) => StackRestoreProgressView(
      //       jsonString: jsonString,
      //     ),
      //   ),
      // );
    }
  }

  @override
  void initState() {
    stackFileSystem = SWBFileSystem();
    fileLocationController = TextEditingController();
    passwordController = TextEditingController();

    passwordFocusNode = FocusNode();

    super.initState();
  }

  @override
  void dispose() {
    fileLocationController.dispose();
    passwordController.dispose();

    passwordFocusNode.dispose();

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return DesktopScaffold(
      appBar: DesktopAppBar(
        leading: AppBarBackButton(
          onPressed: () async {
            await (ref.read(secureStoreProvider).store as DesktopSecureStore)
                .close();
            ref.refresh(secureStoreProvider);
            await ref.read(storageCryptoHandlerProvider).deleteBox();
            ref.refresh(storageCryptoHandlerProvider);
            await DB.instance.init();
            if (mounted) {
              Navigator.of(context)
                  .popUntil(ModalRoute.withName(CreatePasswordView.routeName));
              Navigator.of(context).pop();
            }
          },
        ),
        isCompactHeight: false,
      ),
      body: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        crossAxisAlignment: CrossAxisAlignment.center,
        children: [
          SizedBox(
            width: 480,
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                Text(
                  "Restore from backup",
                  style: STextStyles.desktopH1(context),
                ),
                const SizedBox(
                  height: 32,
                ),
                Text(
                  "Use your ${AppConfig.prefix} backup file to restore your wallets, address book, and wallet preferences.",
                  textAlign: TextAlign.center,
                  style: STextStyles.desktopTextSmall(context).copyWith(
                    color: Theme.of(context)
                        .extension<StackColors>()!
                        .textSubtitle1,
                  ),
                ),
                const SizedBox(
                  height: 40,
                ),
                GestureDetector(
                  onTap: () async {
                    try {
                      await stackFileSystem.prepareStorage();
                      if (mounted) {
                        await stackFileSystem.openFile(context);
                      }

                      if (mounted) {
                        setState(() {
                          fileLocationController.text =
                              stackFileSystem.filePath ?? "";
                        });
                      }
                    } catch (e, s) {
                      Logging.instance.e("$e\n$s", error: e, stackTrace: s);
                    }
                  },
                  child: MouseRegion(
                    cursor: SystemMouseCursors.click,
                    child: IgnorePointer(
                      child: TextField(
                        autocorrect: false,
                        enableSuggestions: false,
                        controller: fileLocationController,
                        style: STextStyles.field(context),
                        decoration: InputDecoration(
                          hintText: "Choose file...",
                          hintStyle: STextStyles.desktopTextFieldLabel(context),
                          suffixIcon: SizedBox(
                            height: 70,
                            child: UnconstrainedBox(
                              child: Row(
                                children: [
                                  const SizedBox(
                                    width: 24,
                                  ),
                                  SvgPicture.asset(
                                    Assets.svg.folder,
                                    color: Theme.of(context)
                                        .extension<StackColors>()!
                                        .textDark3,
                                    width: 24,
                                    height: 24,
                                  ),
                                  const SizedBox(
                                    width: 12,
                                  ),
                                ],
                              ),
                            ),
                          ),
                        ),
                        key: const Key("restoreFromFileLocationTextFieldKey"),
                        readOnly: true,
                        toolbarOptions: const ToolbarOptions(
                          copy: true,
                          cut: false,
                          paste: false,
                          selectAll: false,
                        ),
                        onChanged: (newValue) {
                          setState(() {
                            _enableButton =
                                passwordController.text.isNotEmpty &&
                                    fileLocationController.text.isNotEmpty;
                          });
                        },
                      ),
                    ),
                  ),
                ),
                const SizedBox(
                  height: 16,
                ),
                ClipRRect(
                  borderRadius: BorderRadius.circular(
                    Constants.size.circularBorderRadius,
                  ),
                  child: TextField(
                    key: const Key("restoreFromFilePasswordFieldKey"),
                    focusNode: passwordFocusNode,
                    controller: passwordController,
                    style: STextStyles.desktopTextMedium(context).copyWith(
                      height: 2,
                    ),
                    obscureText: hidePassword,
                    enableSuggestions: false,
                    autocorrect: false,
                    decoration: standardInputDecoration(
                      "Enter passphrase",
                      passwordFocusNode,
                      context,
                    ).copyWith(
                      suffixIcon: UnconstrainedBox(
                        child: SizedBox(
                          height: 70,
                          child: Row(
                            children: [
                              const SizedBox(
                                width: 24,
                              ),
                              GestureDetector(
                                key: const Key(
                                  "restoreFromFilePasswordFieldShowPasswordButtonKey",
                                ),
                                onTap: () async {
                                  setState(() {
                                    hidePassword = !hidePassword;
                                  });
                                },
                                child: MouseRegion(
                                  cursor: SystemMouseCursors.click,
                                  child: SvgPicture.asset(
                                    hidePassword
                                        ? Assets.svg.eye
                                        : Assets.svg.eyeSlash,
                                    color: Theme.of(context)
                                        .extension<StackColors>()!
                                        .textDark3,
                                    width: 24,
                                    height: 24,
                                  ),
                                ),
                              ),
                              const SizedBox(
                                width: 12,
                              ),
                            ],
                          ),
                        ),
                      ),
                    ),
                    onChanged: (newValue) {
                      setState(() {
                        _enableButton = passwordController.text.isNotEmpty &&
                            fileLocationController.text.isNotEmpty;
                      });
                    },
                  ),
                ),
                const SizedBox(
                  height: 24,
                ),
                PrimaryButton(
                  label: "Restore",
                  enabled: _enableButton,
                  onPressed: () {
                    restore();
                  },
                ),
                const SizedBox(
                  height: kDesktopAppBarHeight,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }
}
