/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2025 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2025-08-14
 *
 */

import 'dart:async';
import 'dart:io';
import 'dart:math';
import 'package:compat/old_cw_core/path_for_wallet.dart' as lib_monero_compat;
import 'package:flutter/material.dart';
import 'package:logger/logger.dart';
import 'package:cs_monero/cs_monero.dart' as lib_monero;
import '../../../utilities/logger.dart';
import '../../../utilities/stack_file_system.dart';
import '../test_suite_interface.dart';
import '../testing_models.dart';

class WowneroIntegrationTestSuite implements TestSuiteInterface {
  final StreamController<TestSuiteStatus> _statusController = 
      StreamController<TestSuiteStatus>.broadcast();
  TestSuiteStatus _status = TestSuiteStatus.waiting;

  @override
  String get displayName => "Wownero Integration";

  @override
  Widget get icon => const Icon(Icons.currency_exchange, size: 32);

  @override
  TestSuiteStatus get status => _status;

  @override
  Stream<TestSuiteStatus> get statusStream => _statusController.stream;

  @override
  Future<TestResult> runTests() async {
    final stopwatch = Stopwatch()..start();
    
    try {
      _updateStatus(TestSuiteStatus.running);
      
      Logging.instance.log(Level.info, "Starting Wownero integration test suite...");

      await _testWowneroMnemonicGeneration();
      
      stopwatch.stop();
      _updateStatus(TestSuiteStatus.passed);
      
      return TestResult(
        success: true,
        message: "üëçüëç All Wownero integration tests passed successfully",
        executionTime: stopwatch.elapsed,
      );
      
    } catch (e, stackTrace) {
      stopwatch.stop();
      _updateStatus(TestSuiteStatus.failed);
      
      Logging.instance.log(Level.error, 
        "Wownero integration test suite failed: $e\n$stackTrace"
      );
      
      return TestResult(
        success: false,
        message: "Wownero integration tests failed: $e",
        executionTime: stopwatch.elapsed,
      );
    }
  }

  Future<void> _testWowneroMnemonicGeneration() async {
    Logging.instance.log(Level.info, "Testing Wownero mnemonic generation and wallet creation...");
    
    final tempDir = await StackFileSystem.applicationRootDirectory();
    final walletName = "test_wownero_wallet_${Random().nextInt(10000)}";
    final walletPath = "${tempDir.path}/$walletName";
    const walletPassword = "1";
    
    try {
      // Test 16-word mnemonic generation for Wownero.
      await _testWowneroWalletCreation(
        walletPath: "${walletPath}_16", 
        password: walletPassword,
        seedType: lib_monero.WowneroSeedType.sixteen,
        expectedWordCount: 16,
      );
      
      // Test 25-word mnemonic generation for Wownero.
      await _testWowneroWalletCreation(
        walletPath: "${walletPath}_25",
        password: walletPassword,
        seedType: lib_monero.WowneroSeedType.twentyFive,
        expectedWordCount: 25,
      );
      
      Logging.instance.log(Level.info, "üëç Wownero mnemonic generation tests passed");
      
    } finally {
      // Cleanup test wallet files.
      await _cleanupTestWallets([
        "${walletPath}_16",
        "${walletPath}_25",
      ]);
    }
  }

  /// Tests Wownero wallet creation with different seed types.
  ///
  /// Attempts to ensure validity of the Wownero FFI integration.
  Future<void> _testWowneroWalletCreation({
    required String walletPath,
    required String password,
    required lib_monero.WowneroSeedType seedType,
    required int expectedWordCount,
  }) async {
    lib_monero.Wallet? wallet;
    
    try {
      // Create new Wownero wallet with specified seed type.
      wallet = await lib_monero.WowneroWallet.create(
        path: walletPath,
        password: password,
        seedType: seedType,
        seedOffset: "",
      );
      
      // Validate mnemonic word count.
      final mnemonic = wallet.getSeed();
      final words = mnemonic.split(' ');
      
      if (words.length != expectedWordCount) {
        throw Exception(
          "Expected $expectedWordCount words, got ${words.length}: $mnemonic"
        );
      }
      
      // Validate wallet address generation.
      final address = wallet.getAddress();
      if (address.value.isEmpty) {
        throw Exception("Generated Wownero wallet has empty address");
      }
      
      // Validate that this is a Wownero address (starts with 'W' for mainnet).
      if (!address.value.startsWith('W')) {
        throw Exception("Generated address does not appear to be a valid Wownero address: ${address.value}");
      }
      
      // Validate key derivation
      final secretSpendKey = wallet.getPrivateSpendKey();
      final secretViewKey = wallet.getPrivateViewKey();
      
      if (secretSpendKey.isEmpty || secretViewKey.isEmpty) {
        throw Exception("Generated Wownero wallet has empty keys");
      }
      
      Logging.instance.log(Level.info, 
        "Successfully created $expectedWordCount-word Wownero wallet: $address"
      );
      
    } finally {
      await wallet?.close();
    }
  }

  /// Cleans up test wallet files and dir created during the tests.
  Future<void> _cleanupTestWallets(List<String> walletPaths) async {
    for (final walletPath in walletPaths) {
      try {
        final walletFile = File(walletPath);
        final keysFile = File("$walletPath.keys");
        final addressFile = File("$walletPath.address.txt");
        
        if (await walletFile.exists()) {
          await walletFile.delete();
        }
        if (await keysFile.exists()) {
          await keysFile.delete();
        }
        if (await addressFile.exists()) {
          await addressFile.delete();
        }

        // Clean the directory if it's empty.
        final dir = Directory(walletPath);
        if (await dir.exists() && (await dir.list().isEmpty)) {
          await dir.delete();
        }
        
        Logging.instance.log(Level.info, "Cleaned up test Wownero wallet: $walletPath");
      } catch (e) {
        Logging.instance.log(Level.warning, "Failed to cleanup Wownero wallet $walletPath: $e");
      }
    }
  }

  void _updateStatus(TestSuiteStatus newStatus) {
    _status = newStatus;
    _statusController.add(newStatus);
  }

  @override
  Future<void> cleanup() async {
    await _statusController.close();
  }
}