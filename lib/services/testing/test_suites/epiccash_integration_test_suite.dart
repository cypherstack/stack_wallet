/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2025 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2025-08-14
 *
 */

import 'dart:async';
import 'package:flutter/material.dart';
import 'package:logger/logger.dart';
import 'package:flutter_libepiccash/lib.dart' as lib_epic;
import '../../../utilities/logger.dart';
import '../test_suite_interface.dart';
import '../testing_models.dart';

class EpiccashIntegrationTestSuite implements TestSuiteInterface {
  final StreamController<TestSuiteStatus> _statusController = 
      StreamController<TestSuiteStatus>.broadcast();
  TestSuiteStatus _status = TestSuiteStatus.waiting;

  @override
  String get displayName => "Epic Cash Integration";

  @override
  Widget get icon => const Icon(Icons.currency_exchange, size: 32);

  @override
  TestSuiteStatus get status => _status;

  @override
  Stream<TestSuiteStatus> get statusStream => _statusController.stream;

  @override
  Future<TestResult> runTests() async {
    final stopwatch = Stopwatch()..start();
    
    try {
      _updateStatus(TestSuiteStatus.running);
      
      Logging.instance.log(Level.info, "Starting Epic Cash integration test suite...");

      await _testEpicCashMnemonicGeneration();
      await _testEpicCashAddressValidation();
      
      stopwatch.stop();
      _updateStatus(TestSuiteStatus.passed);
      
      return TestResult(
        success: true,
        message: "üëçüëç All Epic Cash integration tests passed successfully",
        executionTime: stopwatch.elapsed,
      );
      
    } catch (e, stackTrace) {
      stopwatch.stop();
      _updateStatus(TestSuiteStatus.failed);
      
      Logging.instance.log(Level.error, 
        "Epic Cash integration test suite failed: $e\n$stackTrace"
      );
      
      return TestResult(
        success: false,
        message: "Epic Cash integration tests failed: $e",
        executionTime: stopwatch.elapsed,
      );
    }
  }

  Future<void> _testEpicCashMnemonicGeneration() async {
    Logging.instance.log(Level.info, "Testing Epic Cash mnemonic generation...");
    
    try {
      // Test Epic Cash mnemonic generation.
      final mnemonic = lib_epic.LibEpiccash.getMnemonic();
      
      // Validate mnemonic.
      if (mnemonic.isEmpty) {
        throw Exception("Generated Epic Cash mnemonic is empty");
      }
      
      final words = mnemonic.split(' ');
      
      // Epic Cash supports 12 and 24 word mnemonics.
      if (words.length != 12 && words.length != 24) {
        throw Exception(
          "Invalid Epic Cash mnemonic word count: expected 12 or 24, got ${words.length}"
        );
      }
      
      // Validate all words are non-empty.
      for (final word in words) {
        if (word.trim().isEmpty) {
          throw Exception("Epic Cash mnemonic contains empty word");
        }
      }
      
      Logging.instance.log(Level.info, 
        "üëç Epic Cash mnemonic generation test passed: ${words.length} words"
      );
      
    } catch (e) {
      throw Exception("Epic Cash mnemonic generation test failed: $e");
    }
  }

  Future<void> _testEpicCashAddressValidation() async {
    Logging.instance.log(Level.info, "Testing Epic Cash address validation...");
    
    try {
      // Test valid Epic Cash addresses (different formats).
      final validAddresses = [
        // Domain-based address.
        "esXrtQYZzs7DveZV4pxmXr8nntSjEkmxLddCF4hoEjVUh9nQYP7j@epicbox.stackwallet.com",
        "epicbox://esXrtQYZzs7DveZV4pxmXr8nntSjEkmxLddCF4hoEjVUh9nQYP7j@epicbox.fastepic.eu",
      ];
      
      final invalidAddresses = [
        "",
        "invalid_address",
        "http://",
        "https://",
        "@epicbox.stackwallet.com", // Missing username.
        "esXrtQYZzs7DveZV4pxmXr8nntSjEkmxLddCF4hoEjVUh9nQYP7j@", // Missing domain.
        "http://example.com@epicbox.fastepic.eu", // Mixed formats.
        "http://example.com:3415/v2/foreign",
        "https://example.com:3415/v2/foreign",
      ];
      
      // Test valid addresses.
      for (final address in validAddresses) {
        final isValid = lib_epic.LibEpiccash.validateSendAddress(address: address);
        if (!isValid) {
          throw Exception("Valid Epic Cash address marked as invalid: $address");
        }
      }
      
      // Test invalid addresses.
      for (final address in invalidAddresses) {
        final isValid = lib_epic.LibEpiccash.validateSendAddress(address: address);
        if (isValid) {
          throw Exception("Invalid Epic Cash address marked as valid: $address");
        }
      }
      
      Logging.instance.log(Level.info, 
        "üëç Epic Cash address validation test passed"
      );
      
    } catch (e) {
      throw Exception("Epic Cash address validation test failed: $e");
    }
  }

  void _updateStatus(TestSuiteStatus newStatus) {
    _status = newStatus;
    _statusController.add(newStatus);
  }

  @override
  Future<void> cleanup() async {
    await _statusController.close();
  }
}