/* 
 * This file is part of Stack Wallet.
 * 
 * Copyright (c) 2023 Cypher Stack
 * All Rights Reserved.
 * The code is distributed under GPLv3 license, see LICENSE file for details.
 * Generated by Cypher Stack on 2024-08-19
 *
 */

import 'package:flutter/material.dart';

import '../l10n/app_localizations.dart';

/// Helper service to simplify localization access throughout the application.
/// This service provides convenient methods to access localized strings
/// organized by category (navigation, buttons, forms, errors, dialogs).
class L10nService {
  static AppLocalizations? _localizations;

  /// Initialize the service with the current BuildContext.
  /// This should be called once when the app starts or when context changes.
  static void init(BuildContext context) {
    _localizations = AppLocalizations.of(context);
  }

  /// Get the current AppLocalizations instance.
  /// Returns null if not initialized.
  static AppLocalizations? get current => _localizations;

  // Navigation-related text access methods

  /// Get navigation tab labels and AppBar titles
  static String nav(String key) {
    if (_localizations == null) return key;

    switch (key) {
      case 'walletsTab':
        return _localizations!.walletsTab;
      case 'exchangeTab':
        return _localizations!.exchangeTab;
      case 'buyTab':
        return _localizations!.buyTab;
      case 'settingsTab':
        return _localizations!.settingsTab;
      case 'notificationsTitle':
        return _localizations!.notificationsTitle;
      case 'addressBookTitle':
        return _localizations!.addressBookTitle;
      case 'homeTitle':
        return _localizations!.homeTitle;
      case 'walletViewTitle':
        return _localizations!.walletViewTitle;
      case 'sendTitle':
        return _localizations!.sendTitle;
      case 'receiveTitle':
        return _localizations!.receiveTitle;
      case 'swapTitle':
        return _localizations!.swapTitle;
      case 'tokensTitle':
        return _localizations!.tokensTitle;
      default:
        return key;
    }
  }

  /// Get button labels and action text
  static String btn(String key) {
    if (_localizations == null) return key;

    switch (key) {
      case 'save':
        return _localizations!.saveButton;
      case 'cancel':
        return _localizations!.cancelButton;
      case 'continue':
        return _localizations!.continueButton;
      case 'edit':
        return _localizations!.editButton;
      case 'delete':
        return _localizations!.deleteButton;
      case 'next':
        return _localizations!.nextButton;
      case 'close':
        return _localizations!.closeButton;
      case 'ok':
        return _localizations!.okButton;
      case 'yes':
        return _localizations!.yesButton;
      case 'no':
        return _localizations!.noButton;
      case 'copy':
        return _localizations!.copyButton;
      case 'send':
        return _localizations!.sendButton;
      case 'receive':
        return _localizations!.receiveButton;
      case 'add':
        return _localizations!.addButton;
      default:
        return key;
    }
  }

  /// Get form field labels and input hints
  static String form(String key) {
    if (_localizations == null) return key;

    switch (key) {
      case 'name':
        return _localizations!.nameLabel;
      case 'amount':
        return _localizations!.amountLabel;
      case 'address':
        return _localizations!.addressLabel;
      case 'fee':
        return _localizations!.feeLabel;
      case 'note':
        return _localizations!.noteLabel;
      case 'password':
        return _localizations!.passwordLabel;
      case 'searchHint':
        return _localizations!.searchHint;
      case 'enterPasswordHint':
        return _localizations!.enterPasswordHint;
      case 'enterAmountHint':
        return _localizations!.enterAmountHint;
      case 'optionalHint':
        return _localizations!.optionalHint;
      default:
        return key;
    }
  }

  /// Get error messages and validation text
  static String error(String key) {
    if (_localizations == null) return key;

    switch (key) {
      case 'required':
        return _localizations!.requiredFieldError;
      case 'invalidEmail':
        return _localizations!.invalidEmailError;
      case 'invalidAddress':
        return _localizations!.invalidAddressError;
      case 'insufficientFunds':
        return _localizations!.insufficientFundsError;
      case 'network':
        return _localizations!.networkError;
      case 'transactionFailed':
        return _localizations!.transactionFailed;
      default:
        return key;
    }
  }

  /// Get status messages
  static String status(String key) {
    if (_localizations == null) return key;

    switch (key) {
      case 'loading':
        return _localizations!.loadingStatus;
      case 'processing':
        return _localizations!.processingStatus;
      case 'syncing':
        return _localizations!.syncingStatus;
      case 'completed':
        return _localizations!.completedStatus;
      case 'pending':
        return _localizations!.pendingStatus;
      case 'confirmed':
        return _localizations!.confirmedStatus;
      default:
        return key;
    }
  }

  // Convenience methods for common use cases

  /// Quick access to AppBar titles
  static String appBarTitle(String screenName) {
    return nav('${screenName}Title');
  }

  /// Quick access to tab labels
  static String tabLabel(String tabName) {
    return nav('${tabName}Tab');
  }

  /// Quick access to form labels
  static String formLabel(String fieldName) {
    return form(fieldName);
  }

  /// Quick access to button labels
  static String buttonLabel(String buttonName) {
    return btn(buttonName);
  }

  /// Quick access to error messages
  static String errorMessage(String errorType) {
    return error(errorType);
  }

  /// Quick access to status messages
  static String statusMessage(String statusType) {
    return status(statusType);
  }

  // Dynamic content helpers for future use

  /// Format amount with currency (for future parameterized translations)
  static String formatAmount(String currency, double value) {
    // TODO: Implement parameterized translation when ARB supports it
    return '$value $currency';
  }

  /// Format transaction status (for future parameterized translations)
  static String formatTransaction(String type, String status) {
    // TODO: Implement parameterized translation when ARB supports it
    return '$type: $status';
  }

  /// Handle pluralization (for future implementation)
  static String plural(String key, int count) {
    // TODO: Implement proper pluralization when ARB supports it
    if (count == 1) {
      return key;
    } else {
      return '${key}s';
    }
  }
}
