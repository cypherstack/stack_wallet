import 'dart:typed_data';

import 'package:pointycastle/export.dart';
import 'package:unorm_dart/unorm_dart.dart';

import 'extensions/extensions.dart';

abstract class ElectrumSeedUtils {
  static const kSeedPrefix = "01"; // standard
  static const kSeedPrefixSegwit = "100"; // segwit
  static const kSeedPrefix2fa = "101"; // 2FA standard
  static const kSeedPrefix2faSegwit = "102"; // 2FA segwit

  static Uint8List electrumMnemonicToSeedBytes(
    final String mnemonic, {
    final String passphrase = "",
  }) {
    final salt = Uint8List.fromList([
      ..."electrum".toUint8ListFromUtf8,
      ...normalize(passphrase).toUint8ListFromUtf8,
    ]);

    final kdf = PBKDF2KeyDerivator(HMac.withDigest(SHA512Digest()))
      ..init(Pbkdf2Parameters(salt, 2048, 64));

    return kdf.process(normalize(mnemonic).toUint8ListFromUtf8);
  }

  // based on https://electrum.readthedocs.io/en/latest/seedphrase.html#version-number
  static String electrumMnemonicVersion(
    final String mnemonic, {
    final String passphrase = "",
  }) {
    final normalized = normalize(mnemonic).toUint8ListFromUtf8;

    final hash = _hmacHex(normalized);

    final length = int.parse(hash[0], radix: 16) + 2;

    return hash.substring(0, length);
  }

  static bool isNewSeed(final String mnemonic, {String prefix = kSeedPrefix}) {
    final normalized = normalize(mnemonic).toUint8ListFromUtf8;
    final hash = _hmacHex(normalized);
    return hash.startsWith(prefix);
  }

  static String normalize(final String mnemonic) {
    final characters = String.fromCharCodes(
      nfkd(
        mnemonic,
      ).toLowerCase().runes.where((e) => !_kNonZeroCCCCodeUnits.contains(e)),
    ).split(RegExp(r"\s+")).join(" ").trim().split("");

    final buffer = StringBuffer();

    for (int i = 0; i < characters.length; i++) {
      final char = characters[i];
      final isSpace = RegExp(r"\s").hasMatch(char);
      assert(char.runes.length == 1);

      if (isSpace && i > 0 && i < characters.length - 1) {
        final prev = characters[i - 1];
        final next = characters[i + 1];
        if (_isCJK(prev.runes.first) && _isCJK(next.runes.first)) {
          continue;
        }
      }

      buffer.write(char);
    }

    return buffer.toString();
  }

  static String _hmacHex(Uint8List message) =>
      (HMac.withDigest(SHA512Digest())
            ..init(KeyParameter("Seed version".toUint8ListFromUtf8)))
          .process(message)
          .toHex;

  static bool _isCJK(int code) {
    for (final (min, max, _) in _kCjkIntervals) {
      if (min <= code && code <= max) {
        return true;
      }
    }
    return false;
  }
}

// https://www.unicode.org/reports/tr44/tr44-34.html#Canonical_Combining_Class_Values
// generated from https://www.unicode.org/Public/UCD/latest/ucd/UnicodeData.txt
const _kNonZeroCCCCodeUnits = {
  768,
  769,
  770,
  771,
  772,
  773,
  774,
  775,
  776,
  777,
  778,
  779,
  780,
  781,
  782,
  783,
  784,
  785,
  786,
  787,
  788,
  789,
  790,
  791,
  792,
  793,
  794,
  795,
  796,
  797,
  798,
  799,
  800,
  801,
  802,
  803,
  804,
  805,
  806,
  807,
  808,
  809,
  810,
  811,
  812,
  813,
  814,
  815,
  816,
  817,
  818,
  819,
  820,
  821,
  822,
  823,
  824,
  825,
  826,
  827,
  828,
  829,
  830,
  831,
  832,
  833,
  834,
  835,
  836,
  837,
  838,
  839,
  840,
  841,
  842,
  843,
  844,
  845,
  846,
  848,
  849,
  850,
  851,
  852,
  853,
  854,
  855,
  856,
  857,
  858,
  859,
  860,
  861,
  862,
  863,
  864,
  865,
  866,
  867,
  868,
  869,
  870,
  871,
  872,
  873,
  874,
  875,
  876,
  877,
  878,
  879,
  1155,
  1156,
  1157,
  1158,
  1159,
  1425,
  1426,
  1427,
  1428,
  1429,
  1430,
  1431,
  1432,
  1433,
  1434,
  1435,
  1436,
  1437,
  1438,
  1439,
  1440,
  1441,
  1442,
  1443,
  1444,
  1445,
  1446,
  1447,
  1448,
  1449,
  1450,
  1451,
  1452,
  1453,
  1454,
  1455,
  1456,
  1457,
  1458,
  1459,
  1460,
  1461,
  1462,
  1463,
  1464,
  1465,
  1466,
  1467,
  1468,
  1469,
  1471,
  1473,
  1474,
  1476,
  1477,
  1479,
  1552,
  1553,
  1554,
  1555,
  1556,
  1557,
  1558,
  1559,
  1560,
  1561,
  1562,
  1611,
  1612,
  1613,
  1614,
  1615,
  1616,
  1617,
  1618,
  1619,
  1620,
  1621,
  1622,
  1623,
  1624,
  1625,
  1626,
  1627,
  1628,
  1629,
  1630,
  1631,
  1648,
  1750,
  1751,
  1752,
  1753,
  1754,
  1755,
  1756,
  1759,
  1760,
  1761,
  1762,
  1763,
  1764,
  1767,
  1768,
  1770,
  1771,
  1772,
  1773,
  1809,
  1840,
  1841,
  1842,
  1843,
  1844,
  1845,
  1846,
  1847,
  1848,
  1849,
  1850,
  1851,
  1852,
  1853,
  1854,
  1855,
  1856,
  1857,
  1858,
  1859,
  1860,
  1861,
  1862,
  1863,
  1864,
  1865,
  1866,
  2027,
  2028,
  2029,
  2030,
  2031,
  2032,
  2033,
  2034,
  2035,
  2045,
  2070,
  2071,
  2072,
  2073,
  2075,
  2076,
  2077,
  2078,
  2079,
  2080,
  2081,
  2082,
  2083,
  2085,
  2086,
  2087,
  2089,
  2090,
  2091,
  2092,
  2093,
  2137,
  2138,
  2139,
  2199,
  2200,
  2201,
  2202,
  2203,
  2204,
  2205,
  2206,
  2207,
  2250,
  2251,
  2252,
  2253,
  2254,
  2255,
  2256,
  2257,
  2258,
  2259,
  2260,
  2261,
  2262,
  2263,
  2264,
  2265,
  2266,
  2267,
  2268,
  2269,
  2270,
  2271,
  2272,
  2273,
  2275,
  2276,
  2277,
  2278,
  2279,
  2280,
  2281,
  2282,
  2283,
  2284,
  2285,
  2286,
  2287,
  2288,
  2289,
  2290,
  2291,
  2292,
  2293,
  2294,
  2295,
  2296,
  2297,
  2298,
  2299,
  2300,
  2301,
  2302,
  2303,
  2364,
  2381,
  2385,
  2386,
  2387,
  2388,
  2492,
  2509,
  2558,
  2620,
  2637,
  2748,
  2765,
  2876,
  2893,
  3021,
  3132,
  3149,
  3157,
  3158,
  3260,
  3277,
  3387,
  3388,
  3405,
  3530,
  3640,
  3641,
  3642,
  3656,
  3657,
  3658,
  3659,
  3768,
  3769,
  3770,
  3784,
  3785,
  3786,
  3787,
  3864,
  3865,
  3893,
  3895,
  3897,
  3953,
  3954,
  3956,
  3962,
  3963,
  3964,
  3965,
  3968,
  3970,
  3971,
  3972,
  3974,
  3975,
  4038,
  4151,
  4153,
  4154,
  4237,
  4957,
  4958,
  4959,
  5908,
  5909,
  5940,
  6098,
  6109,
  6313,
  6457,
  6458,
  6459,
  6679,
  6680,
  6752,
  6773,
  6774,
  6775,
  6776,
  6777,
  6778,
  6779,
  6780,
  6783,
  6832,
  6833,
  6834,
  6835,
  6836,
  6837,
  6838,
  6839,
  6840,
  6841,
  6842,
  6843,
  6844,
  6845,
  6847,
  6848,
  6849,
  6850,
  6851,
  6852,
  6853,
  6854,
  6855,
  6856,
  6857,
  6858,
  6859,
  6860,
  6861,
  6862,
  6863,
  6864,
  6865,
  6866,
  6867,
  6868,
  6869,
  6870,
  6871,
  6872,
  6873,
  6874,
  6875,
  6876,
  6877,
  6880,
  6881,
  6882,
  6883,
  6884,
  6885,
  6886,
  6887,
  6888,
  6889,
  6890,
  6891,
  6964,
  6980,
  7019,
  7020,
  7021,
  7022,
  7023,
  7024,
  7025,
  7026,
  7027,
  7082,
  7083,
  7142,
  7154,
  7155,
  7223,
  7376,
  7377,
  7378,
  7380,
  7381,
  7382,
  7383,
  7384,
  7385,
  7386,
  7387,
  7388,
  7389,
  7390,
  7391,
  7392,
  7394,
  7395,
  7396,
  7397,
  7398,
  7399,
  7400,
  7405,
  7412,
  7416,
  7417,
  7616,
  7617,
  7618,
  7619,
  7620,
  7621,
  7622,
  7623,
  7624,
  7625,
  7626,
  7627,
  7628,
  7629,
  7630,
  7631,
  7632,
  7633,
  7634,
  7635,
  7636,
  7637,
  7638,
  7639,
  7640,
  7641,
  7642,
  7643,
  7644,
  7645,
  7646,
  7647,
  7648,
  7649,
  7650,
  7651,
  7652,
  7653,
  7654,
  7655,
  7656,
  7657,
  7658,
  7659,
  7660,
  7661,
  7662,
  7663,
  7664,
  7665,
  7666,
  7667,
  7668,
  7669,
  7670,
  7671,
  7672,
  7673,
  7674,
  7675,
  7676,
  7677,
  7678,
  7679,
  8400,
  8401,
  8402,
  8403,
  8404,
  8405,
  8406,
  8407,
  8408,
  8409,
  8410,
  8411,
  8412,
  8417,
  8421,
  8422,
  8423,
  8424,
  8425,
  8426,
  8427,
  8428,
  8429,
  8430,
  8431,
  8432,
  11503,
  11504,
  11505,
  11647,
  11744,
  11745,
  11746,
  11747,
  11748,
  11749,
  11750,
  11751,
  11752,
  11753,
  11754,
  11755,
  11756,
  11757,
  11758,
  11759,
  11760,
  11761,
  11762,
  11763,
  11764,
  11765,
  11766,
  11767,
  11768,
  11769,
  11770,
  11771,
  11772,
  11773,
  11774,
  11775,
  12330,
  12331,
  12332,
  12333,
  12334,
  12335,
  12441,
  12442,
  42607,
  42612,
  42613,
  42614,
  42615,
  42616,
  42617,
  42618,
  42619,
  42620,
  42621,
  42654,
  42655,
  42736,
  42737,
  43014,
  43052,
  43204,
  43232,
  43233,
  43234,
  43235,
  43236,
  43237,
  43238,
  43239,
  43240,
  43241,
  43242,
  43243,
  43244,
  43245,
  43246,
  43247,
  43248,
  43249,
  43307,
  43308,
  43309,
  43347,
  43443,
  43456,
  43696,
  43698,
  43699,
  43700,
  43703,
  43704,
  43710,
  43711,
  43713,
  43766,
  44013,
  64286,
  65056,
  65057,
  65058,
  65059,
  65060,
  65061,
  65062,
  65063,
  65064,
  65065,
  65066,
  65067,
  65068,
  65069,
  65070,
  65071,
  66045,
  66272,
  66422,
  66423,
  66424,
  66425,
  66426,
  68109,
  68111,
  68152,
  68153,
  68154,
  68159,
  68325,
  68326,
  68900,
  68901,
  68902,
  68903,
  68969,
  68970,
  68971,
  68972,
  68973,
  69291,
  69292,
  69370,
  69371,
  69373,
  69374,
  69375,
  69446,
  69447,
  69448,
  69449,
  69450,
  69451,
  69452,
  69453,
  69454,
  69455,
  69456,
  69506,
  69507,
  69508,
  69509,
  69702,
  69744,
  69759,
  69817,
  69818,
  69888,
  69889,
  69890,
  69939,
  69940,
  70003,
  70080,
  70090,
  70197,
  70198,
  70377,
  70378,
  70459,
  70460,
  70477,
  70502,
  70503,
  70504,
  70505,
  70506,
  70507,
  70508,
  70512,
  70513,
  70514,
  70515,
  70516,
  70606,
  70607,
  70608,
  70722,
  70726,
  70750,
  70850,
  70851,
  71103,
  71104,
  71231,
  71350,
  71351,
  71467,
  71737,
  71738,
  71997,
  71998,
  72003,
  72160,
  72244,
  72263,
  72345,
  72767,
  73026,
  73028,
  73029,
  73111,
  73537,
  73538,
  90415,
  92912,
  92913,
  92914,
  92915,
  92916,
  92976,
  92977,
  92978,
  92979,
  92980,
  92981,
  92982,
  94192,
  94193,
  113822,
  119141,
  119142,
  119143,
  119144,
  119145,
  119149,
  119150,
  119151,
  119152,
  119153,
  119154,
  119163,
  119164,
  119165,
  119166,
  119167,
  119168,
  119169,
  119170,
  119173,
  119174,
  119175,
  119176,
  119177,
  119178,
  119179,
  119210,
  119211,
  119212,
  119213,
  119362,
  119363,
  119364,
  122880,
  122881,
  122882,
  122883,
  122884,
  122885,
  122886,
  122888,
  122889,
  122890,
  122891,
  122892,
  122893,
  122894,
  122895,
  122896,
  122897,
  122898,
  122899,
  122900,
  122901,
  122902,
  122903,
  122904,
  122907,
  122908,
  122909,
  122910,
  122911,
  122912,
  122913,
  122915,
  122916,
  122918,
  122919,
  122920,
  122921,
  122922,
  123023,
  123184,
  123185,
  123186,
  123187,
  123188,
  123189,
  123190,
  123566,
  123628,
  123629,
  123630,
  123631,
  124140,
  124141,
  124142,
  124143,
  124398,
  124399,
  124643,
  124646,
  124654,
  124655,
  124661,
  125136,
  125137,
  125138,
  125139,
  125140,
  125141,
  125142,
  125252,
  125253,
  125254,
  125255,
  125256,
  125257,
  125258,
};

// see https://github.com/spesmilo/electrum/blob/master/electrum/mnemonic.py#L39-L70
// which references http://www.asahi-net.or.jp/~ax2s-kmtn/ref/unicode/e_asia.html
const _kCjkIntervals = [
  (0x4E00, 0x9FFF, "CJK Unified Ideographs"),
  (0x3400, 0x4DBF, "CJK Unified Ideographs Extension A"),
  (0x20000, 0x2A6DF, "CJK Unified Ideographs Extension B"),
  (0x2A700, 0x2B73F, "CJK Unified Ideographs Extension C"),
  (0x2B740, 0x2B81F, "CJK Unified Ideographs Extension D"),
  (0xF900, 0xFAFF, "CJK Compatibility Ideographs"),
  (0x2F800, 0x2FA1D, "CJK Compatibility Ideographs Supplement"),
  (0x3190, 0x319F, "Kanbun"),
  (0x2E80, 0x2EFF, "CJK Radicals Supplement"),
  (0x2F00, 0x2FDF, "CJK Radicals"),
  (0x31C0, 0x31EF, "CJK Strokes"),
  (0x2FF0, 0x2FFF, "Ideographic Description Characters"),
  (0xE0100, 0xE01EF, "Variation Selectors Supplement"),
  (0x3100, 0x312F, "Bopomofo"),
  (0x31A0, 0x31BF, "Bopomofo Extended"),
  (0xFF00, 0xFFEF, "Halfwidth and Fullwidth Forms"),
  (0x3040, 0x309F, "Hiragana"),
  (0x30A0, 0x30FF, "Katakana"),
  (0x31F0, 0x31FF, "Katakana Phonetic Extensions"),
  (0x1B000, 0x1B0FF, "Kana Supplement"),
  (0xAC00, 0xD7AF, "Hangul Syllables"),
  (0x1100, 0x11FF, "Hangul Jamo"),
  (0xA960, 0xA97F, "Hangul Jamo Extended A"),
  (0xD7B0, 0xD7FF, "Hangul Jamo Extended B"),
  (0x3130, 0x318F, "Hangul Compatibility Jamo"),
  (0xA4D0, 0xA4FF, "Lisu"),
  (0x16F00, 0x16F9F, "Miao"),
  (0xA000, 0xA48F, "Yi Syllables"),
  (0xA490, 0xA4CF, "Yi Radicals"),
];
