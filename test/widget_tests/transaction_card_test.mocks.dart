// Mocks generated by Mockito 5.3.2 from annotations
// in stackwallet/test/widget_tests/transaction_card_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i16;
import 'dart:ui' as _i18;

import 'package:decimal/decimal.dart' as _i9;
import 'package:flutter/foundation.dart' as _i4;
import 'package:flutter_riverpod/flutter_riverpod.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:stackwallet/electrumx_rpc/cached_electrumx.dart' as _i12;
import 'package:stackwallet/electrumx_rpc/electrumx.dart' as _i11;
import 'package:stackwallet/models/models.dart' as _i8;
import 'package:stackwallet/pages/exchange_view/sub_widgets/exchange_rate_sheet.dart'
    as _i22;
import 'package:stackwallet/services/coins/coin_service.dart' as _i7;
import 'package:stackwallet/services/coins/firo/firo_wallet.dart' as _i19;
import 'package:stackwallet/services/coins/manager.dart' as _i6;
import 'package:stackwallet/services/locale_service.dart' as _i20;
import 'package:stackwallet/services/node_service.dart' as _i3;
import 'package:stackwallet/services/notes_service.dart' as _i25;
import 'package:stackwallet/services/price_service.dart' as _i24;
import 'package:stackwallet/services/transaction_notification_tracker.dart'
    as _i10;
import 'package:stackwallet/services/wallets.dart' as _i14;
import 'package:stackwallet/services/wallets_service.dart' as _i2;
import 'package:stackwallet/utilities/enums/backup_frequency_type.dart' as _i23;
import 'package:stackwallet/utilities/enums/coin_enum.dart' as _i15;
import 'package:stackwallet/utilities/enums/sync_type_enum.dart' as _i21;
import 'package:stackwallet/utilities/prefs.dart' as _i17;
import 'package:tuple/tuple.dart' as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWalletsService_0 extends _i1.SmartFake
    implements _i2.WalletsService {
  _FakeWalletsService_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNodeService_1 extends _i1.SmartFake implements _i3.NodeService {
  _FakeNodeService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeChangeNotifierProvider_2<Notifier extends _i4.ChangeNotifier?>
    extends _i1.SmartFake implements _i5.ChangeNotifierProvider<Notifier> {
  _FakeChangeNotifierProvider_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeManager_3 extends _i1.SmartFake implements _i6.Manager {
  _FakeManager_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoinServiceAPI_4 extends _i1.SmartFake
    implements _i7.CoinServiceAPI {
  _FakeCoinServiceAPI_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFeeObject_5 extends _i1.SmartFake implements _i8.FeeObject {
  _FakeFeeObject_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDecimal_6 extends _i1.SmartFake implements _i9.Decimal {
  _FakeDecimal_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionData_7 extends _i1.SmartFake
    implements _i8.TransactionData {
  _FakeTransactionData_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTransactionNotificationTracker_8 extends _i1.SmartFake
    implements _i10.TransactionNotificationTracker {
  _FakeTransactionNotificationTracker_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUtxoData_9 extends _i1.SmartFake implements _i8.UtxoData {
  _FakeUtxoData_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeElectrumX_10 extends _i1.SmartFake implements _i11.ElectrumX {
  _FakeElectrumX_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCachedElectrumX_11 extends _i1.SmartFake
    implements _i12.CachedElectrumX {
  _FakeCachedElectrumX_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_12 extends _i1.SmartFake implements Duration {
  _FakeDuration_12(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTuple2_13<T1, T2> extends _i1.SmartFake
    implements _i13.Tuple2<T1, T2> {
  _FakeTuple2_13(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Wallets].
///
/// See the documentation for Mockito's code generation for more information.
class MockWallets extends _i1.Mock implements _i14.Wallets {
  MockWallets() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WalletsService get walletsService => (super.noSuchMethod(
        Invocation.getter(#walletsService),
        returnValue: _FakeWalletsService_0(
          this,
          Invocation.getter(#walletsService),
        ),
      ) as _i2.WalletsService);
  @override
  set walletsService(_i2.WalletsService? _walletsService) => super.noSuchMethod(
        Invocation.setter(
          #walletsService,
          _walletsService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i3.NodeService get nodeService => (super.noSuchMethod(
        Invocation.getter(#nodeService),
        returnValue: _FakeNodeService_1(
          this,
          Invocation.getter(#nodeService),
        ),
      ) as _i3.NodeService);
  @override
  set nodeService(_i3.NodeService? _nodeService) => super.noSuchMethod(
        Invocation.setter(
          #nodeService,
          _nodeService,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasWallets => (super.noSuchMethod(
        Invocation.getter(#hasWallets),
        returnValue: false,
      ) as bool);
  @override
  List<_i5.ChangeNotifierProvider<_i6.Manager>> get managerProviders =>
      (super.noSuchMethod(
        Invocation.getter(#managerProviders),
        returnValue: <_i5.ChangeNotifierProvider<_i6.Manager>>[],
      ) as List<_i5.ChangeNotifierProvider<_i6.Manager>>);
  @override
  List<_i6.Manager> get managers => (super.noSuchMethod(
        Invocation.getter(#managers),
        returnValue: <_i6.Manager>[],
      ) as List<_i6.Manager>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  List<String> getWalletIdsFor({required _i15.Coin? coin}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getWalletIdsFor,
          [],
          {#coin: coin},
        ),
        returnValue: <String>[],
      ) as List<String>);
  @override
  Map<_i15.Coin, List<_i5.ChangeNotifierProvider<_i6.Manager>>>
      getManagerProvidersByCoin() => (super.noSuchMethod(
            Invocation.method(
              #getManagerProvidersByCoin,
              [],
            ),
            returnValue: <_i15.Coin,
                List<_i5.ChangeNotifierProvider<_i6.Manager>>>{},
          ) as Map<_i15.Coin, List<_i5.ChangeNotifierProvider<_i6.Manager>>>);
  @override
  _i5.ChangeNotifierProvider<_i6.Manager> getManagerProvider(
          String? walletId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getManagerProvider,
          [walletId],
        ),
        returnValue: _FakeChangeNotifierProvider_2<_i6.Manager>(
          this,
          Invocation.method(
            #getManagerProvider,
            [walletId],
          ),
        ),
      ) as _i5.ChangeNotifierProvider<_i6.Manager>);
  @override
  _i6.Manager getManager(String? walletId) => (super.noSuchMethod(
        Invocation.method(
          #getManager,
          [walletId],
        ),
        returnValue: _FakeManager_3(
          this,
          Invocation.method(
            #getManager,
            [walletId],
          ),
        ),
      ) as _i6.Manager);
  @override
  void addWallet({
    required String? walletId,
    required _i6.Manager? manager,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addWallet,
          [],
          {
            #walletId: walletId,
            #manager: manager,
          },
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeWallet({required String? walletId}) => super.noSuchMethod(
        Invocation.method(
          #removeWallet,
          [],
          {#walletId: walletId},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i16.Future<void> load(_i17.Prefs? prefs) => (super.noSuchMethod(
        Invocation.method(
          #load,
          [prefs],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> loadAfterStackRestore(
    _i17.Prefs? prefs,
    List<_i6.Manager>? managers,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadAfterStackRestore,
          [
            prefs,
            managers,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  void addListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Manager].
///
/// See the documentation for Mockito's code generation for more information.
class MockManager extends _i1.Mock implements _i6.Manager {
  MockManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isActiveWallet => (super.noSuchMethod(
        Invocation.getter(#isActiveWallet),
        returnValue: false,
      ) as bool);
  @override
  set isActiveWallet(bool? isActive) => super.noSuchMethod(
        Invocation.setter(
          #isActiveWallet,
          isActive,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i7.CoinServiceAPI get wallet => (super.noSuchMethod(
        Invocation.getter(#wallet),
        returnValue: _FakeCoinServiceAPI_4(
          this,
          Invocation.getter(#wallet),
        ),
      ) as _i7.CoinServiceAPI);
  @override
  bool get hasBackgroundRefreshListener => (super.noSuchMethod(
        Invocation.getter(#hasBackgroundRefreshListener),
        returnValue: false,
      ) as bool);
  @override
  _i15.Coin get coin => (super.noSuchMethod(
        Invocation.getter(#coin),
        returnValue: _i15.Coin.bitcoin,
      ) as _i15.Coin);
  @override
  bool get isRefreshing => (super.noSuchMethod(
        Invocation.getter(#isRefreshing),
        returnValue: false,
      ) as bool);
  @override
  bool get shouldAutoSync => (super.noSuchMethod(
        Invocation.getter(#shouldAutoSync),
        returnValue: false,
      ) as bool);
  @override
  set shouldAutoSync(bool? shouldAutoSync) => super.noSuchMethod(
        Invocation.setter(
          #shouldAutoSync,
          shouldAutoSync,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isFavorite => (super.noSuchMethod(
        Invocation.getter(#isFavorite),
        returnValue: false,
      ) as bool);
  @override
  set isFavorite(bool? markFavorite) => super.noSuchMethod(
        Invocation.setter(
          #isFavorite,
          markFavorite,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i16.Future<_i8.FeeObject> get fees => (super.noSuchMethod(
        Invocation.getter(#fees),
        returnValue: _i16.Future<_i8.FeeObject>.value(_FakeFeeObject_5(
          this,
          Invocation.getter(#fees),
        )),
      ) as _i16.Future<_i8.FeeObject>);
  @override
  _i16.Future<int> get maxFee => (super.noSuchMethod(
        Invocation.getter(#maxFee),
        returnValue: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  _i16.Future<String> get currentReceivingAddress => (super.noSuchMethod(
        Invocation.getter(#currentReceivingAddress),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  _i16.Future<_i9.Decimal> get availableBalance => (super.noSuchMethod(
        Invocation.getter(#availableBalance),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#availableBalance),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i9.Decimal get cachedAvailableBalance => (super.noSuchMethod(
        Invocation.getter(#cachedAvailableBalance),
        returnValue: _FakeDecimal_6(
          this,
          Invocation.getter(#cachedAvailableBalance),
        ),
      ) as _i9.Decimal);
  @override
  _i16.Future<_i9.Decimal> get pendingBalance => (super.noSuchMethod(
        Invocation.getter(#pendingBalance),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#pendingBalance),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i9.Decimal> get balanceMinusMaxFee => (super.noSuchMethod(
        Invocation.getter(#balanceMinusMaxFee),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#balanceMinusMaxFee),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i9.Decimal> get totalBalance => (super.noSuchMethod(
        Invocation.getter(#totalBalance),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#totalBalance),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i9.Decimal get cachedTotalBalance => (super.noSuchMethod(
        Invocation.getter(#cachedTotalBalance),
        returnValue: _FakeDecimal_6(
          this,
          Invocation.getter(#cachedTotalBalance),
        ),
      ) as _i9.Decimal);
  @override
  _i16.Future<List<String>> get allOwnAddresses => (super.noSuchMethod(
        Invocation.getter(#allOwnAddresses),
        returnValue: _i16.Future<List<String>>.value(<String>[]),
      ) as _i16.Future<List<String>>);
  @override
  _i16.Future<_i8.TransactionData> get transactionData => (super.noSuchMethod(
        Invocation.getter(#transactionData),
        returnValue:
            _i16.Future<_i8.TransactionData>.value(_FakeTransactionData_7(
          this,
          Invocation.getter(#transactionData),
        )),
      ) as _i16.Future<_i8.TransactionData>);
  @override
  _i16.Future<List<_i8.UtxoObject>> get unspentOutputs => (super.noSuchMethod(
        Invocation.getter(#unspentOutputs),
        returnValue:
            _i16.Future<List<_i8.UtxoObject>>.value(<_i8.UtxoObject>[]),
      ) as _i16.Future<List<_i8.UtxoObject>>);
  @override
  set walletName(String? newName) => super.noSuchMethod(
        Invocation.setter(
          #walletName,
          newName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get walletName => (super.noSuchMethod(
        Invocation.getter(#walletName),
        returnValue: '',
      ) as String);
  @override
  String get walletId => (super.noSuchMethod(
        Invocation.getter(#walletId),
        returnValue: '',
      ) as String);
  @override
  _i16.Future<List<String>> get mnemonic => (super.noSuchMethod(
        Invocation.getter(#mnemonic),
        returnValue: _i16.Future<List<String>>.value(<String>[]),
      ) as _i16.Future<List<String>>);
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i16.Future<void> updateNode(bool? shouldRefresh) => (super.noSuchMethod(
        Invocation.method(
          #updateNode,
          [shouldRefresh],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i16.Future<Map<String, dynamic>> prepareSend({
    required String? address,
    required int? satoshiAmount,
    Map<String, dynamic>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareSend,
          [],
          {
            #address: address,
            #satoshiAmount: satoshiAmount,
            #args: args,
          },
        ),
        returnValue:
            _i16.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i16.Future<Map<String, dynamic>>);
  @override
  _i16.Future<String> confirmSend({required Map<String, dynamic>? txData}) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmSend,
          [],
          {#txData: txData},
        ),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  _i16.Future<String> send({
    required String? toAddress,
    required int? amount,
    Map<String, String>? args = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
          {
            #toAddress: toAddress,
            #amount: amount,
            #args: args,
          },
        ),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  _i16.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  bool validateAddress(String? address) => (super.noSuchMethod(
        Invocation.method(
          #validateAddress,
          [address],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i16.Future<bool> testNetworkConnection() => (super.noSuchMethod(
        Invocation.method(
          #testNetworkConnection,
          [],
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);
  @override
  _i16.Future<void> initializeNew() => (super.noSuchMethod(
        Invocation.method(
          #initializeNew,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> initializeExisting() => (super.noSuchMethod(
        Invocation.method(
          #initializeExisting,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> recoverFromMnemonic({
    required String? mnemonic,
    required int? maxUnusedAddressGap,
    required int? maxNumberOfIndexesToCheck,
    required int? height,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recoverFromMnemonic,
          [],
          {
            #mnemonic: mnemonic,
            #maxUnusedAddressGap: maxUnusedAddressGap,
            #maxNumberOfIndexesToCheck: maxNumberOfIndexesToCheck,
            #height: height,
          },
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> exitCurrentWallet() => (super.noSuchMethod(
        Invocation.method(
          #exitCurrentWallet,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> fullRescan(
    int? maxUnusedAddressGap,
    int? maxNumberOfIndexesToCheck,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fullRescan,
          [
            maxUnusedAddressGap,
            maxNumberOfIndexesToCheck,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<bool> isOwnAddress(String? address) => (super.noSuchMethod(
        Invocation.method(
          #isOwnAddress,
          [address],
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);
  @override
  _i16.Future<int> estimateFeeFor(
    int? satoshiAmount,
    int? feeRate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #estimateFeeFor,
          [
            satoshiAmount,
            feeRate,
          ],
        ),
        returnValue: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  _i16.Future<bool> generateNewAddress() => (super.noSuchMethod(
        Invocation.method(
          #generateNewAddress,
          [],
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);
  @override
  void addListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CoinServiceAPI].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoinServiceAPI extends _i1.Mock implements _i7.CoinServiceAPI {
  MockCoinServiceAPI() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set onIsActiveWalletChanged(void Function(bool)? _onIsActiveWalletChanged) =>
      super.noSuchMethod(
        Invocation.setter(
          #onIsActiveWalletChanged,
          _onIsActiveWalletChanged,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i15.Coin get coin => (super.noSuchMethod(
        Invocation.getter(#coin),
        returnValue: _i15.Coin.bitcoin,
      ) as _i15.Coin);
  @override
  bool get isRefreshing => (super.noSuchMethod(
        Invocation.getter(#isRefreshing),
        returnValue: false,
      ) as bool);
  @override
  bool get shouldAutoSync => (super.noSuchMethod(
        Invocation.getter(#shouldAutoSync),
        returnValue: false,
      ) as bool);
  @override
  set shouldAutoSync(bool? shouldAutoSync) => super.noSuchMethod(
        Invocation.setter(
          #shouldAutoSync,
          shouldAutoSync,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isFavorite => (super.noSuchMethod(
        Invocation.getter(#isFavorite),
        returnValue: false,
      ) as bool);
  @override
  set isFavorite(bool? markFavorite) => super.noSuchMethod(
        Invocation.setter(
          #isFavorite,
          markFavorite,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i16.Future<_i8.FeeObject> get fees => (super.noSuchMethod(
        Invocation.getter(#fees),
        returnValue: _i16.Future<_i8.FeeObject>.value(_FakeFeeObject_5(
          this,
          Invocation.getter(#fees),
        )),
      ) as _i16.Future<_i8.FeeObject>);
  @override
  _i16.Future<int> get maxFee => (super.noSuchMethod(
        Invocation.getter(#maxFee),
        returnValue: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  _i16.Future<String> get currentReceivingAddress => (super.noSuchMethod(
        Invocation.getter(#currentReceivingAddress),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  _i16.Future<_i9.Decimal> get availableBalance => (super.noSuchMethod(
        Invocation.getter(#availableBalance),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#availableBalance),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i9.Decimal> get pendingBalance => (super.noSuchMethod(
        Invocation.getter(#pendingBalance),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#pendingBalance),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i9.Decimal> get totalBalance => (super.noSuchMethod(
        Invocation.getter(#totalBalance),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#totalBalance),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i9.Decimal> get balanceMinusMaxFee => (super.noSuchMethod(
        Invocation.getter(#balanceMinusMaxFee),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#balanceMinusMaxFee),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<List<String>> get allOwnAddresses => (super.noSuchMethod(
        Invocation.getter(#allOwnAddresses),
        returnValue: _i16.Future<List<String>>.value(<String>[]),
      ) as _i16.Future<List<String>>);
  @override
  _i16.Future<_i8.TransactionData> get transactionData => (super.noSuchMethod(
        Invocation.getter(#transactionData),
        returnValue:
            _i16.Future<_i8.TransactionData>.value(_FakeTransactionData_7(
          this,
          Invocation.getter(#transactionData),
        )),
      ) as _i16.Future<_i8.TransactionData>);
  @override
  _i16.Future<List<_i8.UtxoObject>> get unspentOutputs => (super.noSuchMethod(
        Invocation.getter(#unspentOutputs),
        returnValue:
            _i16.Future<List<_i8.UtxoObject>>.value(<_i8.UtxoObject>[]),
      ) as _i16.Future<List<_i8.UtxoObject>>);
  @override
  set walletName(String? newName) => super.noSuchMethod(
        Invocation.setter(
          #walletName,
          newName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get walletName => (super.noSuchMethod(
        Invocation.getter(#walletName),
        returnValue: '',
      ) as String);
  @override
  String get walletId => (super.noSuchMethod(
        Invocation.getter(#walletId),
        returnValue: '',
      ) as String);
  @override
  _i16.Future<List<String>> get mnemonic => (super.noSuchMethod(
        Invocation.getter(#mnemonic),
        returnValue: _i16.Future<List<String>>.value(<String>[]),
      ) as _i16.Future<List<String>>);
  @override
  bool get hasCalledExit => (super.noSuchMethod(
        Invocation.getter(#hasCalledExit),
        returnValue: false,
      ) as bool);
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  _i16.Future<Map<String, dynamic>> prepareSend({
    required String? address,
    required int? satoshiAmount,
    Map<String, dynamic>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareSend,
          [],
          {
            #address: address,
            #satoshiAmount: satoshiAmount,
            #args: args,
          },
        ),
        returnValue:
            _i16.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i16.Future<Map<String, dynamic>>);
  @override
  _i16.Future<String> confirmSend({required Map<String, dynamic>? txData}) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmSend,
          [],
          {#txData: txData},
        ),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  _i16.Future<String> send({
    required String? toAddress,
    required int? amount,
    Map<String, String>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
          {
            #toAddress: toAddress,
            #amount: amount,
            #args: args,
          },
        ),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  _i16.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> updateNode(bool? shouldRefresh) => (super.noSuchMethod(
        Invocation.method(
          #updateNode,
          [shouldRefresh],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  bool validateAddress(String? address) => (super.noSuchMethod(
        Invocation.method(
          #validateAddress,
          [address],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i16.Future<bool> testNetworkConnection() => (super.noSuchMethod(
        Invocation.method(
          #testNetworkConnection,
          [],
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);
  @override
  _i16.Future<void> recoverFromMnemonic({
    required String? mnemonic,
    required int? maxUnusedAddressGap,
    required int? maxNumberOfIndexesToCheck,
    required int? height,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recoverFromMnemonic,
          [],
          {
            #mnemonic: mnemonic,
            #maxUnusedAddressGap: maxUnusedAddressGap,
            #maxNumberOfIndexesToCheck: maxNumberOfIndexesToCheck,
            #height: height,
          },
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> initializeNew() => (super.noSuchMethod(
        Invocation.method(
          #initializeNew,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> initializeExisting() => (super.noSuchMethod(
        Invocation.method(
          #initializeExisting,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> exit() => (super.noSuchMethod(
        Invocation.method(
          #exit,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> fullRescan(
    int? maxUnusedAddressGap,
    int? maxNumberOfIndexesToCheck,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fullRescan,
          [
            maxUnusedAddressGap,
            maxNumberOfIndexesToCheck,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<int> estimateFeeFor(
    int? satoshiAmount,
    int? feeRate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #estimateFeeFor,
          [
            satoshiAmount,
            feeRate,
          ],
        ),
        returnValue: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  _i16.Future<bool> generateNewAddress() => (super.noSuchMethod(
        Invocation.method(
          #generateNewAddress,
          [],
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);
}

/// A class which mocks [FiroWallet].
///
/// See the documentation for Mockito's code generation for more information.
class MockFiroWallet extends _i1.Mock implements _i19.FiroWallet {
  MockFiroWallet() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set timer(_i16.Timer? _timer) => super.noSuchMethod(
        Invocation.setter(
          #timer,
          _timer,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i10.TransactionNotificationTracker get txTracker => (super.noSuchMethod(
        Invocation.getter(#txTracker),
        returnValue: _FakeTransactionNotificationTracker_8(
          this,
          Invocation.getter(#txTracker),
        ),
      ) as _i10.TransactionNotificationTracker);
  @override
  set txTracker(_i10.TransactionNotificationTracker? _txTracker) =>
      super.noSuchMethod(
        Invocation.setter(
          #txTracker,
          _txTracker,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get refreshMutex => (super.noSuchMethod(
        Invocation.getter(#refreshMutex),
        returnValue: false,
      ) as bool);
  @override
  set refreshMutex(bool? _refreshMutex) => super.noSuchMethod(
        Invocation.setter(
          #refreshMutex,
          _refreshMutex,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get longMutex => (super.noSuchMethod(
        Invocation.getter(#longMutex),
        returnValue: false,
      ) as bool);
  @override
  set longMutex(bool? _longMutex) => super.noSuchMethod(
        Invocation.setter(
          #longMutex,
          _longMutex,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
      ) as bool);
  @override
  set isActive(bool? _isActive) => super.noSuchMethod(
        Invocation.setter(
          #isActive,
          _isActive,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get shouldAutoSync => (super.noSuchMethod(
        Invocation.getter(#shouldAutoSync),
        returnValue: false,
      ) as bool);
  @override
  set shouldAutoSync(bool? shouldAutoSync) => super.noSuchMethod(
        Invocation.setter(
          #shouldAutoSync,
          shouldAutoSync,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set isFavorite(bool? markFavorite) => super.noSuchMethod(
        Invocation.setter(
          #isFavorite,
          markFavorite,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isFavorite => (super.noSuchMethod(
        Invocation.getter(#isFavorite),
        returnValue: false,
      ) as bool);
  @override
  _i15.Coin get coin => (super.noSuchMethod(
        Invocation.getter(#coin),
        returnValue: _i15.Coin.bitcoin,
      ) as _i15.Coin);
  @override
  _i16.Future<List<String>> get mnemonic => (super.noSuchMethod(
        Invocation.getter(#mnemonic),
        returnValue: _i16.Future<List<String>>.value(<String>[]),
      ) as _i16.Future<List<String>>);
  @override
  _i16.Future<_i9.Decimal> get availableBalance => (super.noSuchMethod(
        Invocation.getter(#availableBalance),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#availableBalance),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i9.Decimal> get pendingBalance => (super.noSuchMethod(
        Invocation.getter(#pendingBalance),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#pendingBalance),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i9.Decimal> get totalBalance => (super.noSuchMethod(
        Invocation.getter(#totalBalance),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#totalBalance),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i9.Decimal> get balanceMinusMaxFee => (super.noSuchMethod(
        Invocation.getter(#balanceMinusMaxFee),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#balanceMinusMaxFee),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i8.TransactionData> get transactionData => (super.noSuchMethod(
        Invocation.getter(#transactionData),
        returnValue:
            _i16.Future<_i8.TransactionData>.value(_FakeTransactionData_7(
          this,
          Invocation.getter(#transactionData),
        )),
      ) as _i16.Future<_i8.TransactionData>);
  @override
  _i16.Future<_i8.UtxoData> get utxoData => (super.noSuchMethod(
        Invocation.getter(#utxoData),
        returnValue: _i16.Future<_i8.UtxoData>.value(_FakeUtxoData_9(
          this,
          Invocation.getter(#utxoData),
        )),
      ) as _i16.Future<_i8.UtxoData>);
  @override
  _i16.Future<List<_i8.UtxoObject>> get unspentOutputs => (super.noSuchMethod(
        Invocation.getter(#unspentOutputs),
        returnValue:
            _i16.Future<List<_i8.UtxoObject>>.value(<_i8.UtxoObject>[]),
      ) as _i16.Future<List<_i8.UtxoObject>>);
  @override
  _i16.Future<_i8.TransactionData> get lelantusTransactionData =>
      (super.noSuchMethod(
        Invocation.getter(#lelantusTransactionData),
        returnValue:
            _i16.Future<_i8.TransactionData>.value(_FakeTransactionData_7(
          this,
          Invocation.getter(#lelantusTransactionData),
        )),
      ) as _i16.Future<_i8.TransactionData>);
  @override
  _i16.Future<int> get maxFee => (super.noSuchMethod(
        Invocation.getter(#maxFee),
        returnValue: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  _i16.Future<List<_i9.Decimal>> get balances => (super.noSuchMethod(
        Invocation.getter(#balances),
        returnValue: _i16.Future<List<_i9.Decimal>>.value(<_i9.Decimal>[]),
      ) as _i16.Future<List<_i9.Decimal>>);
  @override
  _i16.Future<_i9.Decimal> get firoPrice => (super.noSuchMethod(
        Invocation.getter(#firoPrice),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.getter(#firoPrice),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i8.FeeObject> get fees => (super.noSuchMethod(
        Invocation.getter(#fees),
        returnValue: _i16.Future<_i8.FeeObject>.value(_FakeFeeObject_5(
          this,
          Invocation.getter(#fees),
        )),
      ) as _i16.Future<_i8.FeeObject>);
  @override
  _i16.Future<String> get currentReceivingAddress => (super.noSuchMethod(
        Invocation.getter(#currentReceivingAddress),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  String get walletName => (super.noSuchMethod(
        Invocation.getter(#walletName),
        returnValue: '',
      ) as String);
  @override
  set walletName(String? newName) => super.noSuchMethod(
        Invocation.setter(
          #walletName,
          newName,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get walletId => (super.noSuchMethod(
        Invocation.getter(#walletId),
        returnValue: '',
      ) as String);
  @override
  _i16.Future<List<String>> get allOwnAddresses => (super.noSuchMethod(
        Invocation.getter(#allOwnAddresses),
        returnValue: _i16.Future<List<String>>.value(<String>[]),
      ) as _i16.Future<List<String>>);
  @override
  bool get isConnected => (super.noSuchMethod(
        Invocation.getter(#isConnected),
        returnValue: false,
      ) as bool);
  @override
  _i11.ElectrumX get electrumXClient => (super.noSuchMethod(
        Invocation.getter(#electrumXClient),
        returnValue: _FakeElectrumX_10(
          this,
          Invocation.getter(#electrumXClient),
        ),
      ) as _i11.ElectrumX);
  @override
  _i12.CachedElectrumX get cachedElectrumXClient => (super.noSuchMethod(
        Invocation.getter(#cachedElectrumXClient),
        returnValue: _FakeCachedElectrumX_11(
          this,
          Invocation.getter(#cachedElectrumXClient),
        ),
      ) as _i12.CachedElectrumX);
  @override
  bool get isRefreshing => (super.noSuchMethod(
        Invocation.getter(#isRefreshing),
        returnValue: false,
      ) as bool);
  @override
  bool get hasCalledExit => (super.noSuchMethod(
        Invocation.getter(#hasCalledExit),
        returnValue: false,
      ) as bool);
  @override
  set onIsActiveWalletChanged(void Function(bool)? _onIsActiveWalletChanged) =>
      super.noSuchMethod(
        Invocation.setter(
          #onIsActiveWalletChanged,
          _onIsActiveWalletChanged,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool validateAddress(String? address) => (super.noSuchMethod(
        Invocation.method(
          #validateAddress,
          [address],
        ),
        returnValue: false,
      ) as bool);
  @override
  _i16.Future<bool> testNetworkConnection() => (super.noSuchMethod(
        Invocation.method(
          #testNetworkConnection,
          [],
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);
  @override
  void startNetworkAlivePinging() => super.noSuchMethod(
        Invocation.method(
          #startNetworkAlivePinging,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void stopNetworkAlivePinging() => super.noSuchMethod(
        Invocation.method(
          #stopNetworkAlivePinging,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i16.Future<Map<String, dynamic>> prepareSendPublic({
    required String? address,
    required int? satoshiAmount,
    Map<String, dynamic>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareSendPublic,
          [],
          {
            #address: address,
            #satoshiAmount: satoshiAmount,
            #args: args,
          },
        ),
        returnValue:
            _i16.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i16.Future<Map<String, dynamic>>);
  @override
  _i16.Future<String> confirmSendPublic({dynamic txData}) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmSendPublic,
          [],
          {#txData: txData},
        ),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  _i16.Future<Map<String, dynamic>> prepareSend({
    required String? address,
    required int? satoshiAmount,
    Map<String, dynamic>? args,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #prepareSend,
          [],
          {
            #address: address,
            #satoshiAmount: satoshiAmount,
            #args: args,
          },
        ),
        returnValue:
            _i16.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i16.Future<Map<String, dynamic>>);
  @override
  _i16.Future<String> confirmSend({required Map<String, dynamic>? txData}) =>
      (super.noSuchMethod(
        Invocation.method(
          #confirmSend,
          [],
          {#txData: txData},
        ),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  _i16.Future<String> send({
    required String? toAddress,
    required int? amount,
    Map<String, String>? args = const {},
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [],
          {
            #toAddress: toAddress,
            #amount: amount,
            #args: args,
          },
        ),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  int estimateTxFee({
    required int? vSize,
    required int? feeRatePerKB,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #estimateTxFee,
          [],
          {
            #vSize: vSize,
            #feeRatePerKB: feeRatePerKB,
          },
        ),
        returnValue: 0,
      ) as int);
  @override
  dynamic coinSelection(
    int? satoshiAmountToSend,
    int? selectedTxFeeRate,
    String? _recipientAddress,
    bool? isSendAll, {
    int? additionalOutputs = 0,
    List<_i8.UtxoObject>? utxos,
  }) =>
      super.noSuchMethod(Invocation.method(
        #coinSelection,
        [
          satoshiAmountToSend,
          selectedTxFeeRate,
          _recipientAddress,
          isSendAll,
        ],
        {
          #additionalOutputs: additionalOutputs,
          #utxos: utxos,
        },
      ));
  @override
  _i16.Future<Map<String, dynamic>> fetchBuildTxData(
          List<_i8.UtxoObject>? utxosToUse) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchBuildTxData,
          [utxosToUse],
        ),
        returnValue:
            _i16.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i16.Future<Map<String, dynamic>>);
  @override
  _i16.Future<Map<String, dynamic>> buildTransaction({
    required List<_i8.UtxoObject>? utxosToUse,
    required Map<String, dynamic>? utxoSigningData,
    required List<String>? recipients,
    required List<int>? satoshiAmounts,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildTransaction,
          [],
          {
            #utxosToUse: utxosToUse,
            #utxoSigningData: utxoSigningData,
            #recipients: recipients,
            #satoshiAmounts: satoshiAmounts,
          },
        ),
        returnValue:
            _i16.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i16.Future<Map<String, dynamic>>);
  @override
  _i16.Future<void> updateNode(bool? shouldRefresh) => (super.noSuchMethod(
        Invocation.method(
          #updateNode,
          [shouldRefresh],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> initializeNew() => (super.noSuchMethod(
        Invocation.method(
          #initializeNew,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> initializeExisting() => (super.noSuchMethod(
        Invocation.method(
          #initializeExisting,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<bool> refreshIfThereIsNewData() => (super.noSuchMethod(
        Invocation.method(
          #refreshIfThereIsNewData,
          [],
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);
  @override
  _i16.Future<void> getAllTxsToWatch(
    _i8.TransactionData? txData,
    _i8.TransactionData? lTxData,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllTxsToWatch,
          [
            txData,
            lTxData,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> refresh() => (super.noSuchMethod(
        Invocation.method(
          #refresh,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  List<Map<dynamic, _i8.LelantusCoin>> getLelantusCoinMap() =>
      (super.noSuchMethod(
        Invocation.method(
          #getLelantusCoinMap,
          [],
        ),
        returnValue: <Map<dynamic, _i8.LelantusCoin>>[],
      ) as List<Map<dynamic, _i8.LelantusCoin>>);
  @override
  _i16.Future<void> anonymizeAllPublicFunds() => (super.noSuchMethod(
        Invocation.method(
          #anonymizeAllPublicFunds,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<List<Map<String, dynamic>>> createMintsFromAmount(int? total) =>
      (super.noSuchMethod(
        Invocation.method(
          #createMintsFromAmount,
          [total],
        ),
        returnValue: _i16.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i16.Future<List<Map<String, dynamic>>>);
  @override
  _i16.Future<String> submitHexToNetwork(String? hex) => (super.noSuchMethod(
        Invocation.method(
          #submitHexToNetwork,
          [hex],
        ),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  _i16.Future<Map<String, dynamic>> buildMintTransaction(
    List<_i8.UtxoObject>? utxosToUse,
    int? satoshisPerRecipient,
    List<Map<String, dynamic>>? mintsMap,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #buildMintTransaction,
          [
            utxosToUse,
            satoshisPerRecipient,
            mintsMap,
          ],
        ),
        returnValue:
            _i16.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i16.Future<Map<String, dynamic>>);
  @override
  _i16.Future<void> checkReceivingAddressForTransactions() =>
      (super.noSuchMethod(
        Invocation.method(
          #checkReceivingAddressForTransactions,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> checkChangeAddressForTransactions() => (super.noSuchMethod(
        Invocation.method(
          #checkChangeAddressForTransactions,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> fillAddresses(
    String? suppliedMnemonic, {
    int? perBatch = 50,
    int? numberOfThreads = 4,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fillAddresses,
          [suppliedMnemonic],
          {
            #perBatch: perBatch,
            #numberOfThreads: numberOfThreads,
          },
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> incrementAddressIndexForChain(int? chain) =>
      (super.noSuchMethod(
        Invocation.method(
          #incrementAddressIndexForChain,
          [chain],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> addToAddressesArrayForChain(
    String? address,
    int? chain,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToAddressesArrayForChain,
          [
            address,
            chain,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> fullRescan(
    int? maxUnusedAddressGap,
    int? maxNumberOfIndexesToCheck,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fullRescan,
          [
            maxUnusedAddressGap,
            maxNumberOfIndexesToCheck,
          ],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> recoverFromMnemonic({
    required String? mnemonic,
    required int? maxUnusedAddressGap,
    required int? maxNumberOfIndexesToCheck,
    required int? height,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #recoverFromMnemonic,
          [],
          {
            #mnemonic: mnemonic,
            #maxUnusedAddressGap: maxUnusedAddressGap,
            #maxNumberOfIndexesToCheck: maxNumberOfIndexesToCheck,
            #height: height,
          },
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<Map<int, dynamic>> getSetDataMap(int? latestSetId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSetDataMap,
          [latestSetId],
        ),
        returnValue: _i16.Future<Map<int, dynamic>>.value(<int, dynamic>{}),
      ) as _i16.Future<Map<int, dynamic>>);
  @override
  _i16.Future<List<Map<String, dynamic>>> fetchAnonymitySets() =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAnonymitySets,
          [],
        ),
        returnValue: _i16.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i16.Future<List<Map<String, dynamic>>>);
  @override
  _i16.Future<int> getLatestSetId() => (super.noSuchMethod(
        Invocation.method(
          #getLatestSetId,
          [],
        ),
        returnValue: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  _i16.Future<List<dynamic>> getUsedCoinSerials() => (super.noSuchMethod(
        Invocation.method(
          #getUsedCoinSerials,
          [],
        ),
        returnValue: _i16.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i16.Future<List<dynamic>>);
  @override
  _i16.Future<void> exit() => (super.noSuchMethod(
        Invocation.method(
          #exit,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<dynamic> getCoinsToJoinSplit(int? required) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCoinsToJoinSplit,
          [required],
        ),
        returnValue: _i16.Future<dynamic>.value(),
      ) as _i16.Future<dynamic>);
  @override
  _i16.Future<int> estimateJoinSplitFee(int? spendAmount) =>
      (super.noSuchMethod(
        Invocation.method(
          #estimateJoinSplitFee,
          [spendAmount],
        ),
        returnValue: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  _i16.Future<int> estimateFeeFor(
    int? satoshiAmount,
    int? feeRate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #estimateFeeFor,
          [
            satoshiAmount,
            feeRate,
          ],
        ),
        returnValue: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  _i16.Future<int> estimateFeeForPublic(
    int? satoshiAmount,
    int? feeRate,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #estimateFeeForPublic,
          [
            satoshiAmount,
            feeRate,
          ],
        ),
        returnValue: _i16.Future<int>.value(0),
      ) as _i16.Future<int>);
  @override
  int roughFeeEstimate(
    int? inputCount,
    int? outputCount,
    int? feeRatePerKB,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #roughFeeEstimate,
          [
            inputCount,
            outputCount,
            feeRatePerKB,
          ],
        ),
        returnValue: 0,
      ) as int);
  @override
  int sweepAllEstimate(int? feeRate) => (super.noSuchMethod(
        Invocation.method(
          #sweepAllEstimate,
          [feeRate],
        ),
        returnValue: 0,
      ) as int);
  @override
  _i16.Future<List<Map<String, dynamic>>> fastFetch(
          List<String>? allTxHashes) =>
      (super.noSuchMethod(
        Invocation.method(
          #fastFetch,
          [allTxHashes],
        ),
        returnValue: _i16.Future<List<Map<String, dynamic>>>.value(
            <Map<String, dynamic>>[]),
      ) as _i16.Future<List<Map<String, dynamic>>>);
  @override
  _i16.Future<List<_i8.Transaction>> getJMintTransactions(
    _i12.CachedElectrumX? cachedClient,
    List<String>? transactions,
    String? currency,
    _i15.Coin? coin,
    _i9.Decimal? currentPrice,
    String? locale,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getJMintTransactions,
          [
            cachedClient,
            transactions,
            currency,
            coin,
            currentPrice,
            locale,
          ],
        ),
        returnValue:
            _i16.Future<List<_i8.Transaction>>.value(<_i8.Transaction>[]),
      ) as _i16.Future<List<_i8.Transaction>>);
  @override
  _i16.Future<bool> generateNewAddress() => (super.noSuchMethod(
        Invocation.method(
          #generateNewAddress,
          [],
        ),
        returnValue: _i16.Future<bool>.value(false),
      ) as _i16.Future<bool>);
  @override
  _i16.Future<_i9.Decimal> availablePrivateBalance() => (super.noSuchMethod(
        Invocation.method(
          #availablePrivateBalance,
          [],
        ),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.method(
            #availablePrivateBalance,
            [],
          ),
        )),
      ) as _i16.Future<_i9.Decimal>);
  @override
  _i16.Future<_i9.Decimal> availablePublicBalance() => (super.noSuchMethod(
        Invocation.method(
          #availablePublicBalance,
          [],
        ),
        returnValue: _i16.Future<_i9.Decimal>.value(_FakeDecimal_6(
          this,
          Invocation.method(
            #availablePublicBalance,
            [],
          ),
        )),
      ) as _i16.Future<_i9.Decimal>);
}

/// A class which mocks [LocaleService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocaleService extends _i1.Mock implements _i20.LocaleService {
  MockLocaleService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get locale => (super.noSuchMethod(
        Invocation.getter(#locale),
        returnValue: '',
      ) as String);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i16.Future<void> loadLocale({bool? notify = true}) => (super.noSuchMethod(
        Invocation.method(
          #loadLocale,
          [],
          {#notify: notify},
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  void addListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Prefs].
///
/// See the documentation for Mockito's code generation for more information.
class MockPrefs extends _i1.Mock implements _i17.Prefs {
  MockPrefs() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInitialized => (super.noSuchMethod(
        Invocation.getter(#isInitialized),
        returnValue: false,
      ) as bool);
  @override
  int get lastUnlockedTimeout => (super.noSuchMethod(
        Invocation.getter(#lastUnlockedTimeout),
        returnValue: 0,
      ) as int);
  @override
  set lastUnlockedTimeout(int? lastUnlockedTimeout) => super.noSuchMethod(
        Invocation.setter(
          #lastUnlockedTimeout,
          lastUnlockedTimeout,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get lastUnlocked => (super.noSuchMethod(
        Invocation.getter(#lastUnlocked),
        returnValue: 0,
      ) as int);
  @override
  set lastUnlocked(int? lastUnlocked) => super.noSuchMethod(
        Invocation.setter(
          #lastUnlocked,
          lastUnlocked,
        ),
        returnValueForMissingStub: null,
      );
  @override
  int get currentNotificationId => (super.noSuchMethod(
        Invocation.getter(#currentNotificationId),
        returnValue: 0,
      ) as int);
  @override
  List<String> get walletIdsSyncOnStartup => (super.noSuchMethod(
        Invocation.getter(#walletIdsSyncOnStartup),
        returnValue: <String>[],
      ) as List<String>);
  @override
  set walletIdsSyncOnStartup(List<String>? walletIdsSyncOnStartup) =>
      super.noSuchMethod(
        Invocation.setter(
          #walletIdsSyncOnStartup,
          walletIdsSyncOnStartup,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i21.SyncingType get syncType => (super.noSuchMethod(
        Invocation.getter(#syncType),
        returnValue: _i21.SyncingType.currentWalletOnly,
      ) as _i21.SyncingType);
  @override
  set syncType(_i21.SyncingType? syncType) => super.noSuchMethod(
        Invocation.setter(
          #syncType,
          syncType,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get wifiOnly => (super.noSuchMethod(
        Invocation.getter(#wifiOnly),
        returnValue: false,
      ) as bool);
  @override
  set wifiOnly(bool? wifiOnly) => super.noSuchMethod(
        Invocation.setter(
          #wifiOnly,
          wifiOnly,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get showFavoriteWallets => (super.noSuchMethod(
        Invocation.getter(#showFavoriteWallets),
        returnValue: false,
      ) as bool);
  @override
  set showFavoriteWallets(bool? showFavoriteWallets) => super.noSuchMethod(
        Invocation.setter(
          #showFavoriteWallets,
          showFavoriteWallets,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get language => (super.noSuchMethod(
        Invocation.getter(#language),
        returnValue: '',
      ) as String);
  @override
  set language(String? newLanguage) => super.noSuchMethod(
        Invocation.setter(
          #language,
          newLanguage,
        ),
        returnValueForMissingStub: null,
      );
  @override
  String get currency => (super.noSuchMethod(
        Invocation.getter(#currency),
        returnValue: '',
      ) as String);
  @override
  set currency(String? newCurrency) => super.noSuchMethod(
        Invocation.setter(
          #currency,
          newCurrency,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i22.ExchangeRateType get exchangeRateType => (super.noSuchMethod(
        Invocation.getter(#exchangeRateType),
        returnValue: _i22.ExchangeRateType.estimated,
      ) as _i22.ExchangeRateType);
  @override
  set exchangeRateType(_i22.ExchangeRateType? exchangeRateType) =>
      super.noSuchMethod(
        Invocation.setter(
          #exchangeRateType,
          exchangeRateType,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get useBiometrics => (super.noSuchMethod(
        Invocation.getter(#useBiometrics),
        returnValue: false,
      ) as bool);
  @override
  set useBiometrics(bool? useBiometrics) => super.noSuchMethod(
        Invocation.setter(
          #useBiometrics,
          useBiometrics,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasPin => (super.noSuchMethod(
        Invocation.getter(#hasPin),
        returnValue: false,
      ) as bool);
  @override
  set hasPin(bool? hasPin) => super.noSuchMethod(
        Invocation.setter(
          #hasPin,
          hasPin,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get showTestNetCoins => (super.noSuchMethod(
        Invocation.getter(#showTestNetCoins),
        returnValue: false,
      ) as bool);
  @override
  set showTestNetCoins(bool? showTestNetCoins) => super.noSuchMethod(
        Invocation.setter(
          #showTestNetCoins,
          showTestNetCoins,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get isAutoBackupEnabled => (super.noSuchMethod(
        Invocation.getter(#isAutoBackupEnabled),
        returnValue: false,
      ) as bool);
  @override
  set isAutoBackupEnabled(bool? isAutoBackupEnabled) => super.noSuchMethod(
        Invocation.setter(
          #isAutoBackupEnabled,
          isAutoBackupEnabled,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set autoBackupLocation(String? autoBackupLocation) => super.noSuchMethod(
        Invocation.setter(
          #autoBackupLocation,
          autoBackupLocation,
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i23.BackupFrequencyType get backupFrequencyType => (super.noSuchMethod(
        Invocation.getter(#backupFrequencyType),
        returnValue: _i23.BackupFrequencyType.everyTenMinutes,
      ) as _i23.BackupFrequencyType);
  @override
  set backupFrequencyType(_i23.BackupFrequencyType? backupFrequencyType) =>
      super.noSuchMethod(
        Invocation.setter(
          #backupFrequencyType,
          backupFrequencyType,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set lastAutoBackup(DateTime? lastAutoBackup) => super.noSuchMethod(
        Invocation.setter(
          #lastAutoBackup,
          lastAutoBackup,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hideBlockExplorerWarning => (super.noSuchMethod(
        Invocation.getter(#hideBlockExplorerWarning),
        returnValue: false,
      ) as bool);
  @override
  set hideBlockExplorerWarning(bool? hideBlockExplorerWarning) =>
      super.noSuchMethod(
        Invocation.setter(
          #hideBlockExplorerWarning,
          hideBlockExplorerWarning,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get gotoWalletOnStartup => (super.noSuchMethod(
        Invocation.getter(#gotoWalletOnStartup),
        returnValue: false,
      ) as bool);
  @override
  set gotoWalletOnStartup(bool? gotoWalletOnStartup) => super.noSuchMethod(
        Invocation.setter(
          #gotoWalletOnStartup,
          gotoWalletOnStartup,
        ),
        returnValueForMissingStub: null,
      );
  @override
  set startupWalletId(String? startupWalletId) => super.noSuchMethod(
        Invocation.setter(
          #startupWalletId,
          startupWalletId,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get externalCalls => (super.noSuchMethod(
        Invocation.getter(#externalCalls),
        returnValue: false,
      ) as bool);
  @override
  set externalCalls(bool? externalCalls) => super.noSuchMethod(
        Invocation.setter(
          #externalCalls,
          externalCalls,
        ),
        returnValueForMissingStub: null,
      );
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i16.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> incrementCurrentNotificationIndex() => (super.noSuchMethod(
        Invocation.method(
          #incrementCurrentNotificationIndex,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  void addListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [PriceService].
///
/// See the documentation for Mockito's code generation for more information.
class MockPriceService extends _i1.Mock implements _i24.PriceService {
  MockPriceService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get baseTicker => (super.noSuchMethod(
        Invocation.getter(#baseTicker),
        returnValue: '',
      ) as String);
  @override
  set baseTicker(String? _baseTicker) => super.noSuchMethod(
        Invocation.setter(
          #baseTicker,
          _baseTicker,
        ),
        returnValueForMissingStub: null,
      );
  @override
  Duration get updateInterval => (super.noSuchMethod(
        Invocation.getter(#updateInterval),
        returnValue: _FakeDuration_12(
          this,
          Invocation.getter(#updateInterval),
        ),
      ) as Duration);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i13.Tuple2<_i9.Decimal, double> getPrice(_i15.Coin? coin) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPrice,
          [coin],
        ),
        returnValue: _FakeTuple2_13<_i9.Decimal, double>(
          this,
          Invocation.method(
            #getPrice,
            [coin],
          ),
        ),
      ) as _i13.Tuple2<_i9.Decimal, double>);
  @override
  _i16.Future<void> updatePrice() => (super.noSuchMethod(
        Invocation.method(
          #updatePrice,
          [],
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  void cancel() => super.noSuchMethod(
        Invocation.method(
          #cancel,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void start(bool? rightAway) => super.noSuchMethod(
        Invocation.method(
          #start,
          [rightAway],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NotesService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotesService extends _i1.Mock implements _i25.NotesService {
  MockNotesService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get walletId => (super.noSuchMethod(
        Invocation.getter(#walletId),
        returnValue: '',
      ) as String);
  @override
  Map<String, String> get notesSync => (super.noSuchMethod(
        Invocation.getter(#notesSync),
        returnValue: <String, String>{},
      ) as Map<String, String>);
  @override
  _i16.Future<Map<String, String>> get notes => (super.noSuchMethod(
        Invocation.getter(#notes),
        returnValue: _i16.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i16.Future<Map<String, String>>);
  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);
  @override
  _i16.Future<Map<String, String>> search(String? text) => (super.noSuchMethod(
        Invocation.method(
          #search,
          [text],
        ),
        returnValue: _i16.Future<Map<String, String>>.value(<String, String>{}),
      ) as _i16.Future<Map<String, String>>);
  @override
  _i16.Future<String> getNoteFor({required String? txid}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNoteFor,
          [],
          {#txid: txid},
        ),
        returnValue: _i16.Future<String>.value(''),
      ) as _i16.Future<String>);
  @override
  _i16.Future<void> editOrAddNote({
    required String? txid,
    required String? note,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editOrAddNote,
          [],
          {
            #txid: txid,
            #note: note,
          },
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  _i16.Future<void> deleteNote({required String? txid}) => (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [],
          {#txid: txid},
        ),
        returnValue: _i16.Future<void>.value(),
        returnValueForMissingStub: _i16.Future<void>.value(),
      ) as _i16.Future<void>);
  @override
  void addListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void removeListener(_i18.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
