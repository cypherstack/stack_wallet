// Mocks generated by Mockito 5.4.4 from annotations
// in stackwallet/test/screen_tests/settings_view/settings_subviews/wallet_settings_view_screen_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:ui' as _i13;

import 'package:local_auth/local_auth.dart' as _i7;
import 'package:local_auth_android/local_auth_android.dart' as _i8;
import 'package:local_auth_darwin/local_auth_darwin.dart' as _i9;
import 'package:local_auth_windows/local_auth_windows.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:stackwallet/electrumx_rpc/cached_electrumx_client.dart' as _i3;
import 'package:stackwallet/electrumx_rpc/electrumx_client.dart' as _i2;
import 'package:stackwallet/services/wallets_service.dart' as _i12;
import 'package:stackwallet/utilities/biometrics.dart' as _i11;
import 'package:stackwallet/wallets/crypto_currency/crypto_currency.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeElectrumXClient_0 extends _i1.SmartFake
    implements _i2.ElectrumXClient {
  _FakeElectrumXClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CachedElectrumXClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockCachedElectrumXClient extends _i1.Mock
    implements _i3.CachedElectrumXClient {
  MockCachedElectrumXClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ElectrumXClient get electrumXClient => (super.noSuchMethod(
        Invocation.getter(#electrumXClient),
        returnValue: _FakeElectrumXClient_0(
          this,
          Invocation.getter(#electrumXClient),
        ),
      ) as _i2.ElectrumXClient);

  @override
  _i4.Future<Map<String, dynamic>> getAnonymitySet({
    required String? groupId,
    String? blockhash = r'',
    required _i5.CryptoCurrency? cryptoCurrency,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAnonymitySet,
          [],
          {
            #groupId: groupId,
            #blockhash: blockhash,
            #cryptoCurrency: cryptoCurrency,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  String base64ToHex(String? source) => (super.noSuchMethod(
        Invocation.method(
          #base64ToHex,
          [source],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #base64ToHex,
            [source],
          ),
        ),
      ) as String);

  @override
  String base64ToReverseHex(String? source) => (super.noSuchMethod(
        Invocation.method(
          #base64ToReverseHex,
          [source],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #base64ToReverseHex,
            [source],
          ),
        ),
      ) as String);

  @override
  _i4.Future<Map<String, dynamic>> getTransaction({
    required String? txHash,
    required _i5.CryptoCurrency? cryptoCurrency,
    bool? verbose = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTransaction,
          [],
          {
            #txHash: txHash,
            #cryptoCurrency: cryptoCurrency,
            #verbose: verbose,
          },
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);

  @override
  _i4.Future<List<String>> getUsedCoinSerials({
    required _i5.CryptoCurrency? cryptoCurrency,
    int? startNumber = 0,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsedCoinSerials,
          [],
          {
            #cryptoCurrency: cryptoCurrency,
            #startNumber: startNumber,
          },
        ),
        returnValue: _i4.Future<List<String>>.value(<String>[]),
      ) as _i4.Future<List<String>>);

  @override
  _i4.Future<void> clearSharedTransactionCache(
          {required _i5.CryptoCurrency? cryptoCurrency}) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearSharedTransactionCache,
          [],
          {#cryptoCurrency: cryptoCurrency},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [LocalAuthentication].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalAuthentication extends _i1.Mock
    implements _i7.LocalAuthentication {
  MockLocalAuthentication() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> get canCheckBiometrics => (super.noSuchMethod(
        Invocation.getter(#canCheckBiometrics),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> authenticate({
    required String? localizedReason,
    Iterable<_i8.AuthMessages>? authMessages = const [
      _i9.IOSAuthMessages(),
      _i8.AndroidAuthMessages(),
      _i10.WindowsAuthMessages(),
    ],
    _i8.AuthenticationOptions? options = const _i8.AuthenticationOptions(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
          {
            #localizedReason: localizedReason,
            #authMessages: authMessages,
            #options: options,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> stopAuthentication() => (super.noSuchMethod(
        Invocation.method(
          #stopAuthentication,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<bool> isDeviceSupported() => (super.noSuchMethod(
        Invocation.method(
          #isDeviceSupported,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<List<_i8.BiometricType>> getAvailableBiometrics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableBiometrics,
          [],
        ),
        returnValue:
            _i4.Future<List<_i8.BiometricType>>.value(<_i8.BiometricType>[]),
      ) as _i4.Future<List<_i8.BiometricType>>);
}

/// A class which mocks [Biometrics].
///
/// See the documentation for Mockito's code generation for more information.
class MockBiometrics extends _i1.Mock implements _i11.Biometrics {
  MockBiometrics() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<bool> authenticate({
    required String? cancelButtonText,
    required String? localizedReason,
    required String? title,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #authenticate,
          [],
          {
            #cancelButtonText: cancelButtonText,
            #localizedReason: localizedReason,
            #title: title,
          },
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
}

/// A class which mocks [WalletsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletsService extends _i1.Mock implements _i12.WalletsService {
  MockWalletsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<Map<String, _i12.WalletInfo>> get walletNames =>
      (super.noSuchMethod(
        Invocation.getter(#walletNames),
        returnValue: _i4.Future<Map<String, _i12.WalletInfo>>.value(
            <String, _i12.WalletInfo>{}),
      ) as _i4.Future<Map<String, _i12.WalletInfo>>);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void addListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i13.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
